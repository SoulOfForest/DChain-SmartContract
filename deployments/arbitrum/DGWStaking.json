{
  "address": "0x25aDCc9be99DfDD9580eCaa204B3779560B68B40",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInUSD",
          "type": "uint256"
        }
      ],
      "name": "ComissionDirectBonus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInUSD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestAmountInUSD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "dueDate",
          "type": "uint64"
        }
      ],
      "name": "ContractCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInUSD",
          "type": "uint256"
        }
      ],
      "name": "RewardHarvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingAmount",
          "type": "uint256"
        }
      ],
      "name": "StakingContractCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DDXStaking",
      "outputs": [
        {
          "internalType": "contract IDDXStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DDXVault",
      "outputs": [
        {
          "internalType": "contract IDDXVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUB_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "__DChainBase_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedStakeTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "created",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetPrices",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimDuration",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_contractIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimMultipleRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "commissionInterestLevels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "couldBecomeReferrer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_originAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        }
      ],
      "name": "depositByVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "directBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "directBonusRefreshExecuted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyCancelled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraRewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20WithBurn",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_contractIds",
          "type": "uint256[]"
        }
      ],
      "name": "getAllPendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountInUSD",
          "type": "uint256"
        }
      ],
      "name": "getAmountDWByUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountInUSD",
          "type": "uint256"
        }
      ],
      "name": "getAmountDWByUSDStatic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakingAmount",
          "type": "uint256"
        }
      ],
      "name": "getAmountUSDByToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakingAmount",
          "type": "uint256"
        }
      ],
      "name": "getAmountUSDByTokenStatic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_contractIds",
          "type": "uint256[]"
        }
      ],
      "name": "getMultipleContractInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalExpectedInterest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakesInUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedInterest",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "claimDuration",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "dueDate",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "lastClaimedTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "lastUpdatedTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "createdAt",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "stakeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalStakesInToken",
              "type": "uint256"
            }
          ],
          "internalType": "struct DGWStaking.StakingInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getStakingAmountByPegToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getStakingAmountInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fundReceiver",
          "type": "address"
        },
        {
          "internalType": "contract IERC20WithBurn",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20WithBurn",
          "name": "_extraRewardToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maximumEarningsInPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumStakingAmountInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "offeredCurrencies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "decimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "pendingRewardInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referredBy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "refreshDirectBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20WithBurn",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "root",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeToken",
          "type": "address"
        }
      ],
      "name": "setAllowedStakeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pegToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setAssetOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_claimDuration",
          "type": "uint64"
        }
      ],
      "name": "setClaimDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDDXStaking",
          "name": "_staking",
          "type": "address"
        }
      ],
      "name": "setDDXStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDDXVault",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setDDXVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDWVault",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setDWVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_directInterest",
          "type": "uint256"
        }
      ],
      "name": "setDirectInterest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundReceiver",
          "type": "address"
        }
      ],
      "name": "setFundReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumStakingAmountInUSD",
          "type": "uint256"
        }
      ],
      "name": "setMinimumStakingInUSD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimal",
          "type": "uint256"
        }
      ],
      "name": "setOfferedCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_root",
          "type": "address"
        }
      ],
      "name": "setRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakingContractOwnedBy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakingContracts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalExpectedInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStakesInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "claimDuration",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "dueDate",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "lastClaimedTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "lastUpdatedTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "createdAt",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalStakesInToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalReferralInvitations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakingContracts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IDWVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x12e8a7f4460a5e49baa947727c17e9aaddf6373ce493f7480e173161ed729dd4",
  "receipt": {
    "to": null,
    "from": "0xdd58C634D8b4D17564Eac40d356f475Ee100820E",
    "contractAddress": "0x25aDCc9be99DfDD9580eCaa204B3779560B68B40",
    "transactionIndex": 6,
    "gasUsed": "4643928",
    "logsBloom": "0x
    "blockHash": "0x51e398df523d1dda06aa170357d3202031b4fd6cbdf601823f5f0a5d10cbfcf0",
    "transactionHash": "0x12e8a7f4460a5e49baa947727c17e9aaddf6373ce493f7480e173161ed729dd4",
    "logs": [],
    "blockNumber": 199253334,
    "cumulativeGasUsed": "5538526",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "60603aef393aee9412d7cdabda46c161",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInUSD\",\"type\":\"uint256\"}],\"name\":\"ComissionDirectBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAmountInUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dueDate\",\"type\":\"uint64\"}],\"name\":\"ContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInUSD\",\"type\":\"uint256\"}],\"name\":\"RewardHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"}],\"name\":\"StakingContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DDXStaking\",\"outputs\":[{\"internalType\":\"contract IDDXStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DDXVault\",\"outputs\":[{\"internalType\":\"contract IDDXVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUB_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__DChainBase_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedStakeTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetPrices\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_contractIds\",\"type\":\"uint256[]\"}],\"name\":\"claimMultipleRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commissionInterestLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"couldBecomeReferrer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"depositByVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"directBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"directBonusRefreshExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraRewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20WithBurn\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_contractIds\",\"type\":\"uint256[]\"}],\"name\":\"getAllPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountInUSD\",\"type\":\"uint256\"}],\"name\":\"getAmountDWByUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountInUSD\",\"type\":\"uint256\"}],\"name\":\"getAmountDWByUSDStatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingAmount\",\"type\":\"uint256\"}],\"name\":\"getAmountUSDByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingAmount\",\"type\":\"uint256\"}],\"name\":\"getAmountUSDByTokenStatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_contractIds\",\"type\":\"uint256[]\"}],\"name\":\"getMultipleContractInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalExpectedInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"claimDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dueDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastClaimedTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastUpdatedTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAt\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesInToken\",\"type\":\"uint256\"}],\"internalType\":\"struct DGWStaking.StakingInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getStakingAmountByPegToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getStakingAmountInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundReceiver\",\"type\":\"address\"},{\"internalType\":\"contract IERC20WithBurn\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20WithBurn\",\"name\":\"_extraRewardToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumEarningsInPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakingAmountInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"offeredCurrencies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"pendingRewardInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referredBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"refreshDirectBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20WithBurn\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"setAllowedStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pegToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setAssetOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_claimDuration\",\"type\":\"uint64\"}],\"name\":\"setClaimDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDDXStaking\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"setDDXStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDDXVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setDDXVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDWVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setDWVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_directInterest\",\"type\":\"uint256\"}],\"name\":\"setDirectInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundReceiver\",\"type\":\"address\"}],\"name\":\"setFundReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStakingAmountInUSD\",\"type\":\"uint256\"}],\"name\":\"setMinimumStakingInUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"setOfferedCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_root\",\"type\":\"address\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingContractOwnedBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalExpectedInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"claimDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dueDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastClaimedTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastUpdatedTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAt\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesInToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReferralInvitations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IDWVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getStakingAmountInUSD(address,uint256)\":{\"details\":\"Get Staking token amount in offered currencies\",\"params\":{\"_amount\":\"Amount of purchase token\"},\"returns\":{\"_0\":\"Return amount of respective IDO token\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositByVault(uint256,uint256,address,address)\":{\"notice\":\"----------------------------------- ---------- Core Function ---------- -----------------------------------\"},\"pause()\":{\"notice\":\"----------------------------------- --------- Pause Function ---------- -----------------------------------\"},\"setRoot(address)\":{\"notice\":\"----------------------------------- --------- Update Function --------- -----------------------------------\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DGWStaking.sol\":\"DGWStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/DChainBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\n/**\\n * @title HelixBase contract\\n * @notice This is our Base contract that most other contracts inherit from. It includes many standard\\n *  useful abilities like upgradeability, pausability, access control, and re-entrancy guards.\\n * @author Helix\\n */\\n\\ncontract DChainBase is\\n    AccessControlUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    bytes32 public constant SUB_ADMIN_ROLE = keccak256(\\\"SUB_ADMIN_ROLE\\\");\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    // Pre-reserving a few slots in the base contract in case we need to add things in the future.\\n    // This does not actually take up gas cost or storage cost, but it does reserve the storage slots.\\n    // See OpenZeppelin's use of this pattern here:\\n    // https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L37\\n    uint256[50] private __gap1;\\n    uint256[50] private __gap2;\\n    uint256[50] private __gap3;\\n    uint256[50] private __gap4;\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __DChainBase_init(address owner) public onlyInitializing {\\n        require(owner != address(0), \\\"Owner cannot be the zero address\\\");\\n        __AccessControl_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        _setupRole(OWNER_ROLE, owner);\\n        _setupRole(PAUSER_ROLE, owner);\\n\\n        _setRoleAdmin(SUB_ADMIN_ROLE, OWNER_ROLE);\\n        _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\n        _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n    }\\n\\n    function isAdmin() public view returns (bool) {\\n        return hasRole(OWNER_ROLE, _msgSender());\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(), \\\"Must have admin role to perform this action\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xff077614c10471835bea25f8d4a28ad727e5432380aec06f0ee3ec191ca2d377\",\"license\":\"MIT\"},\"contracts/DGWStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20WithBurn } from \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IOracleSimple.sol\\\";\\nimport \\\"./interfaces/IDChainStaking.sol\\\";\\nimport \\\"./interfaces/IDDXVault.sol\\\";\\nimport \\\"./interfaces/IDDXStaking.sol\\\";\\nimport \\\"./interfaces/IDWVault.sol\\\";\\nimport \\\"./DChainBase.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\n\\ncontract DGWStaking is IDChainStaking, DChainBase {\\n    using SafeERC20 for IERC20WithBurn;\\n    \\n    struct StakingInfo {\\n        uint256 totalExpectedInterest;\\n        uint256 totalStakesInUSD;\\n        uint256 claimedInterest;\\n        uint64 claimDuration;\\n        uint64 dueDate;\\n        uint64 lastClaimedTime;\\n        uint64 lastUpdatedTime;\\n        uint64 createdAt;\\n        address stakeToken;\\n        uint256 totalStakesInToken;\\n    }\\n\\n    struct StakeToken {\\n        bool created;\\n    }\\n\\n    struct OfferedCurrency {\\n        uint256 decimal;\\n        uint256 rate;\\n    }\\n\\n    uint64 private constant INTEREST_RATE_PRECISION_POINT = (10 ** 18); \\n    uint32 private constant ONE_DAY_IN_SECONDS = 1 days;\\n    uint32 private constant ONE_YEAR_IN_SECONDS = 365 days;\\n\\n\\n    IERC20WithBurn public override rewardToken;\\n    IERC20WithBurn public extraRewardToken;\\n\\n    IDDXVault public DDXVault;\\n    IDWVault public vault;\\n    IDDXStaking public DDXStaking;\\n    \\n    address public treasury;\\n    address public admin;\\n\\n    uint256 public totalStakingContracts;\\n\\n    uint256 public totalStaked;\\n    uint256 public minimumStakingAmountInUSD; \\n    uint256 public maximumEarningsInPercent;\\n\\n    uint64 public claimDuration;\\n    uint256 public directInterest;\\n    \\n    uint256[9] public commissionInterestLevels;\\n\\n    bool public emergencyCancelled;\\n\\n    // Asset token -> Offered Currency (to $)\\n    mapping(address => OfferedCurrency) public offeredCurrencies;\\n    // sender => direct bonus\\n    mapping(address => uint256) public directBonus;\\n\\n    // asset dress -> allowed\\n    mapping(address => StakeToken) public allowedStakeTokens;\\n    // Asset token => oracle\\n    mapping(address => address) public assetPrices;\\n    // referrer -> number of F1s\\n    mapping(address => uint256) public totalReferralInvitations;\\n    // sender -> referrer \\n    mapping(address => address) public referredBy;\\n    // sender -> current staking infos\\n    mapping(uint => StakingInfo) public stakingContracts;\\n    // staking contract id -> owner\\n    mapping(uint => address) public stakingContractOwnedBy;\\n        \\n    mapping(address => bool) public couldBecomeReferrer;\\n\\n    address public fundReceiver;\\n    address public root; \\n\\n    mapping(address => bool) public directBonusRefreshExecuted;\\n\\n    event ComissionDirectBonus(address indexed user, address indexed recipient, uint256 amount, uint amountInUSD);\\n    event ContractCreated(uint256 indexed contractId, address indexed user, address indexed stakeToken, address referrer, uint256 amount, uint256 amountInUSD, uint256 interestAmountInUSD, uint64 dueDate);\\n    event StakingContractCreated(address indexed user, address indexed referrer, uint indexed contractId, uint stakingAmount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event RewardHarvested(uint256 indexed contractId, address indexed claimer, uint256 amount, uint256 amountInUSD);\\n\\n    function initialize(address _owner, address _treasury, address _fundReceiver, IERC20WithBurn _rewardToken, IERC20WithBurn _extraRewardToken) external initializer {\\n        __DChainBase_init(_owner);\\n        \\n        /// @dev: ZA - Zero address\\n        require(_treasury != address(0), \\\"ZA\\\");\\n        require(address(_rewardToken) != address(0), \\\"ZA\\\");\\n\\n        fundReceiver = _fundReceiver;\\n        treasury = _treasury;\\n        rewardToken = _rewardToken;\\n        extraRewardToken = _extraRewardToken;\\n        admin = msg.sender;\\n\\n        /// Commission for the invitation and only get once\\n        commissionInterestLevels = [\\n            1500, // 15%\\n            1000, // 10%\\n            500,  // 5%\\n            500,  // 5%\\n            500,  // 5%\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n\\n\\n        claimDuration = 600 days; // 20 months\\n        directInterest = 50000000000000000; // 5%\\n        minimumStakingAmountInUSD = 100 * (10 ** 6); // Minimum will be 100$\\n        maximumEarningsInPercent = 2000000000000000000; // 200%\\n\\n        _setupRole(SUB_ADMIN_ROLE, _owner);\\n\\n        // Max approve for transfer from \\n        rewardToken.approve(address(this), type(uint256).max);\\n    }\\n\\n    /// -----------------------------------\\n    /// --------- Update Function ---------\\n    /// -----------------------------------\\n\\n    function setRoot(address _root) external onlyAdmin {\\n        root = _root;\\n    }\\n\\n    function setMinimumStakingInUSD(uint256 _minimumStakingAmountInUSD) external onlyRole(SUB_ADMIN_ROLE) {\\n        minimumStakingAmountInUSD = _minimumStakingAmountInUSD;\\n    }\\n\\n    function setDirectInterest(uint256 _directInterest) external onlyRole(SUB_ADMIN_ROLE) {\\n        require(_directInterest <= INTEREST_RATE_PRECISION_POINT, \\\"pool: Direct Interest rate could not higher than 100%\\\");\\n        directInterest = _directInterest;\\n    }\\n\\n    function setFundReceiver(address _fundReceiver) external onlyAdmin {\\n        fundReceiver = _fundReceiver;\\n    }\\n    function setClaimDuration(uint64 _claimDuration) external onlyRole(SUB_ADMIN_ROLE) {\\n        claimDuration = _claimDuration;\\n    }\\n\\n    function setDDXStaking(IDDXStaking _staking) external onlyRole(SUB_ADMIN_ROLE) {\\n        require(address(_staking) != address(0), \\\"pool: DDX Staking cannot be zero address\\\");\\n        DDXStaking = _staking;\\n    }\\n\\n    function setDWVault(IDWVault _vault) external onlyRole(SUB_ADMIN_ROLE) {\\n        require(address(_vault) != address(0), \\\"pool: DW vault cannot be zero address\\\");\\n        vault = _vault;\\n    }\\n\\n    function setDDXVault(IDDXVault _vault) external onlyRole(SUB_ADMIN_ROLE) {\\n        require(address(_vault) != address(0), \\\"pool: DDX vault cannot be zero address\\\");\\n        DDXVault = _vault;\\n    }\\n\\n    function setAssetOracle(address _pegToken, address _oracle) external onlyRole(SUB_ADMIN_ROLE) {\\n        assetPrices[_pegToken] = _oracle;\\n    }\\n\\n    // how to convert from 1 Token - to $\\n    function setOfferedCurrency(address _currency, uint _rate, uint _decimal) external onlyRole(SUB_ADMIN_ROLE) {\\n        OfferedCurrency storage offeredCurrency = offeredCurrencies[_currency];\\n        offeredCurrency.rate = _rate;\\n        offeredCurrency.decimal = _decimal;\\n    }\\n\\n    function setAllowedStakeToken(address _stakeToken) external onlyRole(SUB_ADMIN_ROLE) {\\n        StakeToken storage stakeToken = allowedStakeTokens[_stakeToken];\\n        require(!stakeToken.created, \\\"Allowed token is already existed!\\\");\\n        stakeToken.created = true;\\n    }\\n\\n    function refreshDirectBonus(address[] memory _addresses) external onlyRole(SUB_ADMIN_ROLE) {\\n        for (uint i = 0; i < _addresses.length; i++) {\\n            if (!directBonusRefreshExecuted[_addresses[i]]) {\\n                directBonusRefreshExecuted[_addresses[i]] = true;\\n                directBonus[_addresses[i]] = _convertTokenToUSD(address(rewardToken), directBonus[_addresses[i]]);\\n            }\\n        }\\n    }\\n\\n    /// -----------------------------------\\n    /// ---------- Core Function ----------\\n    /// -----------------------------------\\n\\n    function depositByVault(uint256 _originAmount, uint _lockedAmount, address _user, address _referrer) external override whenNotPaused nonReentrant {\\n        require(_msgSender() == address(vault), \\\"pool: Not stake by vault\\\");\\n        \\n        uint totalStakeAmount = _originAmount + _lockedAmount;\\n\\n        require(totalStakeAmount > 0, \\\"pool: amount cannot be zero\\\");\\n\\n        // Forward from vault to smart contract \\n        _forwardStakeToken(address(rewardToken), address(vault), _originAmount);\\n        uint amountOutInUSD = _validateMinimumStakingAmount(address(rewardToken), totalStakeAmount);\\n\\n        // If user choose to stake with platform token, need to specify which peg token you want to convert to \\n        if (_originAmount > 0) {\\n            rewardToken.burn(_originAmount);\\n        }\\n\\n        _referrer = _joinByReferral(_user, _referrer, amountOutInUSD);\\n        _createStakingContract(_user, address(rewardToken), _referrer, totalStakeAmount, amountOutInUSD);\\n    \\n        _rewardDDXToUser(amountOutInUSD, _user);\\n    }\\n\\n    function deposit(uint256 amount, address stakeToken, address referrer) external whenNotPaused nonReentrant {\\n        address sender = msg.sender;\\n\\n        require(amount > 0, \\\"pool: amount cannot be zero\\\");\\n        require(sender != address(0), \\\"pool: stake address can not be zero address\\\");\\n\\n        // Forward user tokens to smart contract \\n        uint stakingAmount = _forwardStakeToken(stakeToken, sender, amount);\\n        uint amountOutInUSD = _validateMinimumStakingAmount(stakeToken, stakingAmount);\\n\\n        // If uesr choose to stake with other tokens, the token needs to be in the allowed list.\\n        if (stakeToken != address(rewardToken)) {\\n            StakeToken memory allowedStakeToken = allowedStakeTokens[stakeToken];\\n            require(allowedStakeToken.created, \\\"pool: stake token is not allowed\\\");\\n        }\\n        \\n        // If user choose to stake with platform token, need to specify which peg token you want to convert to \\n        if (stakeToken == address(rewardToken)) {\\n            rewardToken.burn(stakingAmount);\\n        } else {\\n            IERC20WithBurn(stakeToken).safeTransfer(fundReceiver, amount);\\n        }\\n\\n        referrer = _joinByReferral(sender, referrer, amountOutInUSD);\\n        _createStakingContract(sender, stakeToken, referrer, stakingAmount, amountOutInUSD);\\n\\n        _rewardDDXToUser(amountOutInUSD, sender);\\n    }\\n\\n    function claimMultipleRewards(uint[] memory _contractIds) external whenNotPaused {\\n        for (uint i; i < _contractIds.length;) {\\n            claimReward(_contractIds[i]);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function claimReward(uint _contractId) public nonReentrant whenNotPaused {\\n        _harvest(_msgSender(), _contractId);\\n    }\\n\\n    function _harvest(address _sender, uint _contractId) internal {\\n        require(stakingContractOwnedBy[_contractId] == _sender, \\\"pool: contract id not belongs to this owner\\\");\\n        \\n        StakingInfo storage stakingInfo = stakingContracts[_contractId];\\n\\n        uint256 rewardsInUSD = pendingRewardInUSD(_contractId);\\n        uint256 rewardsInRewardTokens = _convertUSDToRewardToken(rewardsInUSD);\\n\\n        if (rewardsInRewardTokens > 0) {\\n            // Transfer the interest amount to owner\\n            rewardToken.transferFrom(treasury, _sender, rewardsInRewardTokens);\\n            \\n            uint64 lastClaimedTime = uint64(block.timestamp);\\n    \\n            if (lastClaimedTime > stakingInfo.dueDate) {\\n                lastClaimedTime = stakingInfo.dueDate;\\n            }\\n    \\n            stakingInfo.lastClaimedTime = lastClaimedTime;\\n            stakingInfo.claimedInterest += rewardsInUSD;\\n        }\\n        \\n        stakingInfo.lastUpdatedTime = uint64(block.timestamp);\\n        \\n        emit RewardHarvested(_contractId, _sender, rewardsInRewardTokens, rewardsInUSD);\\n    }\\n\\n    function pendingRewardInUSD(uint256 _contractId) public view returns (uint256) {\\n        StakingInfo memory stakingInfo = stakingContracts[_contractId];\\n\\n        uint64 current = uint64(block.timestamp);\\n\\n        if (current <= stakingInfo.lastClaimedTime) {\\n            return 0;\\n        }\\n\\n        if (current > stakingInfo.dueDate) {\\n            current = stakingInfo.dueDate;\\n        }\\n\\n        // Get total number of interest periods from the last time claimed\\n        uint64 passedDuration = current - stakingInfo.lastClaimedTime; \\n        \\n        uint256 pendingInterest = stakingInfo.totalExpectedInterest * passedDuration * INTEREST_RATE_PRECISION_POINT / stakingInfo.claimDuration / INTEREST_RATE_PRECISION_POINT;\\n\\n        return pendingInterest;\\n    }\\n\\n    // Reward token - asset\\n    function _validateMinimumStakingAmount(address _stakeToken, uint256 _stakingAmount) internal returns(uint256 totalStakingAmountInUSD) {\\n        address oracle = assetPrices[_stakeToken];\\n\\n        uint256 amountOut;\\n\\n        if (oracle != address(0)) {\\n            // Update oracle Pricing when time elapsed has passed\\n            if (block.timestamp - IOracleSimple(oracle).getBlockTimestampLast() >  IOracleSimple(oracle).PERIOD()) { \\n                IOracleSimple(oracle).update();\\n            }\\n            \\n            amountOut = IOracleSimple(oracle).consult(_stakeToken, _stakingAmount);\\n        }\\n\\n        if (amountOut > 0) {\\n            totalStakingAmountInUSD = amountOut;\\n        } else { \\n            // This case fallback to pre setup price\\n            totalStakingAmountInUSD = getStakingAmountInUSD(_stakeToken, _stakingAmount);  // Get amount in case we don't have an active oracle\\n        }\\n\\n        // Needs to be make sure staking amount by $ greater than minimum amount\\n        require(totalStakingAmountInUSD >= minimumStakingAmountInUSD, \\\"pool: minimum staking amount not reached\\\");\\n    }\\n\\n    function _convertTokenToUSD(address _stakeToken, uint256 _stakingAmount) internal returns(uint256) {\\n        uint totalStakingAmountInUSD;\\n\\n        address oracle = assetPrices[_stakeToken];\\n\\n        uint256 amountOut;\\n\\n        if (oracle != address(0)) {\\n            // Update oracle Pricing when time elapsed has passed\\n            if (block.timestamp - IOracleSimple(oracle).getBlockTimestampLast() >  IOracleSimple(oracle).PERIOD()) { \\n                IOracleSimple(oracle).update();\\n            }\\n            \\n            amountOut = IOracleSimple(oracle).consult(_stakeToken, _stakingAmount);\\n        }\\n\\n        if (amountOut > 0) {\\n            totalStakingAmountInUSD = amountOut;\\n        } else { \\n            // This case fallback to pre setup price\\n            totalStakingAmountInUSD = getStakingAmountInUSD(_stakeToken, _stakingAmount);  // Get amount in case we don't have an active oracle\\n        }\\n\\n        return totalStakingAmountInUSD;\\n    }\\n\\n    function _convertUSDToRewardToken(uint256 _amountInUSD) internal returns(uint256) {\\n        address oracle = assetPrices[address(rewardToken)];\\n\\n        if (oracle != address(0)) {\\n            // Update oracle Pricing when time elapsed has passed\\n            if (block.timestamp - IOracleSimple(oracle).getBlockTimestampLast() >  IOracleSimple(oracle).PERIOD()) { \\n                IOracleSimple(oracle).update();\\n            }\\n\\n            address consultToken = IOracleSimple(oracle).token0();\\n\\n            if (consultToken == address(rewardToken)) {\\n                consultToken = IOracleSimple(oracle).token1();\\n            }\\n\\n            return IOracleSimple(oracle).consult(consultToken, _amountInUSD);\\n        }\\n\\n        // Get amount in case we don't have an active oracle\\n        return getStakingAmountByPegToken(address(rewardToken), _amountInUSD); \\n    }\\n\\n    function _convertUSDToExtraRewardToken(uint256 _amountInUSD) internal returns(uint256) {\\n        address oracle = assetPrices[address(extraRewardToken)];\\n\\n        if (oracle != address(0)) {\\n            // Update oracle Pricing when time elapsed has passed\\n            if (block.timestamp - IOracleSimple(oracle).getBlockTimestampLast() >  IOracleSimple(oracle).PERIOD()) { \\n                IOracleSimple(oracle).update();\\n            }\\n\\n            address consultToken = IOracleSimple(oracle).token0();\\n\\n            if (consultToken == address(extraRewardToken)) {\\n                consultToken = IOracleSimple(oracle).token1();\\n            }\\n\\n            return IOracleSimple(oracle).consult(consultToken, _amountInUSD);\\n        }\\n\\n        // Get amount in case we don't have an active oracle\\n        return getStakingAmountByPegToken(address(extraRewardToken), _amountInUSD); \\n    }\\n\\n    function getAmountDWByUSD(uint _amountInUSD) external override returns(uint) {\\n        return _convertUSDToRewardToken(_amountInUSD);\\n    }\\n\\n    function getAmountUSDByToken(address _stakeToken, uint256 _stakingAmount) external override returns(uint) {\\n        return _convertTokenToUSD(_stakeToken, _stakingAmount);\\n    }\\n\\n    function getAmountDWByUSDStatic(uint _amountInUSD) external returns(uint) {\\n        (bool success,bytes memory data) = address(this).call(abi.encodeWithSignature(\\\"getAmountDWByUSD(uint256)\\\", _amountInUSD));\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    function getAmountUSDByTokenStatic(address _stakeToken, uint256 _stakingAmount) external returns(uint) {\\n        (bool success,bytes memory data) = address(this).call(abi.encodeWithSignature(\\\"getAmountUSDByToken(address,uint256)\\\", _stakeToken, _stakingAmount));\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /**\\n     * @dev Get Staking token amount in offered currencies\\n     * @param _amount Amount of purchase token\\n     * @return Return amount of respective IDO token\\n     */\\n    function getStakingAmountInUSD(\\n        address _token,\\n        uint _amount\\n    ) public view returns (uint) {\\n        OfferedCurrency memory currency = offeredCurrencies[_token];\\n        return\\n            (_amount * (10 ** currency.decimal)) / currency.rate;\\n    }\\n\\n    function getStakingAmountByPegToken(\\n        address _token,\\n        uint _amount\\n    ) public view returns (uint) {\\n        OfferedCurrency memory currency = offeredCurrencies[_token];\\n        return\\n            (_amount * currency.rate) / (10 ** currency.decimal);\\n    }\\n\\n    function getMultipleContractInfos(uint256[] calldata _contractIds) external view returns(StakingInfo[] memory) {\\n        StakingInfo[] memory detailStakingInfos = new StakingInfo[](_contractIds.length);\\n\\n        for (uint i = 0; i < _contractIds.length; i++) {\\n            detailStakingInfos[i] = stakingContracts[_contractIds[i]];\\n        }\\n\\n        return detailStakingInfos;\\n    }\\n\\n     function getAllPendingRewards(uint256[] calldata _contractIds) external view returns(uint) {\\n        uint availableToClaim = 0;\\n\\n        for (uint i = 0; i < _contractIds.length; i++) {\\n            availableToClaim += pendingRewardInUSD(_contractIds[i]);\\n        }\\n\\n        return availableToClaim;\\n    }\\n\\n    function _forwardStakeToken(address stakeToken, address sender, uint256 amount) internal returns(uint256) {\\n        uint256 totalStakingbefore = IERC20WithBurn(stakeToken).balanceOf(address(this));\\n        // Locking principal deposit amount\\n        IERC20WithBurn(stakeToken).safeTransferFrom(sender, address(this), amount);\\n        // Get balance of contract after staking\\n        uint256 totalStakingAfter = IERC20WithBurn(stakeToken).balanceOf(address(this));\\n\\n        return totalStakingAfter - totalStakingbefore;\\n    }\\n\\n    function _joinByReferral(address _sender, address _referrer, uint _stakingAmount) internal returns (address) {\\n        bool noReferrerAtFirst = false;\\n\\n        if (_referrer == address(0) && referredBy[_sender] == address(0)) {\\n            referredBy[_sender] = root;\\n            totalReferralInvitations[root] += 1;\\n            noReferrerAtFirst = true;\\n        }\\n        \\n        // Validate Referrals\\n        if (_referrer != address(0)) {\\n            require(couldBecomeReferrer[_referrer], \\\"pool: this user has not joined the system yet!\\\");\\n            require(referredBy[_sender] == address(0) && _referrer != _sender, \\\"pool: user already joined by referral\\\");\\n            \\n            address referrerReferredBy = referredBy[_referrer];\\n\\n            if (referrerReferredBy != address(0) && referrerReferredBy == _sender) {\\n                revert(\\\"pool: failed because of circulating referral circle\\\");\\n            }\\n\\n            referredBy[_sender] = _referrer;\\n            totalReferralInvitations[_referrer] += 1;\\n        }\\n\\n        if (referredBy[_sender] != address(0)) {\\n            address referrerBy = referredBy[_sender];\\n\\n            uint256 rewardsInRewardTokens = _convertUSDToRewardToken(_stakingAmount);\\n            uint256 rewardsInUSD = _stakingAmount * directInterest / INTEREST_RATE_PRECISION_POINT;\\n            // Give direct intetest to the refferer\\n            uint256 directInterestForReffer = rewardsInRewardTokens * directInterest / INTEREST_RATE_PRECISION_POINT;\\n            rewardToken.transferFrom(treasury, referrerBy, directInterestForReffer);\\n            \\n            // Update direct bonus for investor's parent \\n            directBonus[referrerBy] += rewardsInUSD;\\n            emit ComissionDirectBonus(_sender, referrerBy, directInterestForReffer, rewardsInUSD);\\n        }\\n\\n        if (noReferrerAtFirst) {\\n            return root;\\n        }\\n\\n        return _referrer;\\n    }\\n\\n    function _createStakingContract(address _user, address _stakeToken, address _referrer, uint _stakingAmount, uint _amountOutInUSD) internal {\\n        uint contractId = totalStakingContracts;\\n\\n        StakingInfo storage stakingInfo = stakingContracts[contractId];\\n        stakingInfo.createdAt = uint64(block.timestamp);\\n        stakingInfo.lastClaimedTime = uint64(block.timestamp);\\n        stakingInfo.lastUpdatedTime = uint64(block.timestamp);\\n        stakingInfo.totalStakesInUSD = _amountOutInUSD;\\n        stakingInfo.totalExpectedInterest =  stakingInfo.totalStakesInUSD  * maximumEarningsInPercent / INTEREST_RATE_PRECISION_POINT;\\n        stakingInfo.claimDuration = claimDuration;\\n        stakingInfo.dueDate = stakingInfo.createdAt +  stakingInfo.claimDuration;\\n        stakingInfo.stakeToken = _stakeToken;\\n        stakingInfo.totalStakesInToken = _stakingAmount;\\n\\n        totalStaked += _stakingAmount;\\n        totalStakingContracts++;\\n\\n        stakingContractOwnedBy[contractId] = _user;\\n\\n        // This user could become the referrer \\n        if (!couldBecomeReferrer[_user]) {\\n            couldBecomeReferrer[_user] = true;\\n        }\\n\\n        emit ContractCreated(contractId, _user, _stakeToken, _referrer, _stakingAmount, _amountOutInUSD, stakingInfo.totalExpectedInterest - stakingInfo.totalStakesInUSD, stakingInfo.dueDate);\\n    }\\n\\n    function _rewardDDXToUser(uint _amountOutInUSD, address _user) internal {\\n        // Transfer extra DDX reward token to investor\\n        uint extraRewardTokenAmount = DDXStaking.getAmountDDXByUSD(_amountOutInUSD);\\n        if (extraRewardTokenAmount > 0 && DDXVault.rewardApplicable()) {\\n            DDXVault.rewardFromDWStaking(_user, extraRewardTokenAmount);\\n        }\\n    }\\n\\n    /// -----------------------------------\\n    /// --------- Pause Function ----------\\n    /// -----------------------------------\\n\\n    function pause() external onlyRole(SUB_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyRole(SUB_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n    \\n}\",\"keccak256\":\"0x789c1fa20885ccacb1f8e2cafccda5a436159bea1a6ec8ead06611e881c15b33\",\"license\":\"MIT\"},\"contracts/interfaces/IDChainStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IDChainStaking {\\n    function getAmountUSDByToken(address _stakeToken, uint256 _stakingAmount) external returns(uint);\\n    function getAmountDWByUSD(uint _amountInUSD) external returns(uint);\\n    function depositByVault(uint256 _originAmount, uint _lockedAmount, address _user, address referrer) external;\\n    function rewardToken() external view returns(IERC20WithBurn);\\n}\\n\",\"keccak256\":\"0xf615b7fe37cbb727e1e94cd52e36dec5a5745b137a0c9cf99bb466ef8e1f1c0d\",\"license\":\"MIT\"},\"contracts/interfaces/IDDXStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDDXStaking {\\n    function depositByVault(uint256 _pid, uint256 _originAmount, uint _lockedAmount, address _user) external;\\n    function getAmountDDXByUSD(uint256 _amountInUSD) external returns(uint);\\n    function restakeWithVault(uint _pid, uint _originAmount, uint _lockedAmount, address _user) external;\\n}\\n\",\"keccak256\":\"0xf881a7b84952968edbbadaf68fbcc7f6d9500b605286d6cb7a784b5280e8fdae\",\"license\":\"MIT\"},\"contracts/interfaces/IDDXVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDDXVault {\\n    function rewardFromDWStaking(address _beneficiary, uint256 _amount) external;\\n    function rewardApplicable() external view returns(bool);\\n    function startVestingTime() external view returns(uint256);\\n}\\n\",\"keccak256\":\"0xa142c9c69e4cdc0b84e8d96c45fa2a6d989391d72fbb5ba515dc7546278c24f5\",\"license\":\"MIT\"},\"contracts/interfaces/IDWVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDWVault {\\n}\\n\",\"keccak256\":\"0xf2aa91ce36a98ff9ebe6c4a2912404caa65eb1288688d072a9b47db530bd94b1\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"import {IERC20 as IOpenZeppelinERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20WithBurn is IOpenZeppelinERC20 {\\n    function burn(uint256 amount) external;\\n}\",\"keccak256\":\"0x5820196f1cfb894bfeccc0ad19b00bb9ebb2d89c0a16328be0243eb4b1488fd6\"},\"contracts/interfaces/IOracleSimple.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IOracleSimple {\\n\\n    function getBlockTimestampLast() external view returns (uint32);\\n\\n    function consult(address token, uint amountIn) external view returns (uint amountOut);\\n\\n    function update() external;\\n\\n    function token0() external view returns(address);\\n    \\n    function token1() external view returns(address);\\n\\n    function PERIOD() external view returns(uint);\\n}\",\"keccak256\":\"0x83d3aae351566b99d3704510df8ee786782bfca4e02c20218c8f878720d2ac96\",\"license\":\"UNLICENSED\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\",\"keccak256\":\"0x6c5e818daa61fc1b440ac7a1162f85eed19af7c17b06b90292b038e5b63cbe2c\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061460d806100206000396000f3fe608060405234801561001057600080fd5b506004361061037b5760003560e01c8063803efb61116101d5578063d547741f11610105578063ebf0c717116100a8578063ebf0c71714610966578063ed2ffc091461097a578063f2e034821461098d578063f464f38f146109a0578063f7c618c1146109c4578063f851a440146109d8578063fb4aa0a1146109ec578063fbd695bf14610a00578063fbfa77cf14610a1357600080fd5b8063d547741f146108a2578063dc2903c6146108b5578063e1988ca3146108df578063e37242f9146108f2578063e508d56114610905578063e58378bb14610929578063e63ab1e91461093e578063e7ad37011461095357600080fd5b8063a00229fe11610178578063a00229fe146107e6578063a217fddf146107f9578063a90f8e9a14610801578063ab1a4d941461082b578063ae169a5014610857578063b1e6cb821461086a578063b6db75a014610874578063bfc90a5e1461087c578063ce3637ef1461088f57600080fd5b8063803efb611461075b578063817b1cd2146107655780638456cb591461076f5780638e1303d7146107775780638fb33c3b1461078a578063901bb5af146107ab57806391d14854146107bf578063991932bb146107d257600080fd5b806341c90bae116102b057806362d6306f1161025357806362d6306f146106af578063657efde6146106c2578063688cd845146106d5578063729d0a8a146106e85780637801d3a8146106fb578063784579261461070f57806378ecb4ee1461071957806379ebe118146107275780637d12cfc11461074857600080fd5b806341c90bae146105d057806344d25cb2146105e357806352643281146105f65780635a3a85cb146106095780635c975abb146106465780635e9a523c1461065157806361d027b31461068857806362adfe7a1461069c57600080fd5b8063248a9ca311610323578063248a9ca3146105185780632a9c05601461053b5780632e2d2984146105455780632f10a9be146105585780632f2ff15d1461056b57806336568abe1461057e5780633c34ab30146105915780633e29a736146105b55780633f4ba83a146105c857600080fd5b80623ba1ed1461038057806301ffc9a714610395578063022f2354146103bd5780630c75a1d7146103e05780631109b19a146104005780631356df35146104df5780631459457a146104f2578063188601f714610505575b600080fd5b61039361038e366004613bd9565b610a27565b005b6103a86103a3366004613f09565b610a77565b60405190151581526020015b60405180910390f35b6103d26000805160206145b883398151915281565b6040519081526020016103b4565b6103f36103ee366004613db8565b610aae565b6040516103b491906140fa565b61047e61040e366004613ecd565b6101e0602052600090815260409020805460018201546002830154600384015460048501546005909501549394929391926001600160401b0380831693600160401b808504831694600160801b8104841694600160c01b9091048416938116929190046001600160a01b0316908a565b604080519a8b5260208b0199909952978901969096526001600160401b039485166060890152928416608088015290831660a0870152821660c08601521660e08401526001600160a01b0316610100830152610120820152610140016103b4565b6103936104ed366004613ecd565b610c7b565b610393610500366004613c49565b610d10565b6103d2610513366004613cb9565b611004565b6103d2610526366004613ecd565b60009081526065602052604090206001015490565b6103d26101cd5481565b610393610553366004613f49565b6110bf565b6103d2610566366004613ecd565b6112d4565b610393610579366004613ee5565b611438565b61039361058c366004613ee5565b61145d565b6103a861059f366004613bd9565b6101dc6020526000908152604090205460ff1681565b6103936105c3366004613ecd565b6114db565b6103936114fa565b6103d26105de366004613cb9565b61151d565b6103d26105f1366004613ecd565b611530565b610393610604366004613d18565b611548565b610631610617366004613bd9565b6101da602052600090815260409020805460019091015482565b604080519283526020830191909152016103b4565b60975460ff166103a8565b61067b61065f366004613bd9565b6101dd602052600090815260409020546001600160a01b031681565b6040516103b491906140a9565b6101c85461067b906001600160a01b031681565b6103936106aa366004613c11565b6116f3565b6103936106bd366004613bd9565b61173b565b6103936106d0366004613ce4565b611864565b6103d26106e3366004613ecd565b6118a2565b6103936106f6366004613e27565b6118ad565b6101c75461067b906001600160a01b031681565b6103d26101cc5481565b6101d9546103a89060ff1681565b6103d2610735366004613bd9565b6101db6020526000908152604090205481565b6103d2610756366004613db8565b6118f9565b6103d26101cf5481565b6103d26101cb5481565b610393611953565b610393610785366004613f8a565b611973565b6103d2610798366004613bd9565b6101de6020526000908152604090205481565b6101c55461067b906001600160a01b031681565b6103a86107cd366004613ee5565b611af7565b6101c45461067b906001600160a01b031681565b6103d26107f4366004613ecd565b611b22565b6103d2600081565b61067b61080f366004613bd9565b6101df602052600090815260409020546001600160a01b031681565b6101ce5461083f906001600160401b031681565b6040516001600160401b0390911681526020016103b4565b610393610865366004613ecd565b611bdc565b6103d26101ca5481565b6103a8611c00565b61039361088a366004613bd9565b611c1f565b61039361089d366004613bd9565b611cbb565b6103936108b0366004613ee5565b611d5b565b61067b6108c3366004613ecd565b6101e1602052600090815260409020546001600160a01b031681565b6103d26108ed366004613cb9565b611d80565b610393610900366004613bd9565b611dd7565b6103a8610913366004613bd9565b6101e56020526000908152604090205460ff1681565b6103d260008051602061457883398151915281565b6103d260008051602061459883398151915281565b610393610961366004613bd9565b611e1e565b6101e45461067b906001600160a01b031681565b610393610988366004613ff7565b611ec1565b6103d261099b366004613cb9565b611efe565b6103a86109ae366004613bd9565b6101e26020526000908152604090205460ff1681565b6101c35461067b906001600160a01b031681565b6101c95461067b906001600160a01b031681565b6101e35461067b906001600160a01b031681565b610393610a0e366004613bd9565b611f4f565b6101c65461067b906001600160a01b031681565b610a2f611c00565b610a545760405162461bcd60e51b8152600401610a4b9061428e565b60405180910390fd5b6101e480546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b1480610aa857506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000826001600160401b03811115610ad857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b5757816020015b604080516101408101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201528252600019909201910181610af65790505b50905060005b83811015610c73576101e06000868684818110610b8a57634e487b7160e01b600052603260045260246000fd5b602090810292909201358352508181019290925260409081016000208151610140810183528154815260018201549381019390935260028101549183019190915260038101546001600160401b038082166060850152600160401b80830482166080860152600160801b8304821660a0860152600160c01b909204811660c0850152600483015490811660e0850152046001600160a01b0316610100830152600501546101208201528251839083908110610c5557634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610c6b9061451b565b915050610b5d565b509392505050565b6000805160206145b8833981519152610c9381611ff0565b670de0b6b3a7640000821115610d095760405162461bcd60e51b815260206004820152603560248201527f706f6f6c3a2044697265637420496e746572657374207261746520636f756c64604482015274206e6f7420686967686572207468616e203130302560581b6064820152608401610a4b565b506101cf55565b600054610100900460ff1615808015610d305750600054600160ff909116105b80610d4a5750303b158015610d4a575060005460ff166001145b610dad5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a4b565b6000805460ff191660011790558015610dd0576000805461ff0019166101001790555b610dd98661173b565b6001600160a01b038516610dff5760405162461bcd60e51b8152600401610a4b906141f0565b6001600160a01b038316610e255760405162461bcd60e51b8152600401610a4b906141f0565b6101e380546001600160a01b038087166001600160a01b0319928316179092556101c880548884169083161790556101c380548684169083161790556101c48054928516928216929092179091556101c980549091163317905560408051610120810182526105dc81526103e860208201526101f4918101829052606081018290526080810191909152600060a0820181905260c0820181905260e08201819052610100820152610edb906101d0906009613b80565b506101ce805467ffffffffffffffff1916630317040017905566b1a2bc2ec500006101cf556305f5e1006101cc55671bc16d674ec800006101cd55610f2e6000805160206145b883398151915287611ffa565b6101c35460405163095ea7b360e01b81526001600160a01b039091169063095ea7b390610f63903090600019906004016140e1565b602060405180830381600087803b158015610f7d57600080fd5b505af1158015610f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb59190613ead565b508015610ffc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6000806000306001600160a01b031685856040516024016110269291906140e1565b60408051601f198184030181529181526020820180516001600160e01b03166320e485d760e11b1790525161105b919061401e565b6000604051808303816000865af19150503d8060008114611098576040519150601f19603f3d011682016040523d82523d6000602084013e61109d565b606091505b5091509150808060200190518101906110b69190613f31565b95945050505050565b6110c7612004565b6110cf61204c565b33836110ed5760405162461bcd60e51b8152600401610a4b9061420c565b6001600160a01b0381166111575760405162461bcd60e51b815260206004820152602b60248201527f706f6f6c3a207374616b6520616464726573732063616e206e6f74206265207a60448201526a65726f206164647265737360a81b6064820152608401610a4b565b60006111648483876120a6565b9050600061117285836121c7565b6101c3549091506001600160a01b03868116911614611208576001600160a01b03851660009081526101dc60209081526040918290208251918201909252905460ff1615158082526112065760405162461bcd60e51b815260206004820181905260248201527f706f6f6c3a207374616b6520746f6b656e206973206e6f7420616c6c6f7765646044820152606401610a4b565b505b6101c3546001600160a01b0386811691161415611283576101c354604051630852cd8d60e31b8152600481018490526001600160a01b03909116906342966c6890602401600060405180830381600087803b15801561126657600080fd5b505af115801561127a573d6000803e3d6000fd5b5050505061129e565b6101e35461129e906001600160a01b03878116911688612440565b6112a9838583612496565b93506112b88386868585612922565b6112c28184612b71565b5050506112cf600160c955565b505050565b60008181526101e0602090815260408083208151610140810183528154815260018201549381019390935260028101549183019190915260038101546001600160401b038082166060850152600160401b80830482166080860152600160801b8304821660a08601819052600160c01b909304821660c0860152600484015480831660e0870152046001600160a01b0316610100850152600590920154610120840152429182161161138a575060009392505050565b81608001516001600160401b0316816001600160401b031611156113af575060808101515b60008260a00151826113c191906144b0565b90506000670de0b6b3a76400006001600160401b031684606001516001600160401b0316670de0b6b3a76400006001600160401b0316846001600160401b03168760000151611410919061447a565b61141a919061447a565b611424919061436f565b61142e919061436f565b9695505050505050565b60008281526065602052604090206001015461145381611ff0565b6112cf8383612cfb565b6001600160a01b03811633146114cd5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a4b565b6114d78282612d81565b5050565b6000805160206145b88339815191526114f381611ff0565b506101cc55565b6000805160206145b883398151915261151281611ff0565b61151a612de8565b50565b60006115298383612e34565b9392505050565b6101d0816009811061154157600080fd5b0154905081565b6000805160206145b883398151915261156081611ff0565b60005b82518110156112cf576101e5600084838151811061159157634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166116e15760016101e560008584815181106115e357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555061168f6101c360009054906101000a90046001600160a01b03166101db600086858151811061166157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054612e34565b6101db60008584815181106116b457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055505b806116eb8161451b565b915050611563565b6000805160206145b883398151915261170b81611ff0565b506001600160a01b0391821660009081526101dd6020526040902080546001600160a01b03191691909216179055565b600054610100900460ff166117625760405162461bcd60e51b8152600401610a4b90614243565b6001600160a01b0381166117b85760405162461bcd60e51b815260206004820181905260248201527f4f776e65722063616e6e6f7420626520746865207a65726f20616464726573736044820152606401610a4b565b6117c061304d565b6117c8613074565b6117d06130a3565b6117e860008051602061457883398151915282611ffa565b61180060008051602061459883398151915282611ffa565b6118266000805160206145b88339815191526000805160206145788339815191526130d2565b61184c6000805160206145988339815191526000805160206145788339815191526130d2565b61151a600080516020614578833981519152806130d2565b6000805160206145b883398151915261187c81611ff0565b506001600160a01b0390921660009081526101da60205260409020600181019190915555565b6000610aa88261311d565b6118b5612004565b60005b81518110156114d7576118f18282815181106118e457634e487b7160e01b600052603260045260246000fd5b6020026020010151611bdc565b6001016118b8565b600080805b83811015610c735761193585858381811061192957634e487b7160e01b600052603260045260246000fd5b905060200201356112d4565b61193f908361432c565b91508061194b8161451b565b9150506118fe565b6000805160206145b883398151915261196b81611ff0565b61151a613427565b61197b612004565b61198361204c565b6101c6546001600160a01b0316336001600160a01b0316146119e25760405162461bcd60e51b81526020600482015260186024820152771c1bdbdb0e88139bdd081cdd185ad948189e481d985d5b1d60421b6044820152606401610a4b565b60006119ee848661432c565b905060008111611a105760405162461bcd60e51b8152600401610a4b9061420c565b6101c3546101c654611a2f916001600160a01b039081169116876120a6565b506101c354600090611a4a906001600160a01b0316836121c7565b90508515611ab2576101c354604051630852cd8d60e31b8152600481018890526001600160a01b03909116906342966c6890602401600060405180830381600087803b158015611a9957600080fd5b505af1158015611aad573d6000803e3d6000fd5b505050505b611abd848483612496565b6101c354909350611adb9085906001600160a01b0316858585612922565b611ae58185612b71565b5050611af1600160c955565b50505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000806000306001600160a01b031684604051602401611b4491815260200190565b60408051601f198184030181529181526020820180516001600160e01b031663688cd84560e01b17905251611b79919061401e565b6000604051808303816000865af19150503d8060008114611bb6576040519150601f19603f3d011682016040523d82523d6000602084013e611bbb565b606091505b509150915080806020019051810190611bd49190613f31565b949350505050565b611be461204c565b611bec612004565b611bf63382613464565b61151a600160c955565b6000611c1a60008051602061457883398151915233611af7565b905090565b6000805160206145b8833981519152611c3781611ff0565b6001600160a01b03821660009081526101dc60205260409020805460ff1615611cac5760405162461bcd60e51b815260206004820152602160248201527f416c6c6f77656420746f6b656e20697320616c726561647920657869737465646044820152602160f81b6064820152608401610a4b565b805460ff191660011790555050565b6000805160206145b8833981519152611cd381611ff0565b6001600160a01b038216611d375760405162461bcd60e51b815260206004820152602560248201527f706f6f6c3a204457207661756c742063616e6e6f74206265207a65726f206164604482015264647265737360d81b6064820152608401610a4b565b506101c680546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260656020526040902060010154611d7681611ff0565b6112cf8383612d81565b6001600160a01b03821660009081526101da6020908152604080832081518083019092528054808352600190910154928201839052909190611dc390600a6143d2565b611dcd908561447a565b611bd4919061436f565b611ddf611c00565b611dfb5760405162461bcd60e51b8152600401610a4b9061428e565b6101e380546001600160a01b0319166001600160a01b0392909216919091179055565b6000805160206145b8833981519152611e3681611ff0565b6001600160a01b038216611e9d5760405162461bcd60e51b815260206004820152602860248201527f706f6f6c3a20444458205374616b696e672063616e6e6f74206265207a65726f604482015267206164647265737360c01b6064820152608401610a4b565b506101c780546001600160a01b0319166001600160a01b0392909216919091179055565b6000805160206145b8833981519152611ed981611ff0565b506101ce805467ffffffffffffffff19166001600160401b0392909216919091179055565b6001600160a01b03821660009081526101da60209081526040808320815180830190925280548083526001909101549282019290925290611f4090600a6143d2565b6020820151611dcd908561447a565b6000805160206145b8833981519152611f6781611ff0565b6001600160a01b038216611fcc5760405162461bcd60e51b815260206004820152602660248201527f706f6f6c3a20444458207661756c742063616e6e6f74206265207a65726f206160448201526564647265737360d01b6064820152608401610a4b565b506101c580546001600160a01b0319166001600160a01b0392909216919091179055565b61151a813361368a565b6114d78282612cfb565b60975460ff161561204a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a4b565b565b600260c954141561209f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a4b565b600260c955565b600080846001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016120d591906140a9565b60206040518083038186803b1580156120ed57600080fd5b505afa158015612101573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121259190613f31565b905061213c6001600160a01b0386168530866136e3565b6040516370a0823160e01b81526000906001600160a01b038716906370a082319061216b9030906004016140a9565b60206040518083038186803b15801561218357600080fd5b505afa158015612197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bb9190613f31565b905061142e8282614499565b6001600160a01b0380831660009081526101dd60205260408120549091168181156123b957816001600160a01b031663b4d1d7956040518163ffffffff1660e01b815260040160206040518083038186803b15801561222557600080fd5b505afa158015612239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225d9190613f31565b826001600160a01b031663e56522a96040518163ffffffff1660e01b815260040160206040518083038186803b15801561229657600080fd5b505afa1580156122aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ce9190613fd3565b6122de9063ffffffff1642614499565b111561233857816001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561231f57600080fd5b505af1158015612333573d6000803e3d6000fd5b505050505b604051633ddac95360e01b81526001600160a01b03831690633ddac9539061236690889088906004016140e1565b60206040518083038186803b15801561237e57600080fd5b505afa158015612392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b69190613f31565b90505b80156123c7578092506123d4565b6123d18585611d80565b92505b6101cc548310156124385760405162461bcd60e51b815260206004820152602860248201527f706f6f6c3a206d696e696d756d207374616b696e6720616d6f756e74206e6f74604482015267081c995858da195960c21b6064820152608401610a4b565b505092915050565b6112cf8363a9059cbb60e01b848460405160240161245f9291906140e1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613704565b6000806001600160a01b0384161580156124c957506001600160a01b0385811660009081526101df602052604090205416155b15612530576101e480546001600160a01b0387811660009081526101df6020908152604080832080546001600160a01b03191695851695909517909455935490911681526101de909252812080546001929061252690849061432c565b9091555060019150505b6001600160a01b0384161561274d576001600160a01b03841660009081526101e2602052604090205460ff166125bf5760405162461bcd60e51b815260206004820152602e60248201527f706f6f6c3a2074686973207573657220686173206e6f74206a6f696e6564207460448201526d68652073797374656d207965742160901b6064820152608401610a4b565b6001600160a01b0385811660009081526101df6020526040902054161580156125fa5750846001600160a01b0316846001600160a01b031614155b6126545760405162461bcd60e51b815260206004820152602560248201527f706f6f6c3a207573657220616c7265616479206a6f696e656420627920726566604482015264195c9c985b60da1b6064820152608401610a4b565b6001600160a01b0380851660009081526101df60205260409020541680158015906126905750856001600160a01b0316816001600160a01b0316145b156126f95760405162461bcd60e51b815260206004820152603360248201527f706f6f6c3a206661696c65642062656361757365206f662063697263756c6174604482015272696e6720726566657272616c20636972636c6560681b6064820152608401610a4b565b6001600160a01b0386811660009081526101df6020908152604080832080546001600160a01b031916948a1694851790559282526101de905290812080546001929061274690849061432c565b9091555050505b6001600160a01b0385811660009081526101df602052604090205416156128ff576001600160a01b0380861660009081526101df6020526040812054909116906127968561311d565b90506000670de0b6b3a76400006001600160401b03166101cf54876127bb919061447a565b6127c5919061436f565b90506000670de0b6b3a76400006001600160401b03166101cf54846127ea919061447a565b6127f4919061436f565b6101c3546101c8546040516323b872dd60e01b81529293506001600160a01b03918216926323b872dd92612830921690889086906004016140bd565b602060405180830381600087803b15801561284a57600080fd5b505af115801561285e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128829190613ead565b506001600160a01b03841660009081526101db6020526040812080548492906128ac90849061432c565b909155505060408051828152602081018490526001600160a01b0380871692908c16917f1db3eb8593e2df25f384c5d65274f44eb883bdefc3323aa2197ed202ce0eb8ee910160405180910390a3505050505b80156129195750506101e4546001600160a01b0316611529565b50919392505050565b6101ca5460008181526101e06020526040902060048101805467ffffffffffffffff1916426001600160401b03169081179091556003820180546001600160801b0316600160801b83026001600160c01b031617600160c01b909202919091179055600181018390556101cd54670de0b6b3a7640000906129a3908561447a565b6129ad919061436f565b81556101ce5460038201805467ffffffffffffffff19166001600160401b0392831690811790915560048301546129e49216614344565b8160030160086101000a8154816001600160401b0302191690836001600160401b03160217905550858160040160086101000a8154816001600160a01b0302191690836001600160a01b03160217905550838160050181905550836101cb6000828254612a51919061432c565b90915550506101ca8054906000612a678361451b565b909155505060008281526101e16020908152604080832080546001600160a01b0319166001600160a01b038c1690811790915583526101e290915290205460ff16612ad1576001600160a01b03871660009081526101e260205260409020805460ff191660011790555b856001600160a01b0316876001600160a01b0316837ffeddeab5331bfcd2c5ba6992d9bb9c2233dee3f0785ec31e081eb46857693a0188888887600101548860000154612b1e9190614499565b6003890154604080516001600160a01b0390961686526020860194909452928401919091526060830152600160401b90046001600160401b0316608082015260a00160405180910390a450505050505050565b6101c7546040516311026af760e11b8152600481018490526000916001600160a01b031690632204d5ee90602401602060405180830381600087803b158015612bb957600080fd5b505af1158015612bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf19190613f31565b9050600081118015612c8557506101c560009054906101000a90046001600160a01b03166001600160a01b0316638832e6726040518163ffffffff1660e01b815260040160206040518083038186803b158015612c4d57600080fd5b505afa158015612c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c859190613ead565b156112cf576101c554604051637b408a6b60e01b81526001600160a01b0390911690637b408a6b90612cbd90859085906004016140e1565b600060405180830381600087803b158015612cd757600080fd5b505af1158015612ceb573d6000803e3d6000fd5b50505050505050565b600160c955565b612d058282611af7565b6114d75760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612d3d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612d8b8282611af7565b156114d75760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b612df06137d6565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051612e2a91906140a9565b60405180910390a1565b6001600160a01b0380831660009081526101dd6020526040812054909182911681811561302857816001600160a01b031663b4d1d7956040518163ffffffff1660e01b815260040160206040518083038186803b158015612e9457600080fd5b505afa158015612ea8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecc9190613f31565b826001600160a01b031663e56522a96040518163ffffffff1660e01b815260040160206040518083038186803b158015612f0557600080fd5b505afa158015612f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3d9190613fd3565b612f4d9063ffffffff1642614499565b1115612fa757816001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612f8e57600080fd5b505af1158015612fa2573d6000803e3d6000fd5b505050505b604051633ddac95360e01b81526001600160a01b03831690633ddac95390612fd590899089906004016140e1565b60206040518083038186803b158015612fed57600080fd5b505afa158015613001573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130259190613f31565b90505b801561303657809250613043565b6130408686611d80565b92505b5090949350505050565b600054610100900460ff1661204a5760405162461bcd60e51b8152600401610a4b90614243565b600054610100900460ff1661309b5760405162461bcd60e51b8152600401610a4b90614243565b61204a61381f565b600054610100900460ff166130ca5760405162461bcd60e51b8152600401610a4b90614243565b61204a613852565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6101c3546001600160a01b0390811660009081526101dd6020526040812054909116801561341057806001600160a01b031663b4d1d7956040518163ffffffff1660e01b815260040160206040518083038186803b15801561317e57600080fd5b505afa158015613192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b69190613f31565b816001600160a01b031663e56522a96040518163ffffffff1660e01b815260040160206040518083038186803b1580156131ef57600080fd5b505afa158015613203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132279190613fd3565b6132379063ffffffff1642614499565b111561329157806001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561327857600080fd5b505af115801561328c573d6000803e3d6000fd5b505050505b6000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156132cc57600080fd5b505afa1580156132e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133049190613bf5565b6101c3549091506001600160a01b038083169116141561339257816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561335757600080fd5b505afa15801561336b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338f9190613bf5565b90505b604051633ddac95360e01b81526001600160a01b03831690633ddac953906133c090849088906004016140e1565b60206040518083038186803b1580156133d857600080fd5b505afa1580156133ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd49190613f31565b6101c354611529906001600160a01b031684611efe565b61342f612004565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612e1d3390565b60008181526101e160205260409020546001600160a01b038381169116146134e25760405162461bcd60e51b815260206004820152602b60248201527f706f6f6c3a20636f6e7472616374206964206e6f742062656c6f6e677320746f60448201526a103a3434b99037bbb732b960a91b6064820152608401610a4b565b60008181526101e060205260408120906134fb836112d4565b905060006135088261311d565b9050801561361b576101c3546101c8546040516323b872dd60e01b81526001600160a01b03928316926323b872dd9261354a92911690899086906004016140bd565b602060405180830381600087803b15801561356457600080fd5b505af1158015613578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359c9190613ead565b50600383015442906001600160401b03600160401b909104811690821611156135d657506003830154600160401b90046001600160401b03165b60038401805467ffffffffffffffff60801b1916600160801b6001600160401b0384160217905560028401805484919060009061361490849061432c565b9091555050505b6003830180546001600160c01b0316600160c01b426001600160401b03160217905560408051828152602081018490526001600160a01b0387169186917f6fa2252892a07f93963cd54ee15abe8b0ac4070c43d93f0fbbfb30604ffb8d06910160405180910390a35050505050565b6136948282611af7565b6114d7576136a181613879565b6136ac83602061388b565b6040516020016136bd92919061403a565b60408051601f198184030181529082905262461bcd60e51b8252610a4b916004016141bd565b611af1846323b872dd60e01b85858560405160240161245f939291906140bd565b6000613759826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613a6c9092919063ffffffff16565b8051909150156112cf57808060200190518101906137779190613ead565b6112cf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a4b565b60975460ff1661204a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610a4b565b600054610100900460ff166138465760405162461bcd60e51b8152600401610a4b90614243565b6097805460ff19169055565b600054610100900460ff16612cf45760405162461bcd60e51b8152600401610a4b90614243565b6060610aa86001600160a01b03831660145b6060600061389a83600261447a565b6138a590600261432c565b6001600160401b038111156138ca57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156138f4576020820181803683370190505b509050600360fc1b8160008151811061391d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061395a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061397e84600261447a565b61398990600161432c565b90505b6001811115613a1d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106139cb57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106139ef57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93613a1681614504565b905061398c565b5083156115295760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a4b565b6060611bd48484600085856001600160a01b0385163b613ace5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a4b565b600080866001600160a01b03168587604051613aea919061401e565b60006040518083038185875af1925050503d8060008114613b27576040519150601f19603f3d011682016040523d82523d6000602084013e613b2c565b606091505b5091509150613b3c828286613b47565b979650505050505050565b60608315613b56575081611529565b825115613b665782518084602001fd5b8160405162461bcd60e51b8152600401610a4b91906141bd565b8260098101928215613bb4579160200282015b82811115613bb4578251829061ffff16905591602001919060010190613b93565b50613bc0929150613bc4565b5090565b5b80821115613bc05760008155600101613bc5565b600060208284031215613bea578081fd5b813561152981614562565b600060208284031215613c06578081fd5b815161152981614562565b60008060408385031215613c23578081fd5b8235613c2e81614562565b91506020830135613c3e81614562565b809150509250929050565b600080600080600060a08688031215613c60578081fd5b8535613c6b81614562565b94506020860135613c7b81614562565b93506040860135613c8b81614562565b92506060860135613c9b81614562565b91506080860135613cab81614562565b809150509295509295909350565b60008060408385031215613ccb578182fd5b8235613cd681614562565b946020939093013593505050565b600080600060608486031215613cf8578283fd5b8335613d0381614562565b95602085013595506040909401359392505050565b60006020808385031215613d2a578182fd5b82356001600160401b03811115613d3f578283fd5b8301601f81018513613d4f578283fd5b8035613d62613d5d82614309565b6142d9565b80828252848201915084840188868560051b8701011115613d81578687fd5b8694505b83851015613dac578035613d9881614562565b835260019490940193918501918501613d85565b50979650505050505050565b60008060208385031215613dca578182fd5b82356001600160401b0380821115613de0578384fd5b818501915085601f830112613df3578384fd5b813581811115613e01578485fd5b8660208260051b8501011115613e15578485fd5b60209290920196919550909350505050565b60006020808385031215613e39578182fd5b82356001600160401b03811115613e4e578283fd5b8301601f81018513613e5e578283fd5b8035613e6c613d5d82614309565b80828252848201915084840188868560051b8701011115613e8b578687fd5b8694505b83851015613dac578035835260019490940193918501918501613e8f565b600060208284031215613ebe578081fd5b81518015158114611529578182fd5b600060208284031215613ede578081fd5b5035919050565b60008060408385031215613ef7578182fd5b823591506020830135613c3e81614562565b600060208284031215613f1a578081fd5b81356001600160e01b031981168114611529578182fd5b600060208284031215613f42578081fd5b5051919050565b600080600060608486031215613f5d578081fd5b833592506020840135613f6f81614562565b91506040840135613f7f81614562565b809150509250925092565b60008060008060808587031215613f9f578182fd5b84359350602085013592506040850135613fb881614562565b91506060850135613fc881614562565b939692955090935050565b600060208284031215613fe4578081fd5b815163ffffffff81168114611529578182fd5b600060208284031215614008578081fd5b81356001600160401b0381168114611529578182fd5b600082516140308184602087016144d8565b9190910192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526000835161406c8160178501602088016144d8565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161409d8160288401602088016144d8565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b602080825282518282018190526000919060409081850190868401855b828110156141b057815180518552868101518786015285810151868601526060808201516001600160401b039081169187019190915260808083015182169087015260a08083015182169087015260c08083015182169087015260e08083015190911690860152610100808201516001600160a01b03169086015261012090810151908501526101409093019290850190600101614117565b5091979650505050505050565b60208152600082518060208401526141dc8160408501602087016144d8565b601f01601f19169190910160400192915050565b6020808252600290820152615a4160f01b604082015260600190565b6020808252601b908201527f706f6f6c3a20616d6f756e742063616e6e6f74206265207a65726f0000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b604051601f8201601f191681016001600160401b03811182821017156143015761430161454c565b604052919050565b60006001600160401b038211156143225761432261454c565b5060051b60200190565b6000821982111561433f5761433f614536565b500190565b60006001600160401b0380831681851680830382111561436657614366614536565b01949350505050565b60008261438a57634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156143ca5781600019048211156143b0576143b0614536565b808516156143bd57918102915b93841c9390800290614394565b509250929050565b600061152983836000826143e857506001610aa8565b816143f557506000610aa8565b816001811461440b576002811461441557614431565b6001915050610aa8565b60ff84111561442657614426614536565b50506001821b610aa8565b5060208310610133831016604e8410600b8410161715614454575081810a610aa8565b61445e838361438f565b806000190482111561447257614472614536565b029392505050565b600081600019048311821515161561449457614494614536565b500290565b6000828210156144ab576144ab614536565b500390565b60006001600160401b03838116908316818110156144d0576144d0614536565b039392505050565b60005b838110156144f35781810151838201526020016144db565b83811115611af15750506000910152565b60008161451357614513614536565b506000190190565b600060001982141561452f5761452f614536565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461151a57600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862ad2e4c2619ea6e0faebc405d89445161c041e30fe03373ea0473da142d57d4514a26469706673582212207d52f4e7214c161c87bee0afce6f18930f67407bb7cb39fa352ffab4ba828e1164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061037b5760003560e01c8063803efb61116101d5578063d547741f11610105578063ebf0c717116100a8578063ebf0c71714610966578063ed2ffc091461097a578063f2e034821461098d578063f464f38f146109a0578063f7c618c1146109c4578063f851a440146109d8578063fb4aa0a1146109ec578063fbd695bf14610a00578063fbfa77cf14610a1357600080fd5b8063d547741f146108a2578063dc2903c6146108b5578063e1988ca3146108df578063e37242f9146108f2578063e508d56114610905578063e58378bb14610929578063e63ab1e91461093e578063e7ad37011461095357600080fd5b8063a00229fe11610178578063a00229fe146107e6578063a217fddf146107f9578063a90f8e9a14610801578063ab1a4d941461082b578063ae169a5014610857578063b1e6cb821461086a578063b6db75a014610874578063bfc90a5e1461087c578063ce3637ef1461088f57600080fd5b8063803efb611461075b578063817b1cd2146107655780638456cb591461076f5780638e1303d7146107775780638fb33c3b1461078a578063901bb5af146107ab57806391d14854146107bf578063991932bb146107d257600080fd5b806341c90bae116102b057806362d6306f1161025357806362d6306f146106af578063657efde6146106c2578063688cd845146106d5578063729d0a8a146106e85780637801d3a8146106fb578063784579261461070f57806378ecb4ee1461071957806379ebe118146107275780637d12cfc11461074857600080fd5b806341c90bae146105d057806344d25cb2146105e357806352643281146105f65780635a3a85cb146106095780635c975abb146106465780635e9a523c1461065157806361d027b31461068857806362adfe7a1461069c57600080fd5b8063248a9ca311610323578063248a9ca3146105185780632a9c05601461053b5780632e2d2984146105455780632f10a9be146105585780632f2ff15d1461056b57806336568abe1461057e5780633c34ab30146105915780633e29a736146105b55780633f4ba83a146105c857600080fd5b80623ba1ed1461038057806301ffc9a714610395578063022f2354146103bd5780630c75a1d7146103e05780631109b19a146104005780631356df35146104df5780631459457a146104f2578063188601f714610505575b600080fd5b61039361038e366004613bd9565b610a27565b005b6103a86103a3366004613f09565b610a77565b60405190151581526020015b60405180910390f35b6103d26000805160206145b883398151915281565b6040519081526020016103b4565b6103f36103ee366004613db8565b610aae565b6040516103b491906140fa565b61047e61040e366004613ecd565b6101e0602052600090815260409020805460018201546002830154600384015460048501546005909501549394929391926001600160401b0380831693600160401b808504831694600160801b8104841694600160c01b9091048416938116929190046001600160a01b0316908a565b604080519a8b5260208b0199909952978901969096526001600160401b039485166060890152928416608088015290831660a0870152821660c08601521660e08401526001600160a01b0316610100830152610120820152610140016103b4565b6103936104ed366004613ecd565b610c7b565b610393610500366004613c49565b610d10565b6103d2610513366004613cb9565b611004565b6103d2610526366004613ecd565b60009081526065602052604090206001015490565b6103d26101cd5481565b610393610553366004613f49565b6110bf565b6103d2610566366004613ecd565b6112d4565b610393610579366004613ee5565b611438565b61039361058c366004613ee5565b61145d565b6103a861059f366004613bd9565b6101dc6020526000908152604090205460ff1681565b6103936105c3366004613ecd565b6114db565b6103936114fa565b6103d26105de366004613cb9565b61151d565b6103d26105f1366004613ecd565b611530565b610393610604366004613d18565b611548565b610631610617366004613bd9565b6101da602052600090815260409020805460019091015482565b604080519283526020830191909152016103b4565b60975460ff166103a8565b61067b61065f366004613bd9565b6101dd602052600090815260409020546001600160a01b031681565b6040516103b491906140a9565b6101c85461067b906001600160a01b031681565b6103936106aa366004613c11565b6116f3565b6103936106bd366004613bd9565b61173b565b6103936106d0366004613ce4565b611864565b6103d26106e3366004613ecd565b6118a2565b6103936106f6366004613e27565b6118ad565b6101c75461067b906001600160a01b031681565b6103d26101cc5481565b6101d9546103a89060ff1681565b6103d2610735366004613bd9565b6101db6020526000908152604090205481565b6103d2610756366004613db8565b6118f9565b6103d26101cf5481565b6103d26101cb5481565b610393611953565b610393610785366004613f8a565b611973565b6103d2610798366004613bd9565b6101de6020526000908152604090205481565b6101c55461067b906001600160a01b031681565b6103a86107cd366004613ee5565b611af7565b6101c45461067b906001600160a01b031681565b6103d26107f4366004613ecd565b611b22565b6103d2600081565b61067b61080f366004613bd9565b6101df602052600090815260409020546001600160a01b031681565b6101ce5461083f906001600160401b031681565b6040516001600160401b0390911681526020016103b4565b610393610865366004613ecd565b611bdc565b6103d26101ca5481565b6103a8611c00565b61039361088a366004613bd9565b611c1f565b61039361089d366004613bd9565b611cbb565b6103936108b0366004613ee5565b611d5b565b61067b6108c3366004613ecd565b6101e1602052600090815260409020546001600160a01b031681565b6103d26108ed366004613cb9565b611d80565b610393610900366004613bd9565b611dd7565b6103a8610913366004613bd9565b6101e56020526000908152604090205460ff1681565b6103d260008051602061457883398151915281565b6103d260008051602061459883398151915281565b610393610961366004613bd9565b611e1e565b6101e45461067b906001600160a01b031681565b610393610988366004613ff7565b611ec1565b6103d261099b366004613cb9565b611efe565b6103a86109ae366004613bd9565b6101e26020526000908152604090205460ff1681565b6101c35461067b906001600160a01b031681565b6101c95461067b906001600160a01b031681565b6101e35461067b906001600160a01b031681565b610393610a0e366004613bd9565b611f4f565b6101c65461067b906001600160a01b031681565b610a2f611c00565b610a545760405162461bcd60e51b8152600401610a4b9061428e565b60405180910390fd5b6101e480546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b1480610aa857506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000826001600160401b03811115610ad857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b5757816020015b604080516101408101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201528252600019909201910181610af65790505b50905060005b83811015610c73576101e06000868684818110610b8a57634e487b7160e01b600052603260045260246000fd5b602090810292909201358352508181019290925260409081016000208151610140810183528154815260018201549381019390935260028101549183019190915260038101546001600160401b038082166060850152600160401b80830482166080860152600160801b8304821660a0860152600160c01b909204811660c0850152600483015490811660e0850152046001600160a01b0316610100830152600501546101208201528251839083908110610c5557634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610c6b9061451b565b915050610b5d565b509392505050565b6000805160206145b8833981519152610c9381611ff0565b670de0b6b3a7640000821115610d095760405162461bcd60e51b815260206004820152603560248201527f706f6f6c3a2044697265637420496e746572657374207261746520636f756c64604482015274206e6f7420686967686572207468616e203130302560581b6064820152608401610a4b565b506101cf55565b600054610100900460ff1615808015610d305750600054600160ff909116105b80610d4a5750303b158015610d4a575060005460ff166001145b610dad5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a4b565b6000805460ff191660011790558015610dd0576000805461ff0019166101001790555b610dd98661173b565b6001600160a01b038516610dff5760405162461bcd60e51b8152600401610a4b906141f0565b6001600160a01b038316610e255760405162461bcd60e51b8152600401610a4b906141f0565b6101e380546001600160a01b038087166001600160a01b0319928316179092556101c880548884169083161790556101c380548684169083161790556101c48054928516928216929092179091556101c980549091163317905560408051610120810182526105dc81526103e860208201526101f4918101829052606081018290526080810191909152600060a0820181905260c0820181905260e08201819052610100820152610edb906101d0906009613b80565b506101ce805467ffffffffffffffff1916630317040017905566b1a2bc2ec500006101cf556305f5e1006101cc55671bc16d674ec800006101cd55610f2e6000805160206145b883398151915287611ffa565b6101c35460405163095ea7b360e01b81526001600160a01b039091169063095ea7b390610f63903090600019906004016140e1565b602060405180830381600087803b158015610f7d57600080fd5b505af1158015610f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb59190613ead565b508015610ffc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6000806000306001600160a01b031685856040516024016110269291906140e1565b60408051601f198184030181529181526020820180516001600160e01b03166320e485d760e11b1790525161105b919061401e565b6000604051808303816000865af19150503d8060008114611098576040519150601f19603f3d011682016040523d82523d6000602084013e61109d565b606091505b5091509150808060200190518101906110b69190613f31565b95945050505050565b6110c7612004565b6110cf61204c565b33836110ed5760405162461bcd60e51b8152600401610a4b9061420c565b6001600160a01b0381166111575760405162461bcd60e51b815260206004820152602b60248201527f706f6f6c3a207374616b6520616464726573732063616e206e6f74206265207a60448201526a65726f206164647265737360a81b6064820152608401610a4b565b60006111648483876120a6565b9050600061117285836121c7565b6101c3549091506001600160a01b03868116911614611208576001600160a01b03851660009081526101dc60209081526040918290208251918201909252905460ff1615158082526112065760405162461bcd60e51b815260206004820181905260248201527f706f6f6c3a207374616b6520746f6b656e206973206e6f7420616c6c6f7765646044820152606401610a4b565b505b6101c3546001600160a01b0386811691161415611283576101c354604051630852cd8d60e31b8152600481018490526001600160a01b03909116906342966c6890602401600060405180830381600087803b15801561126657600080fd5b505af115801561127a573d6000803e3d6000fd5b5050505061129e565b6101e35461129e906001600160a01b03878116911688612440565b6112a9838583612496565b93506112b88386868585612922565b6112c28184612b71565b5050506112cf600160c955565b505050565b60008181526101e0602090815260408083208151610140810183528154815260018201549381019390935260028101549183019190915260038101546001600160401b038082166060850152600160401b80830482166080860152600160801b8304821660a08601819052600160c01b909304821660c0860152600484015480831660e0870152046001600160a01b0316610100850152600590920154610120840152429182161161138a575060009392505050565b81608001516001600160401b0316816001600160401b031611156113af575060808101515b60008260a00151826113c191906144b0565b90506000670de0b6b3a76400006001600160401b031684606001516001600160401b0316670de0b6b3a76400006001600160401b0316846001600160401b03168760000151611410919061447a565b61141a919061447a565b611424919061436f565b61142e919061436f565b9695505050505050565b60008281526065602052604090206001015461145381611ff0565b6112cf8383612cfb565b6001600160a01b03811633146114cd5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a4b565b6114d78282612d81565b5050565b6000805160206145b88339815191526114f381611ff0565b506101cc55565b6000805160206145b883398151915261151281611ff0565b61151a612de8565b50565b60006115298383612e34565b9392505050565b6101d0816009811061154157600080fd5b0154905081565b6000805160206145b883398151915261156081611ff0565b60005b82518110156112cf576101e5600084838151811061159157634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166116e15760016101e560008584815181106115e357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555061168f6101c360009054906101000a90046001600160a01b03166101db600086858151811061166157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054612e34565b6101db60008584815181106116b457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055505b806116eb8161451b565b915050611563565b6000805160206145b883398151915261170b81611ff0565b506001600160a01b0391821660009081526101dd6020526040902080546001600160a01b03191691909216179055565b600054610100900460ff166117625760405162461bcd60e51b8152600401610a4b90614243565b6001600160a01b0381166117b85760405162461bcd60e51b815260206004820181905260248201527f4f776e65722063616e6e6f7420626520746865207a65726f20616464726573736044820152606401610a4b565b6117c061304d565b6117c8613074565b6117d06130a3565b6117e860008051602061457883398151915282611ffa565b61180060008051602061459883398151915282611ffa565b6118266000805160206145b88339815191526000805160206145788339815191526130d2565b61184c6000805160206145988339815191526000805160206145788339815191526130d2565b61151a600080516020614578833981519152806130d2565b6000805160206145b883398151915261187c81611ff0565b506001600160a01b0390921660009081526101da60205260409020600181019190915555565b6000610aa88261311d565b6118b5612004565b60005b81518110156114d7576118f18282815181106118e457634e487b7160e01b600052603260045260246000fd5b6020026020010151611bdc565b6001016118b8565b600080805b83811015610c735761193585858381811061192957634e487b7160e01b600052603260045260246000fd5b905060200201356112d4565b61193f908361432c565b91508061194b8161451b565b9150506118fe565b6000805160206145b883398151915261196b81611ff0565b61151a613427565b61197b612004565b61198361204c565b6101c6546001600160a01b0316336001600160a01b0316146119e25760405162461bcd60e51b81526020600482015260186024820152771c1bdbdb0e88139bdd081cdd185ad948189e481d985d5b1d60421b6044820152606401610a4b565b60006119ee848661432c565b905060008111611a105760405162461bcd60e51b8152600401610a4b9061420c565b6101c3546101c654611a2f916001600160a01b039081169116876120a6565b506101c354600090611a4a906001600160a01b0316836121c7565b90508515611ab2576101c354604051630852cd8d60e31b8152600481018890526001600160a01b03909116906342966c6890602401600060405180830381600087803b158015611a9957600080fd5b505af1158015611aad573d6000803e3d6000fd5b505050505b611abd848483612496565b6101c354909350611adb9085906001600160a01b0316858585612922565b611ae58185612b71565b5050611af1600160c955565b50505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000806000306001600160a01b031684604051602401611b4491815260200190565b60408051601f198184030181529181526020820180516001600160e01b031663688cd84560e01b17905251611b79919061401e565b6000604051808303816000865af19150503d8060008114611bb6576040519150601f19603f3d011682016040523d82523d6000602084013e611bbb565b606091505b509150915080806020019051810190611bd49190613f31565b949350505050565b611be461204c565b611bec612004565b611bf63382613464565b61151a600160c955565b6000611c1a60008051602061457883398151915233611af7565b905090565b6000805160206145b8833981519152611c3781611ff0565b6001600160a01b03821660009081526101dc60205260409020805460ff1615611cac5760405162461bcd60e51b815260206004820152602160248201527f416c6c6f77656420746f6b656e20697320616c726561647920657869737465646044820152602160f81b6064820152608401610a4b565b805460ff191660011790555050565b6000805160206145b8833981519152611cd381611ff0565b6001600160a01b038216611d375760405162461bcd60e51b815260206004820152602560248201527f706f6f6c3a204457207661756c742063616e6e6f74206265207a65726f206164604482015264647265737360d81b6064820152608401610a4b565b506101c680546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260656020526040902060010154611d7681611ff0565b6112cf8383612d81565b6001600160a01b03821660009081526101da6020908152604080832081518083019092528054808352600190910154928201839052909190611dc390600a6143d2565b611dcd908561447a565b611bd4919061436f565b611ddf611c00565b611dfb5760405162461bcd60e51b8152600401610a4b9061428e565b6101e380546001600160a01b0319166001600160a01b0392909216919091179055565b6000805160206145b8833981519152611e3681611ff0565b6001600160a01b038216611e9d5760405162461bcd60e51b815260206004820152602860248201527f706f6f6c3a20444458205374616b696e672063616e6e6f74206265207a65726f604482015267206164647265737360c01b6064820152608401610a4b565b506101c780546001600160a01b0319166001600160a01b0392909216919091179055565b6000805160206145b8833981519152611ed981611ff0565b506101ce805467ffffffffffffffff19166001600160401b0392909216919091179055565b6001600160a01b03821660009081526101da60209081526040808320815180830190925280548083526001909101549282019290925290611f4090600a6143d2565b6020820151611dcd908561447a565b6000805160206145b8833981519152611f6781611ff0565b6001600160a01b038216611fcc5760405162461bcd60e51b815260206004820152602660248201527f706f6f6c3a20444458207661756c742063616e6e6f74206265207a65726f206160448201526564647265737360d01b6064820152608401610a4b565b506101c580546001600160a01b0319166001600160a01b0392909216919091179055565b61151a813361368a565b6114d78282612cfb565b60975460ff161561204a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a4b565b565b600260c954141561209f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a4b565b600260c955565b600080846001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016120d591906140a9565b60206040518083038186803b1580156120ed57600080fd5b505afa158015612101573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121259190613f31565b905061213c6001600160a01b0386168530866136e3565b6040516370a0823160e01b81526000906001600160a01b038716906370a082319061216b9030906004016140a9565b60206040518083038186803b15801561218357600080fd5b505afa158015612197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bb9190613f31565b905061142e8282614499565b6001600160a01b0380831660009081526101dd60205260408120549091168181156123b957816001600160a01b031663b4d1d7956040518163ffffffff1660e01b815260040160206040518083038186803b15801561222557600080fd5b505afa158015612239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225d9190613f31565b826001600160a01b031663e56522a96040518163ffffffff1660e01b815260040160206040518083038186803b15801561229657600080fd5b505afa1580156122aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ce9190613fd3565b6122de9063ffffffff1642614499565b111561233857816001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561231f57600080fd5b505af1158015612333573d6000803e3d6000fd5b505050505b604051633ddac95360e01b81526001600160a01b03831690633ddac9539061236690889088906004016140e1565b60206040518083038186803b15801561237e57600080fd5b505afa158015612392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b69190613f31565b90505b80156123c7578092506123d4565b6123d18585611d80565b92505b6101cc548310156124385760405162461bcd60e51b815260206004820152602860248201527f706f6f6c3a206d696e696d756d207374616b696e6720616d6f756e74206e6f74604482015267081c995858da195960c21b6064820152608401610a4b565b505092915050565b6112cf8363a9059cbb60e01b848460405160240161245f9291906140e1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613704565b6000806001600160a01b0384161580156124c957506001600160a01b0385811660009081526101df602052604090205416155b15612530576101e480546001600160a01b0387811660009081526101df6020908152604080832080546001600160a01b03191695851695909517909455935490911681526101de909252812080546001929061252690849061432c565b9091555060019150505b6001600160a01b0384161561274d576001600160a01b03841660009081526101e2602052604090205460ff166125bf5760405162461bcd60e51b815260206004820152602e60248201527f706f6f6c3a2074686973207573657220686173206e6f74206a6f696e6564207460448201526d68652073797374656d207965742160901b6064820152608401610a4b565b6001600160a01b0385811660009081526101df6020526040902054161580156125fa5750846001600160a01b0316846001600160a01b031614155b6126545760405162461bcd60e51b815260206004820152602560248201527f706f6f6c3a207573657220616c7265616479206a6f696e656420627920726566604482015264195c9c985b60da1b6064820152608401610a4b565b6001600160a01b0380851660009081526101df60205260409020541680158015906126905750856001600160a01b0316816001600160a01b0316145b156126f95760405162461bcd60e51b815260206004820152603360248201527f706f6f6c3a206661696c65642062656361757365206f662063697263756c6174604482015272696e6720726566657272616c20636972636c6560681b6064820152608401610a4b565b6001600160a01b0386811660009081526101df6020908152604080832080546001600160a01b031916948a1694851790559282526101de905290812080546001929061274690849061432c565b9091555050505b6001600160a01b0385811660009081526101df602052604090205416156128ff576001600160a01b0380861660009081526101df6020526040812054909116906127968561311d565b90506000670de0b6b3a76400006001600160401b03166101cf54876127bb919061447a565b6127c5919061436f565b90506000670de0b6b3a76400006001600160401b03166101cf54846127ea919061447a565b6127f4919061436f565b6101c3546101c8546040516323b872dd60e01b81529293506001600160a01b03918216926323b872dd92612830921690889086906004016140bd565b602060405180830381600087803b15801561284a57600080fd5b505af115801561285e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128829190613ead565b506001600160a01b03841660009081526101db6020526040812080548492906128ac90849061432c565b909155505060408051828152602081018490526001600160a01b0380871692908c16917f1db3eb8593e2df25f384c5d65274f44eb883bdefc3323aa2197ed202ce0eb8ee910160405180910390a3505050505b80156129195750506101e4546001600160a01b0316611529565b50919392505050565b6101ca5460008181526101e06020526040902060048101805467ffffffffffffffff1916426001600160401b03169081179091556003820180546001600160801b0316600160801b83026001600160c01b031617600160c01b909202919091179055600181018390556101cd54670de0b6b3a7640000906129a3908561447a565b6129ad919061436f565b81556101ce5460038201805467ffffffffffffffff19166001600160401b0392831690811790915560048301546129e49216614344565b8160030160086101000a8154816001600160401b0302191690836001600160401b03160217905550858160040160086101000a8154816001600160a01b0302191690836001600160a01b03160217905550838160050181905550836101cb6000828254612a51919061432c565b90915550506101ca8054906000612a678361451b565b909155505060008281526101e16020908152604080832080546001600160a01b0319166001600160a01b038c1690811790915583526101e290915290205460ff16612ad1576001600160a01b03871660009081526101e260205260409020805460ff191660011790555b856001600160a01b0316876001600160a01b0316837ffeddeab5331bfcd2c5ba6992d9bb9c2233dee3f0785ec31e081eb46857693a0188888887600101548860000154612b1e9190614499565b6003890154604080516001600160a01b0390961686526020860194909452928401919091526060830152600160401b90046001600160401b0316608082015260a00160405180910390a450505050505050565b6101c7546040516311026af760e11b8152600481018490526000916001600160a01b031690632204d5ee90602401602060405180830381600087803b158015612bb957600080fd5b505af1158015612bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf19190613f31565b9050600081118015612c8557506101c560009054906101000a90046001600160a01b03166001600160a01b0316638832e6726040518163ffffffff1660e01b815260040160206040518083038186803b158015612c4d57600080fd5b505afa158015612c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c859190613ead565b156112cf576101c554604051637b408a6b60e01b81526001600160a01b0390911690637b408a6b90612cbd90859085906004016140e1565b600060405180830381600087803b158015612cd757600080fd5b505af1158015612ceb573d6000803e3d6000fd5b50505050505050565b600160c955565b612d058282611af7565b6114d75760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612d3d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612d8b8282611af7565b156114d75760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b612df06137d6565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051612e2a91906140a9565b60405180910390a1565b6001600160a01b0380831660009081526101dd6020526040812054909182911681811561302857816001600160a01b031663b4d1d7956040518163ffffffff1660e01b815260040160206040518083038186803b158015612e9457600080fd5b505afa158015612ea8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecc9190613f31565b826001600160a01b031663e56522a96040518163ffffffff1660e01b815260040160206040518083038186803b158015612f0557600080fd5b505afa158015612f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3d9190613fd3565b612f4d9063ffffffff1642614499565b1115612fa757816001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612f8e57600080fd5b505af1158015612fa2573d6000803e3d6000fd5b505050505b604051633ddac95360e01b81526001600160a01b03831690633ddac95390612fd590899089906004016140e1565b60206040518083038186803b158015612fed57600080fd5b505afa158015613001573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130259190613f31565b90505b801561303657809250613043565b6130408686611d80565b92505b5090949350505050565b600054610100900460ff1661204a5760405162461bcd60e51b8152600401610a4b90614243565b600054610100900460ff1661309b5760405162461bcd60e51b8152600401610a4b90614243565b61204a61381f565b600054610100900460ff166130ca5760405162461bcd60e51b8152600401610a4b90614243565b61204a613852565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6101c3546001600160a01b0390811660009081526101dd6020526040812054909116801561341057806001600160a01b031663b4d1d7956040518163ffffffff1660e01b815260040160206040518083038186803b15801561317e57600080fd5b505afa158015613192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b69190613f31565b816001600160a01b031663e56522a96040518163ffffffff1660e01b815260040160206040518083038186803b1580156131ef57600080fd5b505afa158015613203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132279190613fd3565b6132379063ffffffff1642614499565b111561329157806001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561327857600080fd5b505af115801561328c573d6000803e3d6000fd5b505050505b6000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156132cc57600080fd5b505afa1580156132e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133049190613bf5565b6101c3549091506001600160a01b038083169116141561339257816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561335757600080fd5b505afa15801561336b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338f9190613bf5565b90505b604051633ddac95360e01b81526001600160a01b03831690633ddac953906133c090849088906004016140e1565b60206040518083038186803b1580156133d857600080fd5b505afa1580156133ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd49190613f31565b6101c354611529906001600160a01b031684611efe565b61342f612004565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612e1d3390565b60008181526101e160205260409020546001600160a01b038381169116146134e25760405162461bcd60e51b815260206004820152602b60248201527f706f6f6c3a20636f6e7472616374206964206e6f742062656c6f6e677320746f60448201526a103a3434b99037bbb732b960a91b6064820152608401610a4b565b60008181526101e060205260408120906134fb836112d4565b905060006135088261311d565b9050801561361b576101c3546101c8546040516323b872dd60e01b81526001600160a01b03928316926323b872dd9261354a92911690899086906004016140bd565b602060405180830381600087803b15801561356457600080fd5b505af1158015613578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359c9190613ead565b50600383015442906001600160401b03600160401b909104811690821611156135d657506003830154600160401b90046001600160401b03165b60038401805467ffffffffffffffff60801b1916600160801b6001600160401b0384160217905560028401805484919060009061361490849061432c565b9091555050505b6003830180546001600160c01b0316600160c01b426001600160401b03160217905560408051828152602081018490526001600160a01b0387169186917f6fa2252892a07f93963cd54ee15abe8b0ac4070c43d93f0fbbfb30604ffb8d06910160405180910390a35050505050565b6136948282611af7565b6114d7576136a181613879565b6136ac83602061388b565b6040516020016136bd92919061403a565b60408051601f198184030181529082905262461bcd60e51b8252610a4b916004016141bd565b611af1846323b872dd60e01b85858560405160240161245f939291906140bd565b6000613759826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613a6c9092919063ffffffff16565b8051909150156112cf57808060200190518101906137779190613ead565b6112cf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a4b565b60975460ff1661204a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610a4b565b600054610100900460ff166138465760405162461bcd60e51b8152600401610a4b90614243565b6097805460ff19169055565b600054610100900460ff16612cf45760405162461bcd60e51b8152600401610a4b90614243565b6060610aa86001600160a01b03831660145b6060600061389a83600261447a565b6138a590600261432c565b6001600160401b038111156138ca57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156138f4576020820181803683370190505b509050600360fc1b8160008151811061391d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061395a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061397e84600261447a565b61398990600161432c565b90505b6001811115613a1d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106139cb57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106139ef57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93613a1681614504565b905061398c565b5083156115295760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a4b565b6060611bd48484600085856001600160a01b0385163b613ace5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a4b565b600080866001600160a01b03168587604051613aea919061401e565b60006040518083038185875af1925050503d8060008114613b27576040519150601f19603f3d011682016040523d82523d6000602084013e613b2c565b606091505b5091509150613b3c828286613b47565b979650505050505050565b60608315613b56575081611529565b825115613b665782518084602001fd5b8160405162461bcd60e51b8152600401610a4b91906141bd565b8260098101928215613bb4579160200282015b82811115613bb4578251829061ffff16905591602001919060010190613b93565b50613bc0929150613bc4565b5090565b5b80821115613bc05760008155600101613bc5565b600060208284031215613bea578081fd5b813561152981614562565b600060208284031215613c06578081fd5b815161152981614562565b60008060408385031215613c23578081fd5b8235613c2e81614562565b91506020830135613c3e81614562565b809150509250929050565b600080600080600060a08688031215613c60578081fd5b8535613c6b81614562565b94506020860135613c7b81614562565b93506040860135613c8b81614562565b92506060860135613c9b81614562565b91506080860135613cab81614562565b809150509295509295909350565b60008060408385031215613ccb578182fd5b8235613cd681614562565b946020939093013593505050565b600080600060608486031215613cf8578283fd5b8335613d0381614562565b95602085013595506040909401359392505050565b60006020808385031215613d2a578182fd5b82356001600160401b03811115613d3f578283fd5b8301601f81018513613d4f578283fd5b8035613d62613d5d82614309565b6142d9565b80828252848201915084840188868560051b8701011115613d81578687fd5b8694505b83851015613dac578035613d9881614562565b835260019490940193918501918501613d85565b50979650505050505050565b60008060208385031215613dca578182fd5b82356001600160401b0380821115613de0578384fd5b818501915085601f830112613df3578384fd5b813581811115613e01578485fd5b8660208260051b8501011115613e15578485fd5b60209290920196919550909350505050565b60006020808385031215613e39578182fd5b82356001600160401b03811115613e4e578283fd5b8301601f81018513613e5e578283fd5b8035613e6c613d5d82614309565b80828252848201915084840188868560051b8701011115613e8b578687fd5b8694505b83851015613dac578035835260019490940193918501918501613e8f565b600060208284031215613ebe578081fd5b81518015158114611529578182fd5b600060208284031215613ede578081fd5b5035919050565b60008060408385031215613ef7578182fd5b823591506020830135613c3e81614562565b600060208284031215613f1a578081fd5b81356001600160e01b031981168114611529578182fd5b600060208284031215613f42578081fd5b5051919050565b600080600060608486031215613f5d578081fd5b833592506020840135613f6f81614562565b91506040840135613f7f81614562565b809150509250925092565b60008060008060808587031215613f9f578182fd5b84359350602085013592506040850135613fb881614562565b91506060850135613fc881614562565b939692955090935050565b600060208284031215613fe4578081fd5b815163ffffffff81168114611529578182fd5b600060208284031215614008578081fd5b81356001600160401b0381168114611529578182fd5b600082516140308184602087016144d8565b9190910192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526000835161406c8160178501602088016144d8565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161409d8160288401602088016144d8565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b602080825282518282018190526000919060409081850190868401855b828110156141b057815180518552868101518786015285810151868601526060808201516001600160401b039081169187019190915260808083015182169087015260a08083015182169087015260c08083015182169087015260e08083015190911690860152610100808201516001600160a01b03169086015261012090810151908501526101409093019290850190600101614117565b5091979650505050505050565b60208152600082518060208401526141dc8160408501602087016144d8565b601f01601f19169190910160400192915050565b6020808252600290820152615a4160f01b604082015260600190565b6020808252601b908201527f706f6f6c3a20616d6f756e742063616e6e6f74206265207a65726f0000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b604051601f8201601f191681016001600160401b03811182821017156143015761430161454c565b604052919050565b60006001600160401b038211156143225761432261454c565b5060051b60200190565b6000821982111561433f5761433f614536565b500190565b60006001600160401b0380831681851680830382111561436657614366614536565b01949350505050565b60008261438a57634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156143ca5781600019048211156143b0576143b0614536565b808516156143bd57918102915b93841c9390800290614394565b509250929050565b600061152983836000826143e857506001610aa8565b816143f557506000610aa8565b816001811461440b576002811461441557614431565b6001915050610aa8565b60ff84111561442657614426614536565b50506001821b610aa8565b5060208310610133831016604e8410600b8410161715614454575081810a610aa8565b61445e838361438f565b806000190482111561447257614472614536565b029392505050565b600081600019048311821515161561449457614494614536565b500290565b6000828210156144ab576144ab614536565b500390565b60006001600160401b03838116908316818110156144d0576144d0614536565b039392505050565b60005b838110156144f35781810151838201526020016144db565b83811115611af15750506000910152565b60008161451357614513614536565b506000190190565b600060001982141561452f5761452f614536565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461151a57600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862ad2e4c2619ea6e0faebc405d89445161c041e30fe03373ea0473da142d57d4514a26469706673582212207d52f4e7214c161c87bee0afce6f18930f67407bb7cb39fa352ffab4ba828e1164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getStakingAmountInUSD(address,uint256)": {
        "details": "Get Staking token amount in offered currencies",
        "params": {
          "_amount": "Amount of purchase token"
        },
        "returns": {
          "_0": "Return amount of respective IDO token"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositByVault(uint256,uint256,address,address)": {
        "notice": "----------------------------------- ---------- Core Function ---------- -----------------------------------"
      },
      "pause()": {
        "notice": "----------------------------------- --------- Pause Function ---------- -----------------------------------"
      },
      "setRoot(address)": {
        "notice": "----------------------------------- --------- Update Function --------- -----------------------------------"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 415,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 418,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1102,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1321,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 598,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 703,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 718,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 776,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2827,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "__gap1",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2831,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "__gap2",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2835,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "__gap3",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2839,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "__gap4",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2979,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "rewardToken",
        "offset": 0,
        "slot": "451",
        "type": "t_contract(IERC20WithBurn)5048"
      },
      {
        "astId": 2982,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "extraRewardToken",
        "offset": 0,
        "slot": "452",
        "type": "t_contract(IERC20WithBurn)5048"
      },
      {
        "astId": 2985,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "DDXVault",
        "offset": 0,
        "slot": "453",
        "type": "t_contract(IDDXVault)5034"
      },
      {
        "astId": 2988,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "vault",
        "offset": 0,
        "slot": "454",
        "type": "t_contract(IDWVault)5037"
      },
      {
        "astId": 2991,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "DDXStaking",
        "offset": 0,
        "slot": "455",
        "type": "t_contract(IDDXStaking)5014"
      },
      {
        "astId": 2993,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "treasury",
        "offset": 0,
        "slot": "456",
        "type": "t_address"
      },
      {
        "astId": 2995,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "admin",
        "offset": 0,
        "slot": "457",
        "type": "t_address"
      },
      {
        "astId": 2997,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "totalStakingContracts",
        "offset": 0,
        "slot": "458",
        "type": "t_uint256"
      },
      {
        "astId": 2999,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "totalStaked",
        "offset": 0,
        "slot": "459",
        "type": "t_uint256"
      },
      {
        "astId": 3001,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "minimumStakingAmountInUSD",
        "offset": 0,
        "slot": "460",
        "type": "t_uint256"
      },
      {
        "astId": 3003,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "maximumEarningsInPercent",
        "offset": 0,
        "slot": "461",
        "type": "t_uint256"
      },
      {
        "astId": 3005,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "claimDuration",
        "offset": 0,
        "slot": "462",
        "type": "t_uint64"
      },
      {
        "astId": 3007,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "directInterest",
        "offset": 0,
        "slot": "463",
        "type": "t_uint256"
      },
      {
        "astId": 3011,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "commissionInterestLevels",
        "offset": 0,
        "slot": "464",
        "type": "t_array(t_uint256)9_storage"
      },
      {
        "astId": 3013,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "emergencyCancelled",
        "offset": 0,
        "slot": "473",
        "type": "t_bool"
      },
      {
        "astId": 3018,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "offeredCurrencies",
        "offset": 0,
        "slot": "474",
        "type": "t_mapping(t_address,t_struct(OfferedCurrency)2963_storage)"
      },
      {
        "astId": 3022,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "directBonus",
        "offset": 0,
        "slot": "475",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3027,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "allowedStakeTokens",
        "offset": 0,
        "slot": "476",
        "type": "t_mapping(t_address,t_struct(StakeToken)2958_storage)"
      },
      {
        "astId": 3031,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "assetPrices",
        "offset": 0,
        "slot": "477",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3035,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "totalReferralInvitations",
        "offset": 0,
        "slot": "478",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3039,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "referredBy",
        "offset": 0,
        "slot": "479",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3044,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "stakingContracts",
        "offset": 0,
        "slot": "480",
        "type": "t_mapping(t_uint256,t_struct(StakingInfo)2955_storage)"
      },
      {
        "astId": 3048,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "stakingContractOwnedBy",
        "offset": 0,
        "slot": "481",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3052,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "couldBecomeReferrer",
        "offset": 0,
        "slot": "482",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3054,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "fundReceiver",
        "offset": 0,
        "slot": "483",
        "type": "t_address"
      },
      {
        "astId": 3056,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "root",
        "offset": 0,
        "slot": "484",
        "type": "t_address"
      },
      {
        "astId": 3060,
        "contract": "contracts/DGWStaking.sol:DGWStaking",
        "label": "directBonusRefreshExecuted",
        "offset": 0,
        "slot": "485",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)9_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[9]",
        "numberOfBytes": "288"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDDXStaking)5014": {
        "encoding": "inplace",
        "label": "contract IDDXStaking",
        "numberOfBytes": "20"
      },
      "t_contract(IDDXVault)5034": {
        "encoding": "inplace",
        "label": "contract IDDXVault",
        "numberOfBytes": "20"
      },
      "t_contract(IDWVault)5037": {
        "encoding": "inplace",
        "label": "contract IDWVault",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20WithBurn)5048": {
        "encoding": "inplace",
        "label": "contract IERC20WithBurn",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(OfferedCurrency)2963_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DGWStaking.OfferedCurrency)",
        "numberOfBytes": "32",
        "value": "t_struct(OfferedCurrency)2963_storage"
      },
      "t_mapping(t_address,t_struct(StakeToken)2958_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DGWStaking.StakeToken)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeToken)2958_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(StakingInfo)2955_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DGWStaking.StakingInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingInfo)2955_storage"
      },
      "t_struct(OfferedCurrency)2963_storage": {
        "encoding": "inplace",
        "label": "struct DGWStaking.OfferedCurrency",
        "members": [
          {
            "astId": 2960,
            "contract": "contracts/DGWStaking.sol:DGWStaking",
            "label": "decimal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2962,
            "contract": "contracts/DGWStaking.sol:DGWStaking",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/DGWStaking.sol:DGWStaking",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/DGWStaking.sol:DGWStaking",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StakeToken)2958_storage": {
        "encoding": "inplace",
        "label": "struct DGWStaking.StakeToken",
        "members": [
          {
            "astId": 2957,
            "contract": "contracts/DGWStaking.sol:DGWStaking",
            "label": "created",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(StakingInfo)2955_storage": {
        "encoding": "inplace",
        "label": "struct DGWStaking.StakingInfo",
        "members": [
          {
            "astId": 2936,
            "contract": "contracts/DGWStaking.sol:DGWStaking",
            "label": "totalExpectedInterest",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2938,
            "contract": "contracts/DGWStaking.sol:DGWStaking",
            "label": "totalStakesInUSD",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2940,
            "contract": "contracts/DGWStaking.sol:DGWStaking",
            "label": "claimedInterest",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2942,
            "contract": "contracts/DGWStaking.sol:DGWStaking",
            "label": "claimDuration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 2944,
            "contract": "contracts/DGWStaking.sol:DGWStaking",
            "label": "dueDate",
            "offset": 8,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 2946,
            "contract": "contracts/DGWStaking.sol:DGWStaking",
            "label": "lastClaimedTime",
            "offset": 16,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 2948,
            "contract": "contracts/DGWStaking.sol:DGWStaking",
            "label": "lastUpdatedTime",
            "offset": 24,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 2950,
            "contract": "contracts/DGWStaking.sol:DGWStaking",
            "label": "createdAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint64"
          },
          {
            "astId": 2952,
            "contract": "contracts/DGWStaking.sol:DGWStaking",
            "label": "stakeToken",
            "offset": 8,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 2954,
            "contract": "contracts/DGWStaking.sol:DGWStaking",
            "label": "totalStakesInToken",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}