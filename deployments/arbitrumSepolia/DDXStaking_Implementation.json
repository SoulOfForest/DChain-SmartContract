{
  "address": "0x8F562629225AEbF517E78683C026fa06e3f67dc1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInUSD",
          "type": "uint256"
        }
      ],
      "name": "ContractCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minDepositInUSD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_APR",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_period",
          "type": "uint128"
        }
      ],
      "name": "PoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInUSD",
          "type": "uint256"
        }
      ],
      "name": "RewardHarvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingAmount",
          "type": "uint256"
        }
      ],
      "name": "StakingContractCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInUSD",
          "type": "uint256"
        }
      ],
      "name": "Withdrawed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUB_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "__DChainBase_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDepositInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_APR",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_period",
          "type": "uint64"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_originAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "depositByVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyCancelled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountInUSD",
          "type": "uint256"
        }
      ],
      "name": "getAmountDDXByUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getStakingAmountByPegToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getStakingAmountInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "offeredCurrencies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "decimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingRewardInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minDepositInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "period",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "APR",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDDXVault",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setDDXVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimal",
          "type": "uint256"
        }
      ],
      "name": "setOfferedCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingInfos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalStakesInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "dueDate",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "timeStake",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "lastClaimedTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "lastUpdatedTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "createdAt",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IDDXVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9918858895c65b9523f514591bd4a90ffc8ca4b7786a8d373c7630a6912f90a1",
  "receipt": {
    "to": null,
    "from": "0x5d20cb3A06266eed62e518eBD58aC74b0b0f2d29",
    "contractAddress": "0x8F562629225AEbF517E78683C026fa06e3f67dc1",
    "transactionIndex": 1,
    "gasUsed": "2557230",
    "logsBloom": "0x
    "blockHash": "0x1f28eb7a4e62647a5efeebde17b65e4413c3a0d64af53a5f98c20c3823544b57",
    "transactionHash": "0x9918858895c65b9523f514591bd4a90ffc8ca4b7786a8d373c7630a6912f90a1",
    "logs": [],
    "blockNumber": 4581279,
    "cumulativeGasUsed": "2557230",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f5aebcb8d3bc11338a03402a54132064",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInUSD\",\"type\":\"uint256\"}],\"name\":\"ContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDepositInUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_APR\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_period\",\"type\":\"uint128\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInUSD\",\"type\":\"uint256\"}],\"name\":\"RewardHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"}],\"name\":\"StakingContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInUSD\",\"type\":\"uint256\"}],\"name\":\"Withdrawed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUB_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__DChainBase_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDepositInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_APR\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_period\",\"type\":\"uint64\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"depositByVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountInUSD\",\"type\":\"uint256\"}],\"name\":\"getAmountDDXByUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getStakingAmountByPegToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getStakingAmountInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"offeredCurrencies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewardInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minDepositInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"period\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"APR\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDDXVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setDDXVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"setOfferedCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakesInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"dueDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timeStake\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastClaimedTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastUpdatedTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAt\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IDDXVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getStakingAmountInUSD(address,uint256)\":{\"details\":\"Get Staking token amount in offered currencies\",\"params\":{\"_amount\":\"Amount of purchase token\"},\"returns\":{\"_0\":\"Return amount of respective IDO token\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPool(uint256,uint64,uint64)\":{\"notice\":\"----------------------------------- ---------- Core Function ---------- -----------------------------------\"},\"pause()\":{\"notice\":\"----------------------------------- --------- Pause Function ---------- -----------------------------------\"},\"setDDXVault(address)\":{\"notice\":\"----------------------------------- --------- Update Function --------- -----------------------------------\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DDXStaking.sol\":\"DDXStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DChainBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\n/**\\n * @title HelixBase contract\\n * @notice This is our Base contract that most other contracts inherit from. It includes many standard\\n *  useful abilities like upgradeability, pausability, access control, and re-entrancy guards.\\n * @author Helix\\n */\\n\\ncontract DChainBase is\\n    AccessControlUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    bytes32 public constant SUB_ADMIN_ROLE = keccak256(\\\"SUB_ADMIN_ROLE\\\");\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    // Pre-reserving a few slots in the base contract in case we need to add things in the future.\\n    // This does not actually take up gas cost or storage cost, but it does reserve the storage slots.\\n    // See OpenZeppelin's use of this pattern here:\\n    // https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L37\\n    uint256[50] private __gap1;\\n    uint256[50] private __gap2;\\n    uint256[50] private __gap3;\\n    uint256[50] private __gap4;\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __DChainBase_init(address owner) public onlyInitializing {\\n        require(owner != address(0), \\\"Owner cannot be the zero address\\\");\\n        __AccessControl_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        _setupRole(OWNER_ROLE, owner);\\n        _setupRole(PAUSER_ROLE, owner);\\n\\n        _setRoleAdmin(SUB_ADMIN_ROLE, OWNER_ROLE);\\n        _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\n        _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n    }\\n\\n    function isAdmin() public view returns (bool) {\\n        return hasRole(OWNER_ROLE, _msgSender());\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(), \\\"Must have admin role to perform this action\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xff077614c10471835bea25f8d4a28ad727e5432380aec06f0ee3ec191ca2d377\",\"license\":\"MIT\"},\"contracts/DDXStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IOracleSimple.sol\\\";\\nimport \\\"./interfaces/IDChainStaking.sol\\\";\\nimport \\\"./interfaces/IDDXVault.sol\\\";\\nimport \\\"./interfaces/IDDXStaking.sol\\\";\\nimport \\\"./DChainBase.sol\\\";\\n\\ncontract DDXStaking is DChainBase, IDDXStaking {\\n    struct StakingInfo {\\n        uint256 totalStakesInUSD;\\n        uint256 claimedInterest;\\n        uint64 dueDate;\\n        uint64 timeStake;\\n        uint64 lastClaimedTime;\\n        uint64 lastUpdatedTime;\\n        uint64 createdAt;\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        uint256 minDepositInUSD; // minimun amount that can be deposit\\n        uint64 period; // period of pool\\n        uint64 APR; // APR of pool : 5000 = 50%\\n        bool status; // status of pool\\n    }\\n\\n    struct OfferedCurrency {\\n        uint256 decimal;\\n        uint256 rate;\\n    }\\n\\n    uint64 private constant INTEREST_RATE_PRECISION_POINT = (10 ** 5); \\n    uint32 private constant ONE_DAY_IN_SECONDS = 1 days;\\n    uint32 private constant ONE_YEAR_IN_SECONDS = 365 days;\\n\\n    IERC20 public rewardToken;\\n    IDDXVault public vault;\\n    \\n    address public treasury;\\n    address public admin;\\n\\n    address public oracle;\\n\\n    uint256 public totalStaked;\\n\\n    bool public emergencyCancelled;\\n\\n    // Asset token -> Offered Currency (to $)\\n    mapping(address => OfferedCurrency) public offeredCurrencies;\\n    // user -> current staking infos\\n    mapping(uint => mapping(address => StakingInfo)) public stakingInfos;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n\\n    event ContractCreated(uint256 indexed contractId, address indexed user, address indexed stakeToken, address referrer, uint256 amount, uint256 amountInUSD);\\n    event StakingContractCreated(address indexed user, address indexed referrer, uint indexed contractId, uint stakingAmount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event RewardHarvested(address indexed claimer, uint indexed pid, uint256 amount, uint256 amountInUSD);\\n    event Withdrawed(address indexed claimer, uint indexed pid, uint256 amount, uint256 amountInUSD);\\n    event PoolAdded(uint256 _minDepositInUSD, uint64 _APR, uint128 _period);    \\n    \\n    function initialize(address _owner, address _oracle, address _treasury, IERC20 _rewardToken) external initializer {\\n        __DChainBase_init(_owner);\\n        \\n        /// @dev: ZA - Zero address\\n        require(_treasury != address(0), \\\"ZA\\\");\\n        require(address(_rewardToken) != address(0), \\\"ZA\\\");\\n\\n        treasury = _treasury;\\n        rewardToken = _rewardToken;\\n        admin = msg.sender;\\n        oracle = _oracle;\\n\\n        _setupRole(SUB_ADMIN_ROLE, _owner);\\n\\n        // Max approve for transfer from \\n        rewardToken.approve(address(this), type(uint256).max);\\n    }\\n    \\n    /// -----------------------------------\\n    /// --------- Update Function ---------\\n    /// -----------------------------------\\n\\n    function setDDXVault(IDDXVault _vault) external onlyRole(SUB_ADMIN_ROLE) {\\n        require(address(_vault) != address(0), \\\"pool: DDX vault cannot be zero address\\\");\\n        vault = _vault;\\n    }\\n\\n\\n    // how to convert from 1 Token - to $\\n    function setOfferedCurrency(address _currency, uint _rate, uint _decimal) external onlyRole(SUB_ADMIN_ROLE) {\\n        OfferedCurrency storage offeredCurrency = offeredCurrencies[_currency];\\n        offeredCurrency.rate = _rate;\\n        offeredCurrency.decimal = _decimal;\\n    }\\n\\n\\n    /// -----------------------------------\\n    /// ---------- Core Function ----------\\n    /// -----------------------------------\\n\\n    function addPool(uint256 _minDepositInUSD, uint64 _APR, uint64 _period) external onlyRole(SUB_ADMIN_ROLE) {        \\n        poolInfo.push(PoolInfo({\\n            minDepositInUSD: _minDepositInUSD,\\n            APR: _APR,\\n            period: _period,\\n            status: true\\n        }));\\n\\n        emit PoolAdded(_minDepositInUSD, _APR, _period);\\n    }\\n\\n    function depositByVault(uint _pid, uint _originAmount, uint _lockedAmount, address _user) external override whenNotPaused nonReentrant {\\n        require(_msgSender() == address(vault), \\\"pool: Not stake by vault\\\");\\n        require(IDDXVault(vault).startVestingTime() <= block.timestamp, \\\"pool: not allow to use this after vesting time started\\\");\\n\\n        uint totalStakeAmount = _originAmount + _lockedAmount;\\n\\n        require(totalStakeAmount > 0, \\\"pool: amount cannot be zero\\\");\\n\\n        address sender = _user;\\n\\n        // Forward from vault to smart contract \\n        _forwardRewardToken(address(vault), _originAmount);\\n        uint amountOutInUSD = _validateMinimumStakingAmount(_pid, totalStakeAmount);\\n\\n        _updateUserStakingInfo(_pid, sender, totalStakeAmount, amountOutInUSD);\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _amount) external whenNotPaused nonReentrant {\\n        address sender = msg.sender;\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        StakingInfo storage stakingInfo = stakingInfos[_pid][msg.sender];\\n\\n        require(_amount > 0, \\\"pool: amount cannot be zero\\\");\\n        require(pool.status, \\\"This pool is close\\\");\\n        \\n        // Forward user tokens to smart contract \\n        uint stakingAmount = _forwardRewardToken(sender, _amount);\\n        uint amountOutInUSD = _validateMinimumStakingAmount(_pid, stakingAmount);\\n\\n        if (stakingInfo.timeStake == 0) {\\n            stakingInfo.createdAt = uint64(block.timestamp);\\n            stakingInfo.timeStake = uint64(block.timestamp);\\n            stakingInfo.dueDate = stakingInfo.timeStake +  pool.period;\\n        }\\n       \\n        stakingInfo.lastClaimedTime = uint64(block.timestamp);\\n        stakingInfo.lastUpdatedTime = uint64(block.timestamp);\\n        stakingInfo.totalStakesInUSD += amountOutInUSD;\\n       \\n        totalStaked += stakingAmount;\\n\\n        _updateUserStakingInfo(_pid, sender, stakingAmount, amountOutInUSD);\\n    }\\n\\n    function withdraw(uint _pid) external whenNotPaused nonReentrant {\\n        address sender = msg.sender;\\n\\n        StakingInfo storage stakingInfo = stakingInfos[_pid][sender];\\n        require(stakingInfo.totalStakesInUSD > 0, \\\"pool: total stakes must greater than 0\\\");\\n        require(block.timestamp > stakingInfo.dueDate, \\\"pool: due date req not meet\\\");\\n\\n        _harvest(_pid, sender);\\n\\n        uint256 rewardsInRewardTokens = _convertUSDToRewardToken(stakingInfo.totalStakesInUSD);\\n\\n        require(rewardsInRewardTokens > 0, \\\"pool: reward not enough to harvest\\\");\\n\\n        // Transfer the interest amount to owner\\n        rewardToken.transferFrom(treasury, sender, rewardsInRewardTokens);\\n        \\n        delete stakingInfos[_pid][sender];\\n        \\n        emit Withdrawed(sender, _pid, rewardsInRewardTokens, stakingInfo.totalStakesInUSD);\\n    }\\n\\n    function claimReward(uint _pid) external nonReentrant whenNotPaused {\\n        address sender = msg.sender;\\n        _harvest(_pid, sender);\\n    }\\n\\n    function pendingRewardInUSD(uint256 _pid, address _user) public view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        StakingInfo storage stakingInfo = stakingInfos[_pid][_user];\\n\\n        uint64 current = uint64(block.timestamp);\\n        \\n        if (current <= stakingInfo.lastClaimedTime) {\\n            return 0;\\n        }\\n\\n        if (current > stakingInfo.dueDate) {\\n            current = stakingInfo.dueDate;\\n        }\\n\\n        // Get total number of interest periods from the last time claimed\\n        uint64 passedDuration = uint64(block.timestamp) - stakingInfo.lastClaimedTime; \\n\\n        uint256 pendingInterest = stakingInfo.totalStakesInUSD * passedDuration * pool.APR / INTEREST_RATE_PRECISION_POINT / ONE_YEAR_IN_SECONDS;\\n\\n        return pendingInterest;\\n    }\\n\\n    function getAmountDDXByUSD(uint _amountInUSD) external override returns(uint) {\\n        return _convertUSDToRewardToken(_amountInUSD);\\n    }\\n\\n    // Reward token - asset\\n    function _validateMinimumStakingAmount(uint256 _pid, uint256 _stakingAmount) internal returns(uint256 totalStakingAmountInUSD) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        StakingInfo storage stakingInfo = stakingInfos[_pid][msg.sender];\\n        \\n        uint256 amountOut;\\n\\n        if (oracle != address(0)) {\\n            // Update oracle Pricing when time elapsed has passed\\n            if (block.timestamp - IOracleSimple(oracle).getBlockTimestampLast() >  IOracleSimple(oracle).PERIOD()) { \\n                IOracleSimple(oracle).update();\\n            }\\n\\n            amountOut = IOracleSimple(oracle).consult(address(rewardToken), _stakingAmount);\\n        }\\n\\n        if (amountOut > 0) {\\n            totalStakingAmountInUSD = amountOut;\\n        } else { \\n            // This case fallback to pre setup price\\n            totalStakingAmountInUSD = getStakingAmountInUSD(address(rewardToken), _stakingAmount);  // Get amount in case we don't have an active oracle\\n        }\\n\\n        stakingInfo.totalStakesInUSD += totalStakingAmountInUSD;\\n\\n        // Needs to be make sure staking amount by $ greater than minimum amount\\n        require(stakingInfo.totalStakesInUSD >= pool.minDepositInUSD, \\\"pool: minimum staking amount not reached\\\");\\n    }\\n\\n    function _convertUSDToRewardToken(uint256 _amountInUSD) internal returns(uint256) {\\n        if (oracle != address(0)) {\\n            // Update oracle Pricing when time elapsed has passed\\n            if (block.timestamp - IOracleSimple(oracle).getBlockTimestampLast() >  IOracleSimple(oracle).PERIOD()) { \\n                IOracleSimple(oracle).update();\\n            }\\n\\n            return IOracleSimple(oracle).consult(IOracleSimple(oracle).token1(), _amountInUSD);\\n        }\\n\\n        // Get amount in case we don't have an active oracle\\n        return getStakingAmountByPegToken(address(rewardToken), _amountInUSD); \\n    }\\n\\n    /**\\n     * @dev Get Staking token amount in offered currencies\\n     * @param _amount Amount of purchase token\\n     * @return Return amount of respective IDO token\\n     */\\n    function getStakingAmountInUSD(\\n        address _token,\\n        uint _amount\\n    ) public view returns (uint) {\\n        OfferedCurrency memory currency = offeredCurrencies[_token];\\n        return\\n            (_amount * (10 ** currency.decimal)) / currency.rate;\\n    }\\n\\n    function getStakingAmountByPegToken(\\n        address _token,\\n        uint _amount\\n    ) public view returns (uint) {\\n        OfferedCurrency memory currency = offeredCurrencies[_token];\\n        return\\n            (_amount * currency.rate) / (10 ** currency.decimal);\\n    }\\n\\n    function _forwardRewardToken(address sender, uint256 amount) internal returns(uint256) {\\n        uint256 totalStakingbefore = rewardToken.balanceOf(address(this));\\n        // Locking principal deposit amount\\n        rewardToken.transferFrom(sender, address(this), amount);\\n        // Get balance of contract after staking\\n        uint256 totalStakingAfter = rewardToken.balanceOf(address(this));\\n\\n        return totalStakingAfter - totalStakingbefore;\\n    }\\n\\n    function _updateUserStakingInfo(uint _pid, address _user, uint _stakingAmount, uint _amountOutInUSD) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        StakingInfo storage stakingInfo = stakingInfos[_pid][_user];\\n\\n        if (stakingInfo.timeStake == 0) {\\n            stakingInfo.createdAt = uint64(block.timestamp);\\n            stakingInfo.timeStake = uint64(block.timestamp);\\n            stakingInfo.dueDate = stakingInfo.timeStake +  pool.period;\\n        }\\n       \\n        stakingInfo.lastClaimedTime = uint64(block.timestamp);\\n        stakingInfo.lastUpdatedTime = uint64(block.timestamp);\\n        stakingInfo.totalStakesInUSD += _amountOutInUSD;\\n       \\n        totalStaked += _stakingAmount;\\n    }\\n\\n    function _harvest(uint _pid, address _sender) internal {\\n        StakingInfo storage stakingInfo = stakingInfos[_pid][_sender];\\n\\n        uint256 rewardsInUSD = pendingRewardInUSD(_pid, _sender);\\n        uint256 rewardsInRewardTokens = _convertUSDToRewardToken(rewardsInUSD);\\n\\n        require(rewardsInRewardTokens > 0, \\\"pool: reward not enough to harvest\\\");\\n\\n        // Transfer the interest amount to owner\\n        rewardToken.transferFrom(treasury, _sender, rewardsInRewardTokens);\\n        \\n        uint64 lastClaimedTime = uint64(block.timestamp);\\n\\n        if (lastClaimedTime > stakingInfo.dueDate) {\\n            lastClaimedTime = stakingInfo.dueDate;\\n        }\\n\\n        stakingInfo.lastUpdatedTime = uint64(block.timestamp);\\n        stakingInfo.lastClaimedTime = lastClaimedTime;\\n        stakingInfo.claimedInterest += rewardsInUSD;\\n        \\n        emit RewardHarvested(_sender, _pid, rewardsInRewardTokens, rewardsInUSD);\\n    }\\n\\n    /// -----------------------------------\\n    /// --------- Pause Function ----------\\n    /// -----------------------------------\\n\\n    function pause() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n}\",\"keccak256\":\"0xe02f0d94b08c66553903ec8a08295dc4c00e22b794b1bd5606bcb717049c9561\",\"license\":\"MIT\"},\"contracts/interfaces/IDChainStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDChainStaking {\\n    function depositByVault(uint256 _originAmount, uint _lockedAmount, address _user, address referrer) external;\\n    // function stakingContracts(uint256 contractId) external view returns()\\n}\\n\",\"keccak256\":\"0x0395dcdf03f77227fa715c885e882a31e16da601ec1592b8a22c32d0b0fdbc9e\",\"license\":\"MIT\"},\"contracts/interfaces/IDDXStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDDXStaking {\\n    function depositByVault(uint256 _pid, uint256 _originAmount, uint _lockedAmount, address _user) external;\\n    function getAmountDDXByUSD(uint256 _amountInUSD) external returns(uint);\\n}\\n\",\"keccak256\":\"0xd834b8f775fa828d4f7a230bfd1ab1f05713fd9a1f29c31815a19c04424b325e\",\"license\":\"MIT\"},\"contracts/interfaces/IDDXVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDDXVault {\\n    function rewardFromDWStaking(address _beneficiary, uint256 _amount) external;\\n    function rewardApplicable() external view returns(bool);\\n    function startVestingTime() external view returns(uint256);\\n}\\n\",\"keccak256\":\"0xa142c9c69e4cdc0b84e8d96c45fa2a6d989391d72fbb5ba515dc7546278c24f5\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"import {IERC20 as IOpenZeppelinERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20 is IOpenZeppelinERC20 {\\n    function burn(uint256 amount) external;\\n}\",\"keccak256\":\"0x04dbf5ffc124aeb13c19a6146bd14b8eedf5a5b8e8181e2fe3230e2d57b7717d\"},\"contracts/interfaces/IOracleSimple.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IOracleSimple {\\n\\n    function getBlockTimestampLast() external view returns (uint32);\\n\\n    function consult(address token, uint amountIn) external view returns (uint amountOut);\\n\\n    function update() external;\\n\\n    function token0() external view returns(address);\\n    \\n    function token1() external view returns(address);\\n\\n    function PERIOD() external view returns(uint);\\n}\",\"keccak256\":\"0x83d3aae351566b99d3704510df8ee786782bfca4e02c20218c8f878720d2ac96\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612d4a806100206000396000f3fe608060405234801561001057600080fd5b50600436106101f75760003560e01c80638072e60f11610120578063e2bbb158116100b8578063f851a4401161007c578063f851a44014610560578063f8c8765e14610574578063f9e9428f14610587578063fbd695bf1461059a578063fbfa77cf146105ad57600080fd5b8063e2bbb158146104fc578063e58378bb1461050f578063e63ab1e914610524578063f2e0348214610539578063f7c618c11461054c57600080fd5b80638072e60f1461047b578063817b1cd21461048e5780638456cb591461049857806391d14854146104a0578063a217fddf146104b3578063ae169a50146104bb578063b6db75a0146104ce578063d547741f146104d6578063e1988ca3146104e957600080fd5b80635a3a85cb116101935780635a3a85cb146103055780635c975abb1461034257806361d027b31461034d57806362d6306f1461036e578063657efde6146103815780636ca63297146103945780636eb1e05a146103a757806378ecb4ee146104595780637dc0d1d01461046757600080fd5b806301ffc9a7146101fc578063022f2354146102245780631526fe27146102475780632204d5ee1461028c578063248a9ca31461029f5780632e1a7d4d146102c25780632f2ff15d146102d757806336568abe146102ea5780633f4ba83a146102fd575b600080fd5b61020f61020a366004612787565b6105c1565b60405190151581526020015b60405180910390f35b610239600080516020612cf583398151915281565b60405190815260200161021b565b61025a610255366004612740565b6105f8565b60405161021b94939291909384526001600160401b039283166020850152911660408301521515606082015260800190565b61023961029a366004612740565b610648565b6102396102ad366004612740565b60009081526065602052604090206001015490565b6102d56102d0366004612740565b610653565b005b6102d56102e5366004612758565b610898565b6102d56102f8366004612758565b6108c2565b6102d5610940565b61032d61031336600461262e565b6101ca602052600090815260409020805460019091015482565b6040805192835260208301919091520161021b565b60975460ff1661020f565b6101c554610361906001600160a01b031681565b60405161021b91906128eb565b6102d561037c36600461262e565b61096e565b6102d561038f3660046126ec565b610a97565b6102396103a2366004612758565b610ad5565b6104146103b5366004612758565b6101cb6020908152600092835260408084209091529082529020805460018201546002830154600390930154919290916001600160401b0380831692600160401b8104821692600160801b8204831692600160c01b9092048216911687565b6040805197885260208801969096526001600160401b0394851695870195909552918316606086015282166080850152811660a08401521660c082015260e00161021b565b6101c95461020f9060ff1681565b6101c754610361906001600160a01b031681565b6102d56104893660046127e8565b610c04565b6102396101c85481565b6102d5610dd2565b61020f6104ae366004612758565b610dfe565b610239600081565b6102d56104c9366004612740565b610e29565b61020f610e4f565b6102d56104e4366004612758565b610e6e565b6102396104f73660046126c1565b610e93565b6102d561050a3660046127c7565b610ef2565b610239600080516020612cb583398151915281565b610239600080516020612cd583398151915281565b6102396105473660046126c1565b6110fe565b6101c354610361906001600160a01b031681565b6101c654610361906001600160a01b031681565b6102d5610582366004612666565b61114f565b6102d561059536600461281d565b61139c565b6102d56105a836600461262e565b6114d9565b6101c454610361906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806105f257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6101cc818154811061060957600080fd5b6000918252602090912060029091020180546001909101549091506001600160401b0380821691600160401b810490911690600160801b900460ff1684565b60006105f28261157a565b61065b611828565b61066361186e565b60008181526101cb6020908152604080832033808552925290912080546106e05760405162461bcd60e51b815260206004820152602660248201527f706f6f6c3a20746f74616c207374616b6573206d75737420677265617465722060448201526507468616e20360d41b60648201526084015b60405180910390fd5b60028101546001600160401b0316421161073c5760405162461bcd60e51b815260206004820152601b60248201527f706f6f6c3a20647565206461746520726571206e6f74206d656574000000000060448201526064016106d7565b61074683836118c8565b6000610755826000015461157a565b9050600081116107775760405162461bcd60e51b81526004016106d79061298b565b6101c3546101c5546040516323b872dd60e01b81526001600160a01b03928316926323b872dd926107b192911690879086906004016128ff565b602060405180830381600087803b1580156107cb57600080fd5b505af11580156107df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108039190612720565b5060008481526101cb602090815260408083206001600160a01b0387168085529083528184208481556001810185905560028101949094556003909301805467ffffffffffffffff1916905584548151858152928301528692917f992aa94ba074f022eacd638616e322641ce0911ddc743e0dc48c338afafc1ff0910160405180910390a3505050610895600160c955565b50565b6000828152606560205260409020600101546108b381611a93565b6108bd8383611a9d565b505050565b6001600160a01b03811633146109325760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106d7565b61093c8282611b23565b5050565b610948610e4f565b6109645760405162461bcd60e51b81526004016106d790612a4f565b61096c611b8a565b565b600054610100900460ff166109955760405162461bcd60e51b81526004016106d790612a04565b6001600160a01b0381166109eb5760405162461bcd60e51b815260206004820181905260248201527f4f776e65722063616e6e6f7420626520746865207a65726f206164647265737360448201526064016106d7565b6109f3611bd6565b6109fb611bfd565b610a03611c2c565b610a1b600080516020612cb583398151915282611c5b565b610a33600080516020612cd583398151915282611c5b565b610a59600080516020612cf5833981519152600080516020612cb5833981519152611c65565b610a7f600080516020612cd5833981519152600080516020612cb5833981519152611c65565b610895600080516020612cb583398151915280611c65565b600080516020612cf5833981519152610aaf81611a93565b506001600160a01b0390921660009081526101ca60205260409020600181019190915555565b6000806101cc8481548110610afa57634e487b7160e01b600052603260045260246000fd5b600091825260208083208784526101cb825260408085206001600160a01b038916865290925292206002818101549202909201925042906001600160401b03600160801b909104811690821611610b5757600093505050506105f2565b60028201546001600160401b039081169082161115610b80575060028101546001600160401b03165b6002820154600090610ba290600160801b90046001600160401b031642612c1e565b600185015484549192506000916301e1338091620186a091600160401b9091046001600160401b0390811691610bda91871690612be8565b610be49190612be8565b610bee9190612add565b610bf89190612add565b98975050505050505050565b610c0c611828565b610c1461186e565b6101c4546001600160a01b0316336001600160a01b031614610c735760405162461bcd60e51b81526020600482015260186024820152771c1bdbdb0e88139bdd081cdd185ad948189e481d985d5b1d60421b60448201526064016106d7565b6101c45460408051633304424960e11b8152905142926001600160a01b0316916366088492916004808301926020929190829003018186803b158015610cb857600080fd5b505afa158015610ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf091906127af565b1115610d5d5760405162461bcd60e51b815260206004820152603660248201527f706f6f6c3a206e6f7420616c6c6f7720746f20757365207468697320616674656044820152751c881d995cdd1a5b99c81d1a5b59481cdd185c9d195960521b60648201526084016106d7565b6000610d698385612a9a565b905060008111610d8b5760405162461bcd60e51b81526004016106d7906129cd565b6101c4548290610da4906001600160a01b031686611cb0565b506000610db18784611e56565b9050610dbf8783858461217f565b505050610dcc600160c955565b50505050565b610dda610e4f565b610df65760405162461bcd60e51b81526004016106d790612a4f565b61096c6122df565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610e3161186e565b610e39611828565b33610e4482826118c8565b50610895600160c955565b6000610e69600080516020612cb583398151915233610dfe565b905090565b600082815260656020526040902060010154610e8981611a93565b6108bd8383611b23565b6001600160a01b03821660009081526101ca6020908152604080832081518083019092528054808352600190910154928201839052909190610ed690600a612b40565b610ee09085612be8565b610eea9190612add565b949350505050565b610efa611828565b610f0261186e565b600033905060006101cc8481548110610f2b57634e487b7160e01b600052603260045260246000fd5b600091825260208083208784526101cb8252604080852033865290925292206002909102909101915083610f715760405162461bcd60e51b81526004016106d7906129cd565b6001820154600160801b900460ff16610fc15760405162461bcd60e51b81526020600482015260126024820152715468697320706f6f6c20697320636c6f736560701b60448201526064016106d7565b6000610fcd8486611cb0565b90506000610fdb8783611e56565b6002840154909150600160401b90046001600160401b03166110755760038301805467ffffffffffffffff1916426001600160401b0390811691821790925560028501805467ffffffffffffffff60401b1916600160401b92830217908190556001870154611051939081169290910416612ab2565b60028401805467ffffffffffffffff19166001600160401b03929092169190911790555b6002830180546001600160801b0316600160801b426001600160401b03169081026001600160c01b031691909117600160c01b919091021790558254819084906000906110c3908490612a9a565b92505081905550816101c860008282546110dd9190612a9a565b909155506110ef90508786848461217f565b505050505061093c600160c955565b6001600160a01b03821660009081526101ca6020908152604080832081518083019092528054808352600190910154928201929092529061114090600a612b40565b6020820151610ee09085612be8565b600054610100900460ff161580801561116f5750600054600160ff909116105b806111895750303b158015611189575060005460ff166001145b6111ec5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106d7565b6000805460ff19166001179055801561120f576000805461ff0019166101001790555b6112188561096e565b6001600160a01b03831661123e5760405162461bcd60e51b81526004016106d79061296f565b6001600160a01b0382166112645760405162461bcd60e51b81526004016106d79061296f565b6101c580546001600160a01b038086166001600160a01b0319928316179092556101c380548584169083161790556101c680548216331790556101c78054928716929091169190911790556112c7600080516020612cf583398151915286611c5b565b6101c35460405163095ea7b360e01b81526001600160a01b039091169063095ea7b3906112fc90309060001990600401612923565b602060405180830381600087803b15801561131657600080fd5b505af115801561132a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134e9190612720565b508015611395576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600080516020612cf58339815191526113b481611a93565b604080516080810182528581526001600160401b03808516602083019081528682168385019081526001606085018181526101cc80549283018155600052945160029091027f9a37fbd5e796e9046c2f5f7e29046a230a4ba9ada48a80535ed93a51fec5cfbc81019190915591517f9a37fbd5e796e9046c2f5f7e29046a230a4ba9ada48a80535ed93a51fec5cfbd9092018054915194511515600160801b0260ff60801b19958516600160401b026001600160801b031990931693909416929092171792909216179055517f650fdcae7b8d99fe642c583ac1cc53ad68b560fbec8801e4756567332af9a8d3906114cb908690869086909283526001600160401b03918216602084015216604082015260600190565b60405180910390a150505050565b600080516020612cf58339815191526114f181611a93565b6001600160a01b0382166115565760405162461bcd60e51b815260206004820152602660248201527f706f6f6c3a20444458207661756c742063616e6e6f74206265207a65726f206160448201526564647265737360d01b60648201526084016106d7565b506101c480546001600160a01b0319166001600160a01b0392909216919091179055565b6101c7546000906001600160a01b031615611811576101c760009054906101000a90046001600160a01b03166001600160a01b031663b4d1d7956040518163ffffffff1660e01b815260040160206040518083038186803b1580156115de57600080fd5b505afa1580156115f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161691906127af565b6101c760009054906101000a90046001600160a01b03166001600160a01b031663e56522a96040518163ffffffff1660e01b815260040160206040518083038186803b15801561166557600080fd5b505afa158015611679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169d9190612858565b6116ad9063ffffffff1642612c07565b111561171d576101c760009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561170457600080fd5b505af1158015611718573d6000803e3d6000fd5b505050505b6101c7546040805163d21220a760e01b815290516001600160a01b0390921691633ddac95391839163d21220a791600480820192602092909190829003018186803b15801561176b57600080fd5b505afa15801561177f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a3919061264a565b846040518363ffffffff1660e01b81526004016117c1929190612923565b60206040518083038186803b1580156117d957600080fd5b505afa1580156117ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f291906127af565b6101c3546105f2906001600160a01b0316836110fe565b60975460ff161561096c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106d7565b600260c95414156118c15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106d7565b600260c955565b60008281526101cb602090815260408083206001600160a01b03851684529091528120906118f68484610ad5565b905060006119038261157a565b9050600081116119255760405162461bcd60e51b81526004016106d79061298b565b6101c3546101c5546040516323b872dd60e01b81526001600160a01b03928316926323b872dd9261195f92911690889086906004016128ff565b602060405180830381600087803b15801561197957600080fd5b505af115801561198d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b19190612720565b50600283015442906001600160401b0390811690821611156119dd575060028301546001600160401b03165b6002840180546001600160401b03838116600160801b0267ffffffffffffffff60801b194292909216600160c01b02919091166001600160801b0390921691909117179055600184018054849190600090611a39908490612a9a565b9091555050604080518381526020810185905287916001600160a01b038816917fe4a5de9e0c45dc9d917564821c800ad76813de2ed7773d5dedf8ae7e0e225dfe910160405180910390a3505050505050565b600160c955565b610895813361231c565b611aa78282610dfe565b61093c5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611adf3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611b2d8282610dfe565b1561093c5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611b92612375565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051611bcc91906128eb565b60405180910390a1565b600054610100900460ff1661096c5760405162461bcd60e51b81526004016106d790612a04565b600054610100900460ff16611c245760405162461bcd60e51b81526004016106d790612a04565b61096c6123be565b600054610100900460ff16611c535760405162461bcd60e51b81526004016106d790612a04565b61096c6123f1565b61093c8282611a9d565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6101c3546040516370a0823160e01b815260009182916001600160a01b03909116906370a0823190611ce69030906004016128eb565b60206040518083038186803b158015611cfe57600080fd5b505afa158015611d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3691906127af565b6101c3546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd90611d6c908790309088906004016128ff565b602060405180830381600087803b158015611d8657600080fd5b505af1158015611d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbe9190612720565b506101c3546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611df19030906004016128eb565b60206040518083038186803b158015611e0957600080fd5b505afa158015611e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4191906127af565b9050611e4d8282612c07565b95945050505050565b6000806101cc8481548110611e7b57634e487b7160e01b600052603260045260246000fd5b600091825260208083208784526101cb825260408085203386529092529083206101c7546002909302909101935091906001600160a01b0316156120d2576101c760009054906101000a90046001600160a01b03166001600160a01b031663b4d1d7956040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0857600080fd5b505afa158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4091906127af565b6101c760009054906101000a90046001600160a01b03166001600160a01b031663e56522a96040518163ffffffff1660e01b815260040160206040518083038186803b158015611f8f57600080fd5b505afa158015611fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc79190612858565b611fd79063ffffffff1642612c07565b1115612047576101c760009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561202e57600080fd5b505af1158015612042573d6000803e3d6000fd5b505050505b6101c7546101c354604051633ddac95360e01b81526001600160a01b0392831692633ddac9539261207f929116908990600401612923565b60206040518083038186803b15801561209757600080fd5b505afa1580156120ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120cf91906127af565b90505b80156120e0578093506120fa565b6101c3546120f7906001600160a01b031686610e93565b93505b8382600001600082825461210e9190612a9a565b90915550508254825410156121765760405162461bcd60e51b815260206004820152602860248201527f706f6f6c3a206d696e696d756d207374616b696e6720616d6f756e74206e6f74604482015267081c995858da195960c21b60648201526084016106d7565b50505092915050565b60006101cc85815481106121a357634e487b7160e01b600052603260045260246000fd5b600091825260208083208884526101cb825260408085206001600160a01b038a168652909252922060028082015492029092019250600160401b90046001600160401b031661226a5760038101805467ffffffffffffffff1916426001600160401b0390811691821790925560028301805467ffffffffffffffff60401b1916600160401b92830217908190556001850154612246939081169290910416612ab2565b60028201805467ffffffffffffffff19166001600160401b03929092169190911790555b6002810180546001600160801b0316600160801b426001600160401b03169081026001600160c01b031691909117600160c01b919091021790558054839082906000906122b8908490612a9a565b92505081905550836101c860008282546122d29190612a9a565b9091555050505050505050565b6122e7611828565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611bbf3390565b6123268282610dfe565b61093c5761233381612418565b61233e83602061242a565b60405160200161234f92919061287c565b60408051601f198184030181529082905262461bcd60e51b82526106d79160040161293c565b60975460ff1661096c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106d7565b600054610100900460ff166123e55760405162461bcd60e51b81526004016106d790612a04565b6097805460ff19169055565b600054610100900460ff16611a8c5760405162461bcd60e51b81526004016106d790612a04565b60606105f26001600160a01b03831660145b60606000612439836002612be8565b612444906002612a9a565b6001600160401b0381111561246957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612493576020820181803683370190505b509050600360fc1b816000815181106124bc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106124f957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061251d846002612be8565b612528906001612a9a565b90505b60018111156125bc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061256a57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061258e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936125b581612c72565b905061252b565b50831561260b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106d7565b9392505050565b80356001600160401b038116811461262957600080fd5b919050565b60006020828403121561263f578081fd5b813561260b81612c9f565b60006020828403121561265b578081fd5b815161260b81612c9f565b6000806000806080858703121561267b578283fd5b843561268681612c9f565b9350602085013561269681612c9f565b925060408501356126a681612c9f565b915060608501356126b681612c9f565b939692955090935050565b600080604083850312156126d3578182fd5b82356126de81612c9f565b946020939093013593505050565b600080600060608486031215612700578283fd5b833561270b81612c9f565b95602085013595506040909401359392505050565b600060208284031215612731578081fd5b8151801515811461260b578182fd5b600060208284031215612751578081fd5b5035919050565b6000806040838503121561276a578182fd5b82359150602083013561277c81612c9f565b809150509250929050565b600060208284031215612798578081fd5b81356001600160e01b03198116811461260b578182fd5b6000602082840312156127c0578081fd5b5051919050565b600080604083850312156127d9578182fd5b50508035926020909101359150565b600080600080608085870312156127fd578182fd5b84359350602085013592506040850135915060608501356126b681612c9f565b600080600060608486031215612831578081fd5b8335925061284160208501612612565b915061284f60408501612612565b90509250925092565b600060208284031215612869578081fd5b815163ffffffff8116811461260b578182fd5b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8152600083516128ae816017850160208801612c46565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516128df816028840160208801612c46565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b602081526000825180602084015261295b816040850160208701612c46565b601f01601f19169190910160400192915050565b6020808252600290820152615a4160f01b604082015260600190565b60208082526022908201527f706f6f6c3a20726577617264206e6f7420656e6f75676820746f2068617276656040820152611cdd60f21b606082015260800190565b6020808252601b908201527f706f6f6c3a20616d6f756e742063616e6e6f74206265207a65726f0000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b60008219821115612aad57612aad612c89565b500190565b60006001600160401b03808316818516808303821115612ad457612ad4612c89565b01949350505050565b600082612af857634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115612b38578160001904821115612b1e57612b1e612c89565b80851615612b2b57918102915b93841c9390800290612b02565b509250929050565b600061260b8383600082612b56575060016105f2565b81612b63575060006105f2565b8160018114612b795760028114612b8357612b9f565b60019150506105f2565b60ff841115612b9457612b94612c89565b50506001821b6105f2565b5060208310610133831016604e8410600b8410161715612bc2575081810a6105f2565b612bcc8383612afd565b8060001904821115612be057612be0612c89565b029392505050565b6000816000190483118215151615612c0257612c02612c89565b500290565b600082821015612c1957612c19612c89565b500390565b60006001600160401b0383811690831681811015612c3e57612c3e612c89565b039392505050565b60005b83811015612c61578181015183820152602001612c49565b83811115610dcc5750506000910152565b600081612c8157612c81612c89565b506000190190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461089557600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862ad2e4c2619ea6e0faebc405d89445161c041e30fe03373ea0473da142d57d4514a2646970667358221220e077706216fa647b29a5af728810b56d50242cfe492d7a1dcf66072798c0cf9e64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f75760003560e01c80638072e60f11610120578063e2bbb158116100b8578063f851a4401161007c578063f851a44014610560578063f8c8765e14610574578063f9e9428f14610587578063fbd695bf1461059a578063fbfa77cf146105ad57600080fd5b8063e2bbb158146104fc578063e58378bb1461050f578063e63ab1e914610524578063f2e0348214610539578063f7c618c11461054c57600080fd5b80638072e60f1461047b578063817b1cd21461048e5780638456cb591461049857806391d14854146104a0578063a217fddf146104b3578063ae169a50146104bb578063b6db75a0146104ce578063d547741f146104d6578063e1988ca3146104e957600080fd5b80635a3a85cb116101935780635a3a85cb146103055780635c975abb1461034257806361d027b31461034d57806362d6306f1461036e578063657efde6146103815780636ca63297146103945780636eb1e05a146103a757806378ecb4ee146104595780637dc0d1d01461046757600080fd5b806301ffc9a7146101fc578063022f2354146102245780631526fe27146102475780632204d5ee1461028c578063248a9ca31461029f5780632e1a7d4d146102c25780632f2ff15d146102d757806336568abe146102ea5780633f4ba83a146102fd575b600080fd5b61020f61020a366004612787565b6105c1565b60405190151581526020015b60405180910390f35b610239600080516020612cf583398151915281565b60405190815260200161021b565b61025a610255366004612740565b6105f8565b60405161021b94939291909384526001600160401b039283166020850152911660408301521515606082015260800190565b61023961029a366004612740565b610648565b6102396102ad366004612740565b60009081526065602052604090206001015490565b6102d56102d0366004612740565b610653565b005b6102d56102e5366004612758565b610898565b6102d56102f8366004612758565b6108c2565b6102d5610940565b61032d61031336600461262e565b6101ca602052600090815260409020805460019091015482565b6040805192835260208301919091520161021b565b60975460ff1661020f565b6101c554610361906001600160a01b031681565b60405161021b91906128eb565b6102d561037c36600461262e565b61096e565b6102d561038f3660046126ec565b610a97565b6102396103a2366004612758565b610ad5565b6104146103b5366004612758565b6101cb6020908152600092835260408084209091529082529020805460018201546002830154600390930154919290916001600160401b0380831692600160401b8104821692600160801b8204831692600160c01b9092048216911687565b6040805197885260208801969096526001600160401b0394851695870195909552918316606086015282166080850152811660a08401521660c082015260e00161021b565b6101c95461020f9060ff1681565b6101c754610361906001600160a01b031681565b6102d56104893660046127e8565b610c04565b6102396101c85481565b6102d5610dd2565b61020f6104ae366004612758565b610dfe565b610239600081565b6102d56104c9366004612740565b610e29565b61020f610e4f565b6102d56104e4366004612758565b610e6e565b6102396104f73660046126c1565b610e93565b6102d561050a3660046127c7565b610ef2565b610239600080516020612cb583398151915281565b610239600080516020612cd583398151915281565b6102396105473660046126c1565b6110fe565b6101c354610361906001600160a01b031681565b6101c654610361906001600160a01b031681565b6102d5610582366004612666565b61114f565b6102d561059536600461281d565b61139c565b6102d56105a836600461262e565b6114d9565b6101c454610361906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806105f257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6101cc818154811061060957600080fd5b6000918252602090912060029091020180546001909101549091506001600160401b0380821691600160401b810490911690600160801b900460ff1684565b60006105f28261157a565b61065b611828565b61066361186e565b60008181526101cb6020908152604080832033808552925290912080546106e05760405162461bcd60e51b815260206004820152602660248201527f706f6f6c3a20746f74616c207374616b6573206d75737420677265617465722060448201526507468616e20360d41b60648201526084015b60405180910390fd5b60028101546001600160401b0316421161073c5760405162461bcd60e51b815260206004820152601b60248201527f706f6f6c3a20647565206461746520726571206e6f74206d656574000000000060448201526064016106d7565b61074683836118c8565b6000610755826000015461157a565b9050600081116107775760405162461bcd60e51b81526004016106d79061298b565b6101c3546101c5546040516323b872dd60e01b81526001600160a01b03928316926323b872dd926107b192911690879086906004016128ff565b602060405180830381600087803b1580156107cb57600080fd5b505af11580156107df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108039190612720565b5060008481526101cb602090815260408083206001600160a01b0387168085529083528184208481556001810185905560028101949094556003909301805467ffffffffffffffff1916905584548151858152928301528692917f992aa94ba074f022eacd638616e322641ce0911ddc743e0dc48c338afafc1ff0910160405180910390a3505050610895600160c955565b50565b6000828152606560205260409020600101546108b381611a93565b6108bd8383611a9d565b505050565b6001600160a01b03811633146109325760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106d7565b61093c8282611b23565b5050565b610948610e4f565b6109645760405162461bcd60e51b81526004016106d790612a4f565b61096c611b8a565b565b600054610100900460ff166109955760405162461bcd60e51b81526004016106d790612a04565b6001600160a01b0381166109eb5760405162461bcd60e51b815260206004820181905260248201527f4f776e65722063616e6e6f7420626520746865207a65726f206164647265737360448201526064016106d7565b6109f3611bd6565b6109fb611bfd565b610a03611c2c565b610a1b600080516020612cb583398151915282611c5b565b610a33600080516020612cd583398151915282611c5b565b610a59600080516020612cf5833981519152600080516020612cb5833981519152611c65565b610a7f600080516020612cd5833981519152600080516020612cb5833981519152611c65565b610895600080516020612cb583398151915280611c65565b600080516020612cf5833981519152610aaf81611a93565b506001600160a01b0390921660009081526101ca60205260409020600181019190915555565b6000806101cc8481548110610afa57634e487b7160e01b600052603260045260246000fd5b600091825260208083208784526101cb825260408085206001600160a01b038916865290925292206002818101549202909201925042906001600160401b03600160801b909104811690821611610b5757600093505050506105f2565b60028201546001600160401b039081169082161115610b80575060028101546001600160401b03165b6002820154600090610ba290600160801b90046001600160401b031642612c1e565b600185015484549192506000916301e1338091620186a091600160401b9091046001600160401b0390811691610bda91871690612be8565b610be49190612be8565b610bee9190612add565b610bf89190612add565b98975050505050505050565b610c0c611828565b610c1461186e565b6101c4546001600160a01b0316336001600160a01b031614610c735760405162461bcd60e51b81526020600482015260186024820152771c1bdbdb0e88139bdd081cdd185ad948189e481d985d5b1d60421b60448201526064016106d7565b6101c45460408051633304424960e11b8152905142926001600160a01b0316916366088492916004808301926020929190829003018186803b158015610cb857600080fd5b505afa158015610ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf091906127af565b1115610d5d5760405162461bcd60e51b815260206004820152603660248201527f706f6f6c3a206e6f7420616c6c6f7720746f20757365207468697320616674656044820152751c881d995cdd1a5b99c81d1a5b59481cdd185c9d195960521b60648201526084016106d7565b6000610d698385612a9a565b905060008111610d8b5760405162461bcd60e51b81526004016106d7906129cd565b6101c4548290610da4906001600160a01b031686611cb0565b506000610db18784611e56565b9050610dbf8783858461217f565b505050610dcc600160c955565b50505050565b610dda610e4f565b610df65760405162461bcd60e51b81526004016106d790612a4f565b61096c6122df565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610e3161186e565b610e39611828565b33610e4482826118c8565b50610895600160c955565b6000610e69600080516020612cb583398151915233610dfe565b905090565b600082815260656020526040902060010154610e8981611a93565b6108bd8383611b23565b6001600160a01b03821660009081526101ca6020908152604080832081518083019092528054808352600190910154928201839052909190610ed690600a612b40565b610ee09085612be8565b610eea9190612add565b949350505050565b610efa611828565b610f0261186e565b600033905060006101cc8481548110610f2b57634e487b7160e01b600052603260045260246000fd5b600091825260208083208784526101cb8252604080852033865290925292206002909102909101915083610f715760405162461bcd60e51b81526004016106d7906129cd565b6001820154600160801b900460ff16610fc15760405162461bcd60e51b81526020600482015260126024820152715468697320706f6f6c20697320636c6f736560701b60448201526064016106d7565b6000610fcd8486611cb0565b90506000610fdb8783611e56565b6002840154909150600160401b90046001600160401b03166110755760038301805467ffffffffffffffff1916426001600160401b0390811691821790925560028501805467ffffffffffffffff60401b1916600160401b92830217908190556001870154611051939081169290910416612ab2565b60028401805467ffffffffffffffff19166001600160401b03929092169190911790555b6002830180546001600160801b0316600160801b426001600160401b03169081026001600160c01b031691909117600160c01b919091021790558254819084906000906110c3908490612a9a565b92505081905550816101c860008282546110dd9190612a9a565b909155506110ef90508786848461217f565b505050505061093c600160c955565b6001600160a01b03821660009081526101ca6020908152604080832081518083019092528054808352600190910154928201929092529061114090600a612b40565b6020820151610ee09085612be8565b600054610100900460ff161580801561116f5750600054600160ff909116105b806111895750303b158015611189575060005460ff166001145b6111ec5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106d7565b6000805460ff19166001179055801561120f576000805461ff0019166101001790555b6112188561096e565b6001600160a01b03831661123e5760405162461bcd60e51b81526004016106d79061296f565b6001600160a01b0382166112645760405162461bcd60e51b81526004016106d79061296f565b6101c580546001600160a01b038086166001600160a01b0319928316179092556101c380548584169083161790556101c680548216331790556101c78054928716929091169190911790556112c7600080516020612cf583398151915286611c5b565b6101c35460405163095ea7b360e01b81526001600160a01b039091169063095ea7b3906112fc90309060001990600401612923565b602060405180830381600087803b15801561131657600080fd5b505af115801561132a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134e9190612720565b508015611395576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600080516020612cf58339815191526113b481611a93565b604080516080810182528581526001600160401b03808516602083019081528682168385019081526001606085018181526101cc80549283018155600052945160029091027f9a37fbd5e796e9046c2f5f7e29046a230a4ba9ada48a80535ed93a51fec5cfbc81019190915591517f9a37fbd5e796e9046c2f5f7e29046a230a4ba9ada48a80535ed93a51fec5cfbd9092018054915194511515600160801b0260ff60801b19958516600160401b026001600160801b031990931693909416929092171792909216179055517f650fdcae7b8d99fe642c583ac1cc53ad68b560fbec8801e4756567332af9a8d3906114cb908690869086909283526001600160401b03918216602084015216604082015260600190565b60405180910390a150505050565b600080516020612cf58339815191526114f181611a93565b6001600160a01b0382166115565760405162461bcd60e51b815260206004820152602660248201527f706f6f6c3a20444458207661756c742063616e6e6f74206265207a65726f206160448201526564647265737360d01b60648201526084016106d7565b506101c480546001600160a01b0319166001600160a01b0392909216919091179055565b6101c7546000906001600160a01b031615611811576101c760009054906101000a90046001600160a01b03166001600160a01b031663b4d1d7956040518163ffffffff1660e01b815260040160206040518083038186803b1580156115de57600080fd5b505afa1580156115f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161691906127af565b6101c760009054906101000a90046001600160a01b03166001600160a01b031663e56522a96040518163ffffffff1660e01b815260040160206040518083038186803b15801561166557600080fd5b505afa158015611679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169d9190612858565b6116ad9063ffffffff1642612c07565b111561171d576101c760009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561170457600080fd5b505af1158015611718573d6000803e3d6000fd5b505050505b6101c7546040805163d21220a760e01b815290516001600160a01b0390921691633ddac95391839163d21220a791600480820192602092909190829003018186803b15801561176b57600080fd5b505afa15801561177f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a3919061264a565b846040518363ffffffff1660e01b81526004016117c1929190612923565b60206040518083038186803b1580156117d957600080fd5b505afa1580156117ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f291906127af565b6101c3546105f2906001600160a01b0316836110fe565b60975460ff161561096c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106d7565b600260c95414156118c15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106d7565b600260c955565b60008281526101cb602090815260408083206001600160a01b03851684529091528120906118f68484610ad5565b905060006119038261157a565b9050600081116119255760405162461bcd60e51b81526004016106d79061298b565b6101c3546101c5546040516323b872dd60e01b81526001600160a01b03928316926323b872dd9261195f92911690889086906004016128ff565b602060405180830381600087803b15801561197957600080fd5b505af115801561198d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b19190612720565b50600283015442906001600160401b0390811690821611156119dd575060028301546001600160401b03165b6002840180546001600160401b03838116600160801b0267ffffffffffffffff60801b194292909216600160c01b02919091166001600160801b0390921691909117179055600184018054849190600090611a39908490612a9a565b9091555050604080518381526020810185905287916001600160a01b038816917fe4a5de9e0c45dc9d917564821c800ad76813de2ed7773d5dedf8ae7e0e225dfe910160405180910390a3505050505050565b600160c955565b610895813361231c565b611aa78282610dfe565b61093c5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611adf3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611b2d8282610dfe565b1561093c5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611b92612375565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051611bcc91906128eb565b60405180910390a1565b600054610100900460ff1661096c5760405162461bcd60e51b81526004016106d790612a04565b600054610100900460ff16611c245760405162461bcd60e51b81526004016106d790612a04565b61096c6123be565b600054610100900460ff16611c535760405162461bcd60e51b81526004016106d790612a04565b61096c6123f1565b61093c8282611a9d565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6101c3546040516370a0823160e01b815260009182916001600160a01b03909116906370a0823190611ce69030906004016128eb565b60206040518083038186803b158015611cfe57600080fd5b505afa158015611d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3691906127af565b6101c3546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd90611d6c908790309088906004016128ff565b602060405180830381600087803b158015611d8657600080fd5b505af1158015611d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbe9190612720565b506101c3546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611df19030906004016128eb565b60206040518083038186803b158015611e0957600080fd5b505afa158015611e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4191906127af565b9050611e4d8282612c07565b95945050505050565b6000806101cc8481548110611e7b57634e487b7160e01b600052603260045260246000fd5b600091825260208083208784526101cb825260408085203386529092529083206101c7546002909302909101935091906001600160a01b0316156120d2576101c760009054906101000a90046001600160a01b03166001600160a01b031663b4d1d7956040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0857600080fd5b505afa158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4091906127af565b6101c760009054906101000a90046001600160a01b03166001600160a01b031663e56522a96040518163ffffffff1660e01b815260040160206040518083038186803b158015611f8f57600080fd5b505afa158015611fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc79190612858565b611fd79063ffffffff1642612c07565b1115612047576101c760009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561202e57600080fd5b505af1158015612042573d6000803e3d6000fd5b505050505b6101c7546101c354604051633ddac95360e01b81526001600160a01b0392831692633ddac9539261207f929116908990600401612923565b60206040518083038186803b15801561209757600080fd5b505afa1580156120ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120cf91906127af565b90505b80156120e0578093506120fa565b6101c3546120f7906001600160a01b031686610e93565b93505b8382600001600082825461210e9190612a9a565b90915550508254825410156121765760405162461bcd60e51b815260206004820152602860248201527f706f6f6c3a206d696e696d756d207374616b696e6720616d6f756e74206e6f74604482015267081c995858da195960c21b60648201526084016106d7565b50505092915050565b60006101cc85815481106121a357634e487b7160e01b600052603260045260246000fd5b600091825260208083208884526101cb825260408085206001600160a01b038a168652909252922060028082015492029092019250600160401b90046001600160401b031661226a5760038101805467ffffffffffffffff1916426001600160401b0390811691821790925560028301805467ffffffffffffffff60401b1916600160401b92830217908190556001850154612246939081169290910416612ab2565b60028201805467ffffffffffffffff19166001600160401b03929092169190911790555b6002810180546001600160801b0316600160801b426001600160401b03169081026001600160c01b031691909117600160c01b919091021790558054839082906000906122b8908490612a9a565b92505081905550836101c860008282546122d29190612a9a565b9091555050505050505050565b6122e7611828565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611bbf3390565b6123268282610dfe565b61093c5761233381612418565b61233e83602061242a565b60405160200161234f92919061287c565b60408051601f198184030181529082905262461bcd60e51b82526106d79160040161293c565b60975460ff1661096c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106d7565b600054610100900460ff166123e55760405162461bcd60e51b81526004016106d790612a04565b6097805460ff19169055565b600054610100900460ff16611a8c5760405162461bcd60e51b81526004016106d790612a04565b60606105f26001600160a01b03831660145b60606000612439836002612be8565b612444906002612a9a565b6001600160401b0381111561246957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612493576020820181803683370190505b509050600360fc1b816000815181106124bc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106124f957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061251d846002612be8565b612528906001612a9a565b90505b60018111156125bc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061256a57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061258e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936125b581612c72565b905061252b565b50831561260b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106d7565b9392505050565b80356001600160401b038116811461262957600080fd5b919050565b60006020828403121561263f578081fd5b813561260b81612c9f565b60006020828403121561265b578081fd5b815161260b81612c9f565b6000806000806080858703121561267b578283fd5b843561268681612c9f565b9350602085013561269681612c9f565b925060408501356126a681612c9f565b915060608501356126b681612c9f565b939692955090935050565b600080604083850312156126d3578182fd5b82356126de81612c9f565b946020939093013593505050565b600080600060608486031215612700578283fd5b833561270b81612c9f565b95602085013595506040909401359392505050565b600060208284031215612731578081fd5b8151801515811461260b578182fd5b600060208284031215612751578081fd5b5035919050565b6000806040838503121561276a578182fd5b82359150602083013561277c81612c9f565b809150509250929050565b600060208284031215612798578081fd5b81356001600160e01b03198116811461260b578182fd5b6000602082840312156127c0578081fd5b5051919050565b600080604083850312156127d9578182fd5b50508035926020909101359150565b600080600080608085870312156127fd578182fd5b84359350602085013592506040850135915060608501356126b681612c9f565b600080600060608486031215612831578081fd5b8335925061284160208501612612565b915061284f60408501612612565b90509250925092565b600060208284031215612869578081fd5b815163ffffffff8116811461260b578182fd5b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8152600083516128ae816017850160208801612c46565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516128df816028840160208801612c46565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b602081526000825180602084015261295b816040850160208701612c46565b601f01601f19169190910160400192915050565b6020808252600290820152615a4160f01b604082015260600190565b60208082526022908201527f706f6f6c3a20726577617264206e6f7420656e6f75676820746f2068617276656040820152611cdd60f21b606082015260800190565b6020808252601b908201527f706f6f6c3a20616d6f756e742063616e6e6f74206265207a65726f0000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b60008219821115612aad57612aad612c89565b500190565b60006001600160401b03808316818516808303821115612ad457612ad4612c89565b01949350505050565b600082612af857634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115612b38578160001904821115612b1e57612b1e612c89565b80851615612b2b57918102915b93841c9390800290612b02565b509250929050565b600061260b8383600082612b56575060016105f2565b81612b63575060006105f2565b8160018114612b795760028114612b8357612b9f565b60019150506105f2565b60ff841115612b9457612b94612c89565b50506001821b6105f2565b5060208310610133831016604e8410600b8410161715612bc2575081810a6105f2565b612bcc8383612afd565b8060001904821115612be057612be0612c89565b029392505050565b6000816000190483118215151615612c0257612c02612c89565b500290565b600082821015612c1957612c19612c89565b500390565b60006001600160401b0383811690831681811015612c3e57612c3e612c89565b039392505050565b60005b83811015612c61578181015183820152602001612c49565b83811115610dcc5750506000910152565b600081612c8157612c81612c89565b506000190190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461089557600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862ad2e4c2619ea6e0faebc405d89445161c041e30fe03373ea0473da142d57d4514a2646970667358221220e077706216fa647b29a5af728810b56d50242cfe492d7a1dcf66072798c0cf9e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getStakingAmountInUSD(address,uint256)": {
        "details": "Get Staking token amount in offered currencies",
        "params": {
          "_amount": "Amount of purchase token"
        },
        "returns": {
          "_0": "Return amount of respective IDO token"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPool(uint256,uint64,uint64)": {
        "notice": "----------------------------------- ---------- Core Function ---------- -----------------------------------"
      },
      "pause()": {
        "notice": "----------------------------------- --------- Pause Function ---------- -----------------------------------"
      },
      "setDDXVault(address)": {
        "notice": "----------------------------------- --------- Update Function --------- -----------------------------------"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 415,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 418,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2044,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2848,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 598,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 703,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 718,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 776,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4441,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "__gap1",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4445,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "__gap2",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4449,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "__gap3",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4453,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "__gap4",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4587,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "rewardToken",
        "offset": 0,
        "slot": "451",
        "type": "t_contract(IERC20)8961"
      },
      {
        "astId": 4590,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "vault",
        "offset": 0,
        "slot": "452",
        "type": "t_contract(IDDXVault)8923"
      },
      {
        "astId": 4592,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "treasury",
        "offset": 0,
        "slot": "453",
        "type": "t_address"
      },
      {
        "astId": 4594,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "admin",
        "offset": 0,
        "slot": "454",
        "type": "t_address"
      },
      {
        "astId": 4596,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "oracle",
        "offset": 0,
        "slot": "455",
        "type": "t_address"
      },
      {
        "astId": 4598,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "totalStaked",
        "offset": 0,
        "slot": "456",
        "type": "t_uint256"
      },
      {
        "astId": 4600,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "emergencyCancelled",
        "offset": 0,
        "slot": "457",
        "type": "t_bool"
      },
      {
        "astId": 4605,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "offeredCurrencies",
        "offset": 0,
        "slot": "458",
        "type": "t_mapping(t_address,t_struct(OfferedCurrency)4572_storage)"
      },
      {
        "astId": 4612,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "stakingInfos",
        "offset": 0,
        "slot": "459",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakingInfo)4558_storage))"
      },
      {
        "astId": 4616,
        "contract": "contracts/DDXStaking.sol:DDXStaking",
        "label": "poolInfo",
        "offset": 0,
        "slot": "460",
        "type": "t_array(t_struct(PoolInfo)4567_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)4567_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)4567_storage",
        "encoding": "dynamic_array",
        "label": "struct DDXStaking.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDDXVault)8923": {
        "encoding": "inplace",
        "label": "contract IDDXVault",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)8961": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(OfferedCurrency)4572_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DDXStaking.OfferedCurrency)",
        "numberOfBytes": "32",
        "value": "t_struct(OfferedCurrency)4572_storage"
      },
      "t_mapping(t_address,t_struct(StakingInfo)4558_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DDXStaking.StakingInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingInfo)4558_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakingInfo)4558_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct DDXStaking.StakingInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(StakingInfo)4558_storage)"
      },
      "t_struct(OfferedCurrency)4572_storage": {
        "encoding": "inplace",
        "label": "struct DDXStaking.OfferedCurrency",
        "members": [
          {
            "astId": 4569,
            "contract": "contracts/DDXStaking.sol:DDXStaking",
            "label": "decimal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4571,
            "contract": "contracts/DDXStaking.sol:DDXStaking",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfo)4567_storage": {
        "encoding": "inplace",
        "label": "struct DDXStaking.PoolInfo",
        "members": [
          {
            "astId": 4560,
            "contract": "contracts/DDXStaking.sol:DDXStaking",
            "label": "minDepositInUSD",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4562,
            "contract": "contracts/DDXStaking.sol:DDXStaking",
            "label": "period",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 4564,
            "contract": "contracts/DDXStaking.sol:DDXStaking",
            "label": "APR",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 4566,
            "contract": "contracts/DDXStaking.sol:DDXStaking",
            "label": "status",
            "offset": 16,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/DDXStaking.sol:DDXStaking",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/DDXStaking.sol:DDXStaking",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StakingInfo)4558_storage": {
        "encoding": "inplace",
        "label": "struct DDXStaking.StakingInfo",
        "members": [
          {
            "astId": 4545,
            "contract": "contracts/DDXStaking.sol:DDXStaking",
            "label": "totalStakesInUSD",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4547,
            "contract": "contracts/DDXStaking.sol:DDXStaking",
            "label": "claimedInterest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4549,
            "contract": "contracts/DDXStaking.sol:DDXStaking",
            "label": "dueDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 4551,
            "contract": "contracts/DDXStaking.sol:DDXStaking",
            "label": "timeStake",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 4553,
            "contract": "contracts/DDXStaking.sol:DDXStaking",
            "label": "lastClaimedTime",
            "offset": 16,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 4555,
            "contract": "contracts/DDXStaking.sol:DDXStaking",
            "label": "lastUpdatedTime",
            "offset": 24,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 4557,
            "contract": "contracts/DDXStaking.sol:DDXStaking",
            "label": "createdAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}