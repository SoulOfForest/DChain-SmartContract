{
  "address": "0x9BE65A1CC052F18Ab559BF1Da9eB5EA22e2B138F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_extraRewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInUSD",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInUSD",
          "type": "uint256"
        }
      ],
      "name": "RewardHarvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingAmount",
          "type": "uint256"
        }
      ],
      "name": "StakingContractCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UnPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedStakeTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minimumAmountInUSD",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "created",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetPrices",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "commissionInterestLevels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraRewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackRewardTokenPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getStakingAmountByPegToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getStakingAmountInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestPerSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "joinByReferral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maximumEarningsInPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumStakingAmountInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "offeredCurrencies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "decimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "pendingRewardInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referredBy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeToken",
          "type": "address"
        }
      ],
      "name": "setAllowedStakeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pegToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setAssetOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimal",
          "type": "uint256"
        }
      ],
      "name": "setOfferedCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingContracts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalStakesInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "lastClaimedTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "lastUpdatedTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "lastTimeDeposited",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalReferralInvitations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "updateAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8d4913a80fee77cee877151e683ee7b41ce36dade59a9013378f45ed0495fe93",
  "receipt": {
    "to": null,
    "from": "0x5d20cb3A06266eed62e518eBD58aC74b0b0f2d29",
    "contractAddress": "0x9BE65A1CC052F18Ab559BF1Da9eB5EA22e2B138F",
    "transactionIndex": 1,
    "gasUsed": "41166827",
    "logsBloom": "0x
    "blockHash": "0xd76095f13347b47868b1f8d399b1ef1115642fe0134998369a8f61258ada182b",
    "transactionHash": "0x8d4913a80fee77cee877151e683ee7b41ce36dade59a9013378f45ed0495fe93",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 3338180,
        "transactionHash": "0x8d4913a80fee77cee877151e683ee7b41ce36dade59a9013378f45ed0495fe93",
        "address": "0x9BE65A1CC052F18Ab559BF1Da9eB5EA22e2B138F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005d20cb3a06266eed62e518ebd58ac74b0b0f2d29"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd76095f13347b47868b1f8d399b1ef1115642fe0134998369a8f61258ada182b"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 3338180,
        "transactionHash": "0x8d4913a80fee77cee877151e683ee7b41ce36dade59a9013378f45ed0495fe93",
        "address": "0xCBe44ab8241F07946acAfcd3bCD9C5DcA81084f7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000009be65a1cc052f18ab559bf1da9eb5ea22e2b138f",
          "0x0000000000000000000000009be65a1cc052f18ab559bf1da9eb5ea22e2b138f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0xd76095f13347b47868b1f8d399b1ef1115642fe0134998369a8f61258ada182b"
      }
    ],
    "blockNumber": 3338180,
    "cumulativeGasUsed": "41166827",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5d20cb3A06266eed62e518eBD58aC74b0b0f2d29",
    "0xCBe44ab8241F07946acAfcd3bCD9C5DcA81084f7",
    "0xCBe44ab8241F07946acAfcd3bCD9C5DcA81084f7"
  ],
  "solcInputHash": "8aa3d6e78435b8c0fb94bd8a32a8fde2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_extraRewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInUSD\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInUSD\",\"type\":\"uint256\"}],\"name\":\"RewardHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"}],\"name\":\"StakingContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UnPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedStakeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumAmountInUSD\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetPrices\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commissionInterestLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraRewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackRewardTokenPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getStakingAmountByPegToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getStakingAmountInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestPerSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"joinByReferral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumEarningsInPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakingAmountInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"offeredCurrencies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingRewardInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referredBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"setAllowedStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pegToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setAssetOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"setOfferedCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakesInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lastClaimedTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastUpdatedTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastTimeDeposited\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReferralInvitations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getStakingAmountInUSD(address,uint256)\":{\"details\":\"Get Staking token amount in offered currencies\",\"params\":{\"_amount\":\"Amount of purchase token\"},\"returns\":{\"_0\":\"Return amount of respective IDO token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"Pause()\":{\"notice\":\"----------------------------------- --------- Pause Function ---------- -----------------------------------\"},\"deposit(uint256,address,address)\":{\"notice\":\"----------------------------------- ---------- Core Function ---------- -----------------------------------\"},\"joinByReferral(address)\":{\"notice\":\"----------------------------------- ---------- View Function ---------- -----------------------------------\"},\"setAssetOracle(address,address)\":{\"notice\":\"----------------------------------- --------- Update Function --------- -----------------------------------\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DWStaking.sol\":\"DWStaking\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DWStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IOracleSimple.sol\\\";\\nimport \\\"./interfaces/IDChainStaking.sol\\\";\\n\\n\\ncontract DWStaking is IDChainStaking, Ownable, Pausable, ReentrancyGuard {\\n    struct StakingInfo {\\n        uint256 totalStakesInUSD;\\n        uint256 claimedInterest;\\n        uint64 lastClaimedTime;\\n        uint64 lastUpdatedTime;\\n        uint64 lastTimeDeposited;\\n    }\\n\\n    struct StakeToken {\\n        uint256 minimumAmountInUSD;\\n        bool created;\\n    }\\n\\n    struct OfferedCurrency {\\n        uint256 decimal;\\n        uint256 rate;\\n    }\\n\\n    uint64 private constant INTEREST_RATE_PRECISION_POINT = (10 ** 18); \\n    uint32 private constant ONE_DAY_IN_SECONDS = 1 days;\\n    uint32 private constant ONE_YEAR_IN_SECONDS = 365 days;\\n\\n    address public treasury;\\n\\n    IERC20 public rewardToken;\\n    IERC20 public extraRewardToken;\\n    \\n    address public admin;\\n\\n    uint256 public totalStaked;\\n    uint256 public minimumStakingAmountInUSD; \\n    uint256 public maximumEarningsInPercent;\\n\\n    uint256 public fallbackRewardTokenPriceInUSD;\\n\\n    uint256 public interestPerSeconds;\\n    uint256 public directInterest;\\n    \\n    uint256[9] public commissionInterestLevels;\\n\\n    bool public poolStatus;\\n\\n    // Asset token -> Offered Currency (to $)\\n    mapping(address => OfferedCurrency) public offeredCurrencies;\\n    mapping(address => StakeToken) public allowedStakeTokens;\\n    // Asset token => oracle\\n    mapping(address => address) public assetPrices;\\n    // referrer -> number of F1s\\n    mapping(address => uint256) public totalReferralInvitations;\\n    // sender -> referrer \\n    mapping(address => address) public referredBy;\\n    // sender -> current staking infos\\n    mapping(address => StakingInfo) public stakingContracts;\\n\\n    event Deposited(address indexed user, address indexed stakeToken, address indexed referrer, uint256 amount, uint256 amountInUSD);\\n    event StakingContractCreated(address indexed user, address indexed referrer, uint indexed contractId, uint stakingAmount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event RewardHarvested(address indexed claimer, uint256 amount, uint256 amountInUSD);\\n\\n    constructor(address _treasury, IERC20 _rewardToken, IERC20 _extraRewardToken) {\\n        /// @dev: ZA - Zero address\\n        require(_treasury != address(0), \\\"ZA\\\");\\n        require(address(_rewardToken) != address(0), \\\"ZA\\\");\\n\\n        treasury = _treasury;\\n        rewardToken = _rewardToken;\\n        extraRewardToken = _extraRewardToken;\\n        admin = msg.sender;\\n        poolStatus = true;\\n\\n        /// Commission for the invitation and only get once\\n        commissionInterestLevels = [\\n            1500, // 15%\\n            1000, // 10%\\n            500,  // 5%\\n            500,  // 5%\\n            500,  // 5%\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n\\n\\n\\n        interestPerSeconds = 3086419753086; // 8% - 1 month\\n        directInterest = 50000000000000000; // 5%\\n        fallbackRewardTokenPriceInUSD = 20000; // 0.02 USD (6 Decimals)\\n        minimumStakingAmountInUSD = 100 * (10 ** 6); // Minimum will be 100$\\n        maximumEarningsInPercent = 2000000000000000000; // 200%\\n\\n        // Max approve for transfer from \\n        rewardToken.approve(address(this), type(uint256).max);\\n    }\\n\\n    /// -----------------------------------\\n    /// ---------- View Function ----------\\n    /// -----------------------------------\\n\\n    function joinByReferral(address _user) external view returns(bool) {\\n        return referredBy[_user] != address(0);\\n    }\\n\\n    /// -----------------------------------\\n    /// --------- Update Function ---------\\n    /// -----------------------------------\\n\\n    function setAssetOracle(address _pegToken, address _oracle) external {\\n        assetPrices[_pegToken] = _oracle;\\n    }\\n\\n    // how to convert from 1 Token - to $\\n    function setOfferedCurrency(address _currency, uint _rate, uint _decimal) external {\\n        OfferedCurrency storage offeredCurrency = offeredCurrencies[_currency];\\n        offeredCurrency.rate = _rate;\\n        offeredCurrency.decimal = _decimal;\\n    }\\n\\n    function setAllowedStakeToken(address _stakeToken) external onlyOwner {\\n        StakeToken storage stakeToken = allowedStakeTokens[_stakeToken];\\n        require(!stakeToken.created, \\\"Allowed token is already existed!\\\");\\n        stakeToken.created = true;\\n    }\\n\\n    function updateAdmin(address _admin) external onlyOwner {\\n        admin = _admin;\\n    }\\n\\n    /// -----------------------------------\\n    /// ---------- Core Function ----------\\n    /// -----------------------------------\\n\\n    function deposit(uint256 amount, address stakeToken, address referrer) external whenNotPaused {\\n        address sender = msg.sender;\\n\\n        require(amount > 0, \\\"pool: amount cannot be zero\\\");\\n        require(sender != address(0), \\\"pool: stake address can not be zero address\\\");\\n\\n        StakingInfo storage stakingInfo = stakingContracts[sender];\\n\\n        // Calculating existing remaining reward to the investor \\n        uint256 rewardsInUSD = pendingRewardInUSD(sender);\\n        uint256 rewardsInRewardTokens = _convertUSDToRewardToken(rewardsInUSD);\\n\\n        if (rewardsInRewardTokens > 0) {\\n            rewardToken.transferFrom(treasury, sender, rewardsInRewardTokens);\\n            stakingInfo.claimedInterest += rewardsInUSD;\\n        }\\n\\n        // Forward user tokens to smart contract \\n        uint stakingAmount = _forwardRewardToken(sender, amount);\\n\\n        uint amountOutInUSD = _validateMinimumStakingAmount(sender, stakeToken, stakingAmount);\\n\\n        // If uesr choose to stake with other tokens, the token needs to be in the allowed list.\\n        if (stakeToken != address(rewardToken)) {\\n            StakeToken memory allowedStakeToken = allowedStakeTokens[stakeToken];\\n            require(allowedStakeToken.created, \\\"pool: stake token is not allowed\\\");\\n        }\\n        \\n        // If user choose to stake with platform token, need to specify which peg token you want to convert to \\n        if (stakeToken == address(rewardToken)) {\\n            rewardToken.burn(stakingAmount);\\n        }\\n\\n        // Validate Referrals\\n        if (referrer != address(0)) {\\n            require(referredBy[sender] == address(0),\\\"pool: user already joined by referral\\\");\\n            \\n            referredBy[sender] = referrer;\\n            totalReferralInvitations[referrer] += 1;\\n\\n            // Give direct intetest to the refferer\\n            uint256 directInterestForReffer = stakingAmount * directInterest / INTEREST_RATE_PRECISION_POINT;\\n            rewardToken.transferFrom(treasury, referrer, directInterestForReffer);\\n        }\\n\\n        // // Transfer extra DDX reward token to the investor\\n        // uint extraRewardTokenAmount = _convertUSDToExtraRewardToken(amountOutInUSD);\\n        // extraRewardToken.transferFrom(treasury, sender, extraRewardTokenAmount);\\n\\n        stakingInfo.lastClaimedTime = uint64(block.timestamp);\\n        stakingInfo.lastTimeDeposited = uint64(block.timestamp);\\n        stakingInfo.lastUpdatedTime = uint64(block.timestamp);\\n        stakingInfo.totalStakesInUSD = amountOutInUSD;\\n\\n        totalStaked += stakingAmount;\\n\\n        emit Deposited(msg.sender, stakeToken, referrer, stakingAmount, amountOutInUSD);\\n    }\\n\\n    function withdraw() external nonReentrant whenNotPaused {\\n        address account = msg.sender;\\n        \\n        StakingInfo storage stakingInfo = stakingContracts[account];\\n\\n        uint256 rewardsInUSD = pendingRewardInUSD(account);\\n\\n        uint256 maximumEarnings = stakingInfo.totalStakesInUSD * (INTEREST_RATE_PRECISION_POINT + maximumEarningsInPercent) / INTEREST_RATE_PRECISION_POINT;\\n\\n        uint256 totalPrincipalAndInterest = rewardsInUSD + stakingInfo.totalStakesInUSD + stakingInfo.claimedInterest;\\n        \\n        require(totalPrincipalAndInterest >= maximumEarnings, \\\"pool: maximum earning not reached yet\\\");\\n\\n        uint256 totalWithdrawInUSD = rewardsInUSD + stakingInfo.totalStakesInUSD;\\n        uint256 totalWithdrawInRewardInTokens = _convertUSDToRewardToken(totalWithdrawInUSD);\\n\\n        require(totalWithdrawInRewardInTokens > 0, \\\"pool: Total withdraw must be positive\\\");\\n\\n        // Transfer the interest amount to owner\\n        rewardToken.transferFrom(treasury, account, totalWithdrawInRewardInTokens);\\n\\n        stakingInfo.totalStakesInUSD = 0;\\n        stakingInfo.lastUpdatedTime = uint64(block.timestamp);\\n        stakingInfo.lastClaimedTime = uint64(block.timestamp);\\n\\n        emit Withdraw(msg.sender, totalWithdrawInRewardInTokens);   \\n    }\\n\\n    function claimReward() external nonReentrant whenNotPaused {\\n        _harvest(msg.sender);\\n    }\\n\\n    function _harvest(address _account) internal {\\n        StakingInfo storage stakingInfo = stakingContracts[_account];\\n\\n        uint256 rewardsInUSD = pendingRewardInUSD(_account);\\n        uint256 rewardsInRewardTokens = _convertUSDToRewardToken(rewardsInUSD);\\n\\n        require(rewardsInRewardTokens > 0, \\\"pool: reward not enough to harvest\\\");\\n\\n        // Transfer the interest amount to owner\\n        rewardToken.transferFrom(treasury, _account, rewardsInRewardTokens);\\n\\n        stakingInfo.lastUpdatedTime = uint64(block.timestamp);\\n        stakingInfo.lastClaimedTime = uint64(block.timestamp);\\n\\n        stakingInfo.claimedInterest += rewardsInUSD;\\n        \\n        emit RewardHarvested(_account, rewardsInRewardTokens, rewardsInUSD);\\n    }\\n\\n    function pendingRewardInUSD(address _account) public view returns (uint256) {\\n        StakingInfo memory stakingInfo = stakingContracts[_account];\\n\\n        if (uint64(block.timestamp) <= stakingInfo.lastClaimedTime) {\\n            return 0;\\n        }\\n\\n        // Get total number of interest periods from the last time claimed\\n        uint64 passedDuration = uint64(block.timestamp) - stakingInfo.lastClaimedTime; \\n\\n        uint256 pendingInterest = stakingInfo.totalStakesInUSD * passedDuration * interestPerSeconds / INTEREST_RATE_PRECISION_POINT;\\n        uint256 totalPrincipalAndInterest = pendingInterest + stakingInfo.totalStakesInUSD + stakingInfo.claimedInterest;\\n\\n        uint256 maximumEarnings = stakingInfo.totalStakesInUSD * maximumEarningsInPercent / INTEREST_RATE_PRECISION_POINT;\\n        // If total principal + interest >= 200% * principal\\n        if (totalPrincipalAndInterest >= maximumEarnings) {\\n            pendingInterest = maximumEarnings - stakingInfo.totalStakesInUSD - stakingInfo.claimedInterest;\\n        }\\n\\n        return pendingInterest;\\n    }\\n\\n    // Reward token - asset\\n    function _validateMinimumStakingAmount(address _sender, address _stakeToken, uint256 _stakingAmount) internal returns(uint256 amountOut) {\\n        // Get amount in case we don't have an active oracle\\n        amountOut = getStakingAmountInUSD(_stakeToken, _stakingAmount); \\n\\n        address oracle = assetPrices[_stakeToken];\\n\\n        if (oracle != address(0)) {\\n            // Update oracle Pricing when time elapsed has passed\\n            if (block.timestamp - IOracleSimple(oracle).getBlockTimestampLast() >  IOracleSimple(oracle).PERIOD()) { \\n                IOracleSimple(oracle).update();\\n            }\\n\\n            amountOut = IOracleSimple(oracle).consult(_stakeToken, _stakingAmount);\\n        }\\n\\n        StakingInfo storage stakingInfo = stakingContracts[_sender];\\n        uint256 totalStakingAmountInUSD = amountOut + stakingInfo.totalStakesInUSD;\\n\\n        // Needs to be make sure staking amount by $ greater than minimum amount\\n        require(totalStakingAmountInUSD >= minimumStakingAmountInUSD, \\\"pool: minimum staking amount not reached\\\");\\n    }\\n\\n    function _convertUSDToRewardToken(uint256 _amountInUSD) internal returns(uint256) {\\n        address oracle = assetPrices[address(rewardToken)];\\n\\n        if (oracle != address(0)) {\\n            // Update oracle Pricing when time elapsed has passed\\n            if (block.timestamp - IOracleSimple(oracle).getBlockTimestampLast() >  IOracleSimple(oracle).PERIOD()) { \\n                IOracleSimple(oracle).update();\\n            }\\n\\n            return IOracleSimple(oracle).consult(IOracleSimple(oracle).token1(), _amountInUSD);\\n        }\\n\\n        // Get amount in case we don't have an active oracle\\n        return getStakingAmountByPegToken(address(rewardToken), _amountInUSD); \\n    }\\n\\n    function _convertUSDToExtraRewardToken(uint256 _amountInUSD) internal returns(uint256) {\\n        address oracle = assetPrices[address(extraRewardToken)];\\n\\n        if (oracle != address(0)) {\\n            // Update oracle Pricing when time elapsed has passed\\n            if (block.timestamp - IOracleSimple(oracle).getBlockTimestampLast() >  IOracleSimple(oracle).PERIOD()) { \\n                IOracleSimple(oracle).update();\\n            }\\n\\n            return IOracleSimple(oracle).consult(IOracleSimple(oracle).token1(), _amountInUSD);\\n        }\\n\\n        // Get amount in case we don't have an active oracle\\n        return getStakingAmountByPegToken(address(extraRewardToken), _amountInUSD); \\n    }\\n\\n    /**\\n     * @dev Get Staking token amount in offered currencies\\n     * @param _amount Amount of purchase token\\n     * @return Return amount of respective IDO token\\n     */\\n    function getStakingAmountInUSD(\\n        address _token,\\n        uint _amount\\n    ) public view returns (uint) {\\n        OfferedCurrency memory currency = offeredCurrencies[_token];\\n        return\\n            (_amount * (10 ** currency.decimal)) / currency.rate;\\n    }\\n\\n    function getStakingAmountByPegToken(\\n        address _token,\\n        uint _amount\\n    ) public view returns (uint) {\\n        OfferedCurrency memory currency = offeredCurrencies[_token];\\n        return\\n            (_amount * currency.rate) / (10 ** currency.decimal);\\n    }\\n\\n    function _forwardRewardToken(address sender, uint256 amount) internal returns(uint256) {\\n        uint256 totalStakingbefore = rewardToken.balanceOf(address(this));\\n        // Locking principal deposit amount\\n        rewardToken.transferFrom(sender, address(this), amount);\\n        // Get balance of contract after staking\\n        uint256 totalStakingAfter = rewardToken.balanceOf(address(this));\\n\\n        return totalStakingAfter - totalStakingbefore;\\n    }\\n\\n    /// -----------------------------------\\n    /// --------- Pause Function ----------\\n    /// -----------------------------------\\n\\n    function Pause() external onlyAdmin {\\n        poolStatus = false;\\n        _pause();\\n    }\\n\\n    function UnPause() external onlyAdmin {\\n        poolStatus = true;\\n        _unpause();\\n    }\\n\\n    /// --------------------------------\\n    /// ------- Modifier Function ------\\n    /// --------------------------------\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Permission: User is not admin\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x864724ddb66af9184f26a80117d8b7279ab2379d50b31f73d6cc802cc5acad84\",\"license\":\"MIT\"},\"contracts/interfaces/IDChainStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDChainStaking {\\n    // function stakingContracts(uint256 contractId) external view returns()\\n}\\n\",\"keccak256\":\"0x8a625134325863ae9ef91489b532831d3a04b5c16e5d3fe6cfd8426e634e7111\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"import {IERC20 as IOpenZeppelinERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20 is IOpenZeppelinERC20 {\\n    function burn(uint256 amount) external;\\n}\",\"keccak256\":\"0x04dbf5ffc124aeb13c19a6146bd14b8eedf5a5b8e8181e2fe3230e2d57b7717d\"},\"contracts/interfaces/IOracleSimple.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IOracleSimple {\\n\\n    function getBlockTimestampLast() external view returns (uint32);\\n\\n    function consult(address token, uint amountIn) external view returns (uint amountOut);\\n\\n    function update() external;\\n\\n    function token0() external view returns(address);\\n    \\n    function token1() external view returns(address);\\n\\n    function PERIOD() external view returns(uint);\\n}\",\"keccak256\":\"0x83d3aae351566b99d3704510df8ee786782bfca4e02c20218c8f878720d2ac96\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002316380380620023168339810160408190526200003491620002fc565b6200003f3362000233565b6000805460ff60a01b19169055600180556001600160a01b038316620000915760405162461bcd60e51b81526020600482015260026024820152615a4160f01b60448201526064015b60405180910390fd5b6001600160a01b038216620000ce5760405162461bcd60e51b81526020600482015260026024820152615a4160f01b604482015260640162000088565b600280546001600160a01b038086166001600160a01b03199283161790925560038054858416908316179055600480549284169282169290921790915560058054909116331790556015805460ff1916600117905560408051610120810182526105dc81526103e860208201526101f4918101829052606081018290526080810191909152600060a0820181905260c0820181905260e082018190526101008201526200018090600c90600962000283565b506502ce9cf3f87e600a5566b1a2bc2ec50000600b55614e206009556305f5e100600755671bc16d674ec8000060085560035460405163095ea7b360e01b815230600482015260001960248201526001600160a01b039091169063095ea7b3906044016020604051808303816000875af115801562000203573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000229919062000350565b505050506200037b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8260098101928215620002ba579160200282015b82811115620002ba578251829061ffff1690559160200191906001019062000297565b50620002c8929150620002cc565b5090565b5b80821115620002c85760008155600101620002cd565b6001600160a01b0381168114620002f957600080fd5b50565b6000806000606084860312156200031257600080fd5b83516200031f81620002e3565b60208501519093506200033281620002e3565b60408501519092506200034581620002e3565b809150509250925092565b6000602082840312156200036357600080fd5b815180151581146200037457600080fd5b9392505050565b611f8b806200038b6000396000f3fe608060405234801561001057600080fd5b50600436106101d15760003560e01c8063803efb6111610105578063e1988ca31161009d578063e1988ca3146104d9578063e2f273bd146104ec578063e4b8a1ee146104ff578063f022869214610512578063f2e034821461051f578063f2fde38b14610532578063f4020d0c14610545578063f7c618c11461054e578063f851a4401461056157600080fd5b8063803efb61146103c4578063817b1cd2146103cd5780638da5cb5b146103d65780638fb33c3b146103de578063991932bb146103fe5780639bc181d214610411578063a90f8e9a14610495578063b88a802f146104be578063bfc90a5e146104c657600080fd5b80635a3a85cb116101785780635a3a85cb146102b05780635c975abb146102ec5780635e9a523c146102f457806361d027b31461032a57806362adfe7a1461033d578063657efde6146103795780636985a022146103ab578063715018a6146103b357806378457926146103bb57600080fd5b80631c24ef7d146101d65780632a9c0560146102195780632c06e765146102305780632e2d2984146102395780633c34ab301461024e5780633ccfd60b1461028d578063438cd2d31461029557806344d25cb21461029d575b600080fd5b6102046101e4366004611b2c565b6001600160a01b039081166000908152601a602052604090205416151590565b60405190151581526020015b60405180910390f35b61022260085481565b604051908152602001610210565b610222600a5481565b61024c610247366004611b49565b610574565b005b61027861025c366004611b2c565b6017602052600090815260409020805460019091015460ff1682565b60408051928352901515602083015201610210565b61024c610a90565b61024c610d1b565b6102226102ab366004611b8b565b610d5c565b6102d76102be366004611b2c565b6016602052600090815260409020805460019091015482565b60408051928352602083019190915201610210565b610204610d73565b61031d610302366004611b2c565b6018602052600090815260409020546001600160a01b031681565b6040516102109190611ba4565b60025461031d906001600160a01b031681565b61024c61034b366004611bb8565b6001600160a01b03918216600090815260186020526040902080546001600160a01b03191691909216179055565b61024c610387366004611bf1565b6001600160a01b039092166000908152601660205260409020600181019190915555565b61024c610d83565b61024c610dbf565b61022260075481565b610222600b5481565b61022260065481565b61031d610df8565b6102226103ec366004611b2c565b60196020526000908152604090205481565b60045461031d906001600160a01b031681565b61045f61041f366004611b2c565b601b602052600090815260409020805460018201546002909201549091906001600160401b0380821691600160401b8104821691600160801b9091041685565b6040805195865260208601949094526001600160401b03928316938501939093528116606084015216608082015260a001610210565b61031d6104a3366004611b2c565b601a602052600090815260409020546001600160a01b031681565b61024c610e07565b61024c6104d4366004611b2c565b610e62565b6102226104e7366004611c26565b610f1b565b61024c6104fa366004611b2c565b610f7b565b61022261050d366004611b2c565b610fcc565b6015546102049060ff1681565b61022261052d366004611c26565b611114565b61024c610540366004611b2c565b611164565b61022260095481565b60035461031d906001600160a01b031681565b60055461031d906001600160a01b031681565b61057c610d73565b156105a25760405162461bcd60e51b815260040161059990611c52565b60405180910390fd5b33836105f05760405162461bcd60e51b815260206004820152601b60248201527f706f6f6c3a20616d6f756e742063616e6e6f74206265207a65726f00000000006044820152606401610599565b6001600160a01b03811661065a5760405162461bcd60e51b815260206004820152602b60248201527f706f6f6c3a207374616b6520616464726573732063616e206e6f74206265207a60448201526a65726f206164647265737360a81b6064820152608401610599565b6001600160a01b0381166000908152601b602052604081209061067c83610fcc565b9050600061068982611204565b90508015610727576003546002546040516323b872dd60e01b81526001600160a01b03928316926323b872dd926106c99291169088908690600401611c7c565b6020604051808303816000875af11580156106e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070c9190611ca0565b50818360010160008282546107219190611cd8565b90915550505b60006107338589611455565b905060006107428689846115cb565b6003549091506001600160a01b038981169116146107df576001600160a01b0388166000908152601760209081526040918290208251808401909352805483526001015460ff1615159082018190526107dd5760405162461bcd60e51b815260206004820181905260248201527f706f6f6c3a207374616b6520746f6b656e206973206e6f7420616c6c6f7765646044820152606401610599565b505b6003546001600160a01b039081169089160361085457600354604051630852cd8d60e31b8152600481018490526001600160a01b03909116906342966c6890602401600060405180830381600087803b15801561083b57600080fd5b505af115801561084f573d6000803e3d6000fd5b505050505b6001600160a01b038716156109cd576001600160a01b038681166000908152601a602052604090205416156108d95760405162461bcd60e51b815260206004820152602560248201527f706f6f6c3a207573657220616c7265616479206a6f696e656420627920726566604482015264195c9c985b60da1b6064820152608401610599565b6001600160a01b038681166000908152601a6020908152604080832080546001600160a01b031916948c16948517905592825260199052908120805460019290610924908490611cd8565b9091555050600b54600090670de0b6b3a7640000906109439085611ceb565b61094d9190611d0a565b6003546002546040516323b872dd60e01b81529293506001600160a01b03918216926323b872dd926109879216908c908690600401611c7c565b6020604051808303816000875af11580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca9190611ca0565b50505b60028501805477ffffffffffffffff0000000000000000ffffffffffffffff1916426001600160401b0316908117600160801b82021767ffffffffffffffff60401b1916600160401b9190910217905580855560068054839190600090610a35908490611cd8565b909155505060408051838152602081018390526001600160a01b03808a1692908b169133917fb045190548dadae679cfe9e337437613ca6dd73efdf984f75e56f152ccee22f0910160405180910390a4505050505050505050565b600260015403610ab25760405162461bcd60e51b815260040161059990611d2c565b6002600155610abf610d73565b15610adc5760405162461bcd60e51b815260040161059990611c52565b336000818152601b6020526040812090610af583610fcc565b600854909150600090670de0b6b3a764000090610b129082611cd8565b8454610b1e9190611ceb565b610b289190611d0a565b60018401548454919250600091610b3f9085611cd8565b610b499190611cd8565b905081811015610ba95760405162461bcd60e51b815260206004820152602560248201527f706f6f6c3a206d6178696d756d206561726e696e67206e6f742072656163686560448201526419081e595d60da1b6064820152608401610599565b8354600090610bb89085611cd8565b90506000610bc582611204565b905060008111610c255760405162461bcd60e51b815260206004820152602560248201527f706f6f6c3a20546f74616c207769746864726177206d75737420626520706f73604482015264697469766560d81b6064820152608401610599565b6003546002546040516323b872dd60e01b81526001600160a01b03928316926323b872dd92610c5d929116908b908690600401611c7c565b6020604051808303816000875af1158015610c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca09190611ca0565b50600086556002860180546001600160801b031916600160401b426001600160401b031690810267ffffffffffffffff19169190911717905560405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a25050600180555050505050565b6005546001600160a01b03163314610d455760405162461bcd60e51b815260040161059990611d63565b6015805460ff19166001179055610d5a611833565b565b600c8160098110610d6c57600080fd5b0154905081565b600054600160a01b900460ff1690565b6005546001600160a01b03163314610dad5760405162461bcd60e51b815260040161059990611d63565b6015805460ff19169055610d5a6118c5565b33610dc8610df8565b6001600160a01b031614610dee5760405162461bcd60e51b815260040161059990611d9a565b610d5a6000611925565b6000546001600160a01b031690565b600260015403610e295760405162461bcd60e51b815260040161059990611d2c565b6002600155610e36610d73565b15610e535760405162461bcd60e51b815260040161059990611c52565b610e5c33611975565b60018055565b33610e6b610df8565b6001600160a01b031614610e915760405162461bcd60e51b815260040161059990611d9a565b6001600160a01b0381166000908152601760205260409020600181015460ff1615610f085760405162461bcd60e51b815260206004820152602160248201527f416c6c6f77656420746f6b656e20697320616c726561647920657869737465646044820152602160f81b6064820152608401610599565b6001908101805460ff1916909117905550565b6001600160a01b038216600090815260166020908152604080832081518083019092528054808352600190910154928201839052909190610f5d90600a611eb3565b610f679085611ceb565b610f719190611d0a565b9150505b92915050565b33610f84610df8565b6001600160a01b031614610faa5760405162461bcd60e51b815260040161059990611d9a565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152601b60209081526040808320815160a08101835281548152600182015493810193909352600201546001600160401b03808216928401839052600160401b820481166060850152600160801b909104811660808401524216116110415750600092915050565b60008160400151426110539190611ebf565b90506000670de0b6b3a76400006001600160401b0316600a54836001600160401b031685600001516110859190611ceb565b61108f9190611ceb565b6110999190611d0a565b602084015184519192506000916110b09084611cd8565b6110ba9190611cd8565b6008548551919250600091670de0b6b3a7640000916110d891611ceb565b6110e29190611d0a565b905080821061110957602085015185516110fc9083611ee6565b6111069190611ee6565b92505b509095945050505050565b6001600160a01b038216600090815260166020908152604080832081518083019092528054808352600190910154928201929092529061115590600a611eb3565b6020820151610f679085611ceb565b3361116d610df8565b6001600160a01b0316146111935760405162461bcd60e51b815260040161059990611d9a565b6001600160a01b0381166111f85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610599565b61120181611925565b50565b6003546001600160a01b03908116600090815260186020526040812054909116801561143f57806001600160a01b031663b4d1d7956040518163ffffffff1660e01b8152600401602060405180830381865afa158015611268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128c9190611ef9565b816001600160a01b031663e56522a96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ee9190611f12565b6112fe9063ffffffff1642611ee6565b111561135857806001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561133f57600080fd5b505af1158015611353573d6000803e3d6000fd5b505050505b806001600160a01b0316633ddac953826001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c99190611f38565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401602060405180830381865afa158015611414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114389190611ef9565b9392505050565b600354611438906001600160a01b031684611114565b6003546040516370a0823160e01b815260009182916001600160a01b03909116906370a082319061148a903090600401611ba4565b602060405180830381865afa1580156114a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cb9190611ef9565b6003546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd9061150090879030908890600401611c7c565b6020604051808303816000875af115801561151f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115439190611ca0565b506003546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611575903090600401611ba4565b602060405180830381865afa158015611592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b69190611ef9565b90506115c28282611ee6565b95945050505050565b60006115d78383610f1b565b6001600160a01b0380851660009081526018602052604090205491925016801561179d57806001600160a01b031663b4d1d7956040518163ffffffff1660e01b8152600401602060405180830381865afa158015611639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165d9190611ef9565b816001600160a01b031663e56522a96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561169b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bf9190611f12565b6116cf9063ffffffff1642611ee6565b111561172957806001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561171057600080fd5b505af1158015611724573d6000803e3d6000fd5b505050505b604051633ddac95360e01b81526001600160a01b03858116600483015260248201859052821690633ddac95390604401602060405180830381865afa158015611776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179a9190611ef9565b91505b6001600160a01b0385166000908152601b6020526040812080549091906117c49085611cd8565b90506007548110156118295760405162461bcd60e51b815260206004820152602860248201527f706f6f6c3a206d696e696d756d207374616b696e6720616d6f756e74206e6f74604482015267081c995858da195960c21b6064820152608401610599565b5050509392505050565b61183b610d73565b61187e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610599565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516118bb9190611ba4565b60405180910390a1565b6118cd610d73565b156118ea5760405162461bcd60e51b815260040161059990611c52565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118ae3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381166000908152601b602052604081209061199783610fcc565b905060006119a482611204565b905060008111611a015760405162461bcd60e51b815260206004820152602260248201527f706f6f6c3a20726577617264206e6f7420656e6f75676820746f2068617276656044820152611cdd60f21b6064820152608401610599565b6003546002546040516323b872dd60e01b81526001600160a01b03928316926323b872dd92611a399291169088908690600401611c7c565b6020604051808303816000875af1158015611a58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7c9190611ca0565b506002830180546001600160801b031916600160401b426001600160401b031690810267ffffffffffffffff191691909117179055600183018054839190600090611ac8908490611cd8565b909155505060408051828152602081018490526001600160a01b038616917ff87cfa2d5feaea949ad65bb76a26d8553381bcb6382adbc83dedd48961bf32d9910160405180910390a250505050565b6001600160a01b038116811461120157600080fd5b600060208284031215611b3e57600080fd5b813561143881611b17565b600080600060608486031215611b5e57600080fd5b833592506020840135611b7081611b17565b91506040840135611b8081611b17565b809150509250925092565b600060208284031215611b9d57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008060408385031215611bcb57600080fd5b8235611bd681611b17565b91506020830135611be681611b17565b809150509250929050565b600080600060608486031215611c0657600080fd5b8335611c1181611b17565b95602085013595506040909401359392505050565b60008060408385031215611c3957600080fd5b8235611c4481611b17565b946020939093013593505050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215611cb257600080fd5b8151801515811461143857600080fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610f7557610f75611cc2565b6000816000190483118215151615611d0557611d05611cc2565b500290565b600082611d2757634e487b7160e01b600052601260045260246000fd5b500490565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601d908201527f5065726d697373696f6e3a2055736572206973206e6f742061646d696e000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181815b80851115611e0a578160001904821115611df057611df0611cc2565b80851615611dfd57918102915b93841c9390800290611dd4565b509250929050565b600082611e2157506001610f75565b81611e2e57506000610f75565b8160018114611e445760028114611e4e57611e6a565b6001915050610f75565b60ff841115611e5f57611e5f611cc2565b50506001821b610f75565b5060208310610133831016604e8410600b8410161715611e8d575081810a610f75565b611e978383611dcf565b8060001904821115611eab57611eab611cc2565b029392505050565b60006114388383611e12565b6001600160401b03828116828216039080821115611edf57611edf611cc2565b5092915050565b81810381811115610f7557610f75611cc2565b600060208284031215611f0b57600080fd5b5051919050565b600060208284031215611f2457600080fd5b815163ffffffff8116811461143857600080fd5b600060208284031215611f4a57600080fd5b815161143881611b1756fea264697066735822122057acedcee07ba60bbc2e4fb40e1d5ae4bd6515d9afef5a6a046dadd71d8ca37a64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101d15760003560e01c8063803efb6111610105578063e1988ca31161009d578063e1988ca3146104d9578063e2f273bd146104ec578063e4b8a1ee146104ff578063f022869214610512578063f2e034821461051f578063f2fde38b14610532578063f4020d0c14610545578063f7c618c11461054e578063f851a4401461056157600080fd5b8063803efb61146103c4578063817b1cd2146103cd5780638da5cb5b146103d65780638fb33c3b146103de578063991932bb146103fe5780639bc181d214610411578063a90f8e9a14610495578063b88a802f146104be578063bfc90a5e146104c657600080fd5b80635a3a85cb116101785780635a3a85cb146102b05780635c975abb146102ec5780635e9a523c146102f457806361d027b31461032a57806362adfe7a1461033d578063657efde6146103795780636985a022146103ab578063715018a6146103b357806378457926146103bb57600080fd5b80631c24ef7d146101d65780632a9c0560146102195780632c06e765146102305780632e2d2984146102395780633c34ab301461024e5780633ccfd60b1461028d578063438cd2d31461029557806344d25cb21461029d575b600080fd5b6102046101e4366004611b2c565b6001600160a01b039081166000908152601a602052604090205416151590565b60405190151581526020015b60405180910390f35b61022260085481565b604051908152602001610210565b610222600a5481565b61024c610247366004611b49565b610574565b005b61027861025c366004611b2c565b6017602052600090815260409020805460019091015460ff1682565b60408051928352901515602083015201610210565b61024c610a90565b61024c610d1b565b6102226102ab366004611b8b565b610d5c565b6102d76102be366004611b2c565b6016602052600090815260409020805460019091015482565b60408051928352602083019190915201610210565b610204610d73565b61031d610302366004611b2c565b6018602052600090815260409020546001600160a01b031681565b6040516102109190611ba4565b60025461031d906001600160a01b031681565b61024c61034b366004611bb8565b6001600160a01b03918216600090815260186020526040902080546001600160a01b03191691909216179055565b61024c610387366004611bf1565b6001600160a01b039092166000908152601660205260409020600181019190915555565b61024c610d83565b61024c610dbf565b61022260075481565b610222600b5481565b61022260065481565b61031d610df8565b6102226103ec366004611b2c565b60196020526000908152604090205481565b60045461031d906001600160a01b031681565b61045f61041f366004611b2c565b601b602052600090815260409020805460018201546002909201549091906001600160401b0380821691600160401b8104821691600160801b9091041685565b6040805195865260208601949094526001600160401b03928316938501939093528116606084015216608082015260a001610210565b61031d6104a3366004611b2c565b601a602052600090815260409020546001600160a01b031681565b61024c610e07565b61024c6104d4366004611b2c565b610e62565b6102226104e7366004611c26565b610f1b565b61024c6104fa366004611b2c565b610f7b565b61022261050d366004611b2c565b610fcc565b6015546102049060ff1681565b61022261052d366004611c26565b611114565b61024c610540366004611b2c565b611164565b61022260095481565b60035461031d906001600160a01b031681565b60055461031d906001600160a01b031681565b61057c610d73565b156105a25760405162461bcd60e51b815260040161059990611c52565b60405180910390fd5b33836105f05760405162461bcd60e51b815260206004820152601b60248201527f706f6f6c3a20616d6f756e742063616e6e6f74206265207a65726f00000000006044820152606401610599565b6001600160a01b03811661065a5760405162461bcd60e51b815260206004820152602b60248201527f706f6f6c3a207374616b6520616464726573732063616e206e6f74206265207a60448201526a65726f206164647265737360a81b6064820152608401610599565b6001600160a01b0381166000908152601b602052604081209061067c83610fcc565b9050600061068982611204565b90508015610727576003546002546040516323b872dd60e01b81526001600160a01b03928316926323b872dd926106c99291169088908690600401611c7c565b6020604051808303816000875af11580156106e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070c9190611ca0565b50818360010160008282546107219190611cd8565b90915550505b60006107338589611455565b905060006107428689846115cb565b6003549091506001600160a01b038981169116146107df576001600160a01b0388166000908152601760209081526040918290208251808401909352805483526001015460ff1615159082018190526107dd5760405162461bcd60e51b815260206004820181905260248201527f706f6f6c3a207374616b6520746f6b656e206973206e6f7420616c6c6f7765646044820152606401610599565b505b6003546001600160a01b039081169089160361085457600354604051630852cd8d60e31b8152600481018490526001600160a01b03909116906342966c6890602401600060405180830381600087803b15801561083b57600080fd5b505af115801561084f573d6000803e3d6000fd5b505050505b6001600160a01b038716156109cd576001600160a01b038681166000908152601a602052604090205416156108d95760405162461bcd60e51b815260206004820152602560248201527f706f6f6c3a207573657220616c7265616479206a6f696e656420627920726566604482015264195c9c985b60da1b6064820152608401610599565b6001600160a01b038681166000908152601a6020908152604080832080546001600160a01b031916948c16948517905592825260199052908120805460019290610924908490611cd8565b9091555050600b54600090670de0b6b3a7640000906109439085611ceb565b61094d9190611d0a565b6003546002546040516323b872dd60e01b81529293506001600160a01b03918216926323b872dd926109879216908c908690600401611c7c565b6020604051808303816000875af11580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca9190611ca0565b50505b60028501805477ffffffffffffffff0000000000000000ffffffffffffffff1916426001600160401b0316908117600160801b82021767ffffffffffffffff60401b1916600160401b9190910217905580855560068054839190600090610a35908490611cd8565b909155505060408051838152602081018390526001600160a01b03808a1692908b169133917fb045190548dadae679cfe9e337437613ca6dd73efdf984f75e56f152ccee22f0910160405180910390a4505050505050505050565b600260015403610ab25760405162461bcd60e51b815260040161059990611d2c565b6002600155610abf610d73565b15610adc5760405162461bcd60e51b815260040161059990611c52565b336000818152601b6020526040812090610af583610fcc565b600854909150600090670de0b6b3a764000090610b129082611cd8565b8454610b1e9190611ceb565b610b289190611d0a565b60018401548454919250600091610b3f9085611cd8565b610b499190611cd8565b905081811015610ba95760405162461bcd60e51b815260206004820152602560248201527f706f6f6c3a206d6178696d756d206561726e696e67206e6f742072656163686560448201526419081e595d60da1b6064820152608401610599565b8354600090610bb89085611cd8565b90506000610bc582611204565b905060008111610c255760405162461bcd60e51b815260206004820152602560248201527f706f6f6c3a20546f74616c207769746864726177206d75737420626520706f73604482015264697469766560d81b6064820152608401610599565b6003546002546040516323b872dd60e01b81526001600160a01b03928316926323b872dd92610c5d929116908b908690600401611c7c565b6020604051808303816000875af1158015610c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca09190611ca0565b50600086556002860180546001600160801b031916600160401b426001600160401b031690810267ffffffffffffffff19169190911717905560405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a25050600180555050505050565b6005546001600160a01b03163314610d455760405162461bcd60e51b815260040161059990611d63565b6015805460ff19166001179055610d5a611833565b565b600c8160098110610d6c57600080fd5b0154905081565b600054600160a01b900460ff1690565b6005546001600160a01b03163314610dad5760405162461bcd60e51b815260040161059990611d63565b6015805460ff19169055610d5a6118c5565b33610dc8610df8565b6001600160a01b031614610dee5760405162461bcd60e51b815260040161059990611d9a565b610d5a6000611925565b6000546001600160a01b031690565b600260015403610e295760405162461bcd60e51b815260040161059990611d2c565b6002600155610e36610d73565b15610e535760405162461bcd60e51b815260040161059990611c52565b610e5c33611975565b60018055565b33610e6b610df8565b6001600160a01b031614610e915760405162461bcd60e51b815260040161059990611d9a565b6001600160a01b0381166000908152601760205260409020600181015460ff1615610f085760405162461bcd60e51b815260206004820152602160248201527f416c6c6f77656420746f6b656e20697320616c726561647920657869737465646044820152602160f81b6064820152608401610599565b6001908101805460ff1916909117905550565b6001600160a01b038216600090815260166020908152604080832081518083019092528054808352600190910154928201839052909190610f5d90600a611eb3565b610f679085611ceb565b610f719190611d0a565b9150505b92915050565b33610f84610df8565b6001600160a01b031614610faa5760405162461bcd60e51b815260040161059990611d9a565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152601b60209081526040808320815160a08101835281548152600182015493810193909352600201546001600160401b03808216928401839052600160401b820481166060850152600160801b909104811660808401524216116110415750600092915050565b60008160400151426110539190611ebf565b90506000670de0b6b3a76400006001600160401b0316600a54836001600160401b031685600001516110859190611ceb565b61108f9190611ceb565b6110999190611d0a565b602084015184519192506000916110b09084611cd8565b6110ba9190611cd8565b6008548551919250600091670de0b6b3a7640000916110d891611ceb565b6110e29190611d0a565b905080821061110957602085015185516110fc9083611ee6565b6111069190611ee6565b92505b509095945050505050565b6001600160a01b038216600090815260166020908152604080832081518083019092528054808352600190910154928201929092529061115590600a611eb3565b6020820151610f679085611ceb565b3361116d610df8565b6001600160a01b0316146111935760405162461bcd60e51b815260040161059990611d9a565b6001600160a01b0381166111f85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610599565b61120181611925565b50565b6003546001600160a01b03908116600090815260186020526040812054909116801561143f57806001600160a01b031663b4d1d7956040518163ffffffff1660e01b8152600401602060405180830381865afa158015611268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128c9190611ef9565b816001600160a01b031663e56522a96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ee9190611f12565b6112fe9063ffffffff1642611ee6565b111561135857806001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561133f57600080fd5b505af1158015611353573d6000803e3d6000fd5b505050505b806001600160a01b0316633ddac953826001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c99190611f38565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401602060405180830381865afa158015611414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114389190611ef9565b9392505050565b600354611438906001600160a01b031684611114565b6003546040516370a0823160e01b815260009182916001600160a01b03909116906370a082319061148a903090600401611ba4565b602060405180830381865afa1580156114a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cb9190611ef9565b6003546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd9061150090879030908890600401611c7c565b6020604051808303816000875af115801561151f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115439190611ca0565b506003546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611575903090600401611ba4565b602060405180830381865afa158015611592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b69190611ef9565b90506115c28282611ee6565b95945050505050565b60006115d78383610f1b565b6001600160a01b0380851660009081526018602052604090205491925016801561179d57806001600160a01b031663b4d1d7956040518163ffffffff1660e01b8152600401602060405180830381865afa158015611639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165d9190611ef9565b816001600160a01b031663e56522a96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561169b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bf9190611f12565b6116cf9063ffffffff1642611ee6565b111561172957806001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561171057600080fd5b505af1158015611724573d6000803e3d6000fd5b505050505b604051633ddac95360e01b81526001600160a01b03858116600483015260248201859052821690633ddac95390604401602060405180830381865afa158015611776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179a9190611ef9565b91505b6001600160a01b0385166000908152601b6020526040812080549091906117c49085611cd8565b90506007548110156118295760405162461bcd60e51b815260206004820152602860248201527f706f6f6c3a206d696e696d756d207374616b696e6720616d6f756e74206e6f74604482015267081c995858da195960c21b6064820152608401610599565b5050509392505050565b61183b610d73565b61187e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610599565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516118bb9190611ba4565b60405180910390a1565b6118cd610d73565b156118ea5760405162461bcd60e51b815260040161059990611c52565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118ae3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381166000908152601b602052604081209061199783610fcc565b905060006119a482611204565b905060008111611a015760405162461bcd60e51b815260206004820152602260248201527f706f6f6c3a20726577617264206e6f7420656e6f75676820746f2068617276656044820152611cdd60f21b6064820152608401610599565b6003546002546040516323b872dd60e01b81526001600160a01b03928316926323b872dd92611a399291169088908690600401611c7c565b6020604051808303816000875af1158015611a58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7c9190611ca0565b506002830180546001600160801b031916600160401b426001600160401b031690810267ffffffffffffffff191691909117179055600183018054839190600090611ac8908490611cd8565b909155505060408051828152602081018490526001600160a01b038616917ff87cfa2d5feaea949ad65bb76a26d8553381bcb6382adbc83dedd48961bf32d9910160405180910390a250505050565b6001600160a01b038116811461120157600080fd5b600060208284031215611b3e57600080fd5b813561143881611b17565b600080600060608486031215611b5e57600080fd5b833592506020840135611b7081611b17565b91506040840135611b8081611b17565b809150509250925092565b600060208284031215611b9d57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008060408385031215611bcb57600080fd5b8235611bd681611b17565b91506020830135611be681611b17565b809150509250929050565b600080600060608486031215611c0657600080fd5b8335611c1181611b17565b95602085013595506040909401359392505050565b60008060408385031215611c3957600080fd5b8235611c4481611b17565b946020939093013593505050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215611cb257600080fd5b8151801515811461143857600080fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610f7557610f75611cc2565b6000816000190483118215151615611d0557611d05611cc2565b500290565b600082611d2757634e487b7160e01b600052601260045260246000fd5b500490565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601d908201527f5065726d697373696f6e3a2055736572206973206e6f742061646d696e000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181815b80851115611e0a578160001904821115611df057611df0611cc2565b80851615611dfd57918102915b93841c9390800290611dd4565b509250929050565b600082611e2157506001610f75565b81611e2e57506000610f75565b8160018114611e445760028114611e4e57611e6a565b6001915050610f75565b60ff841115611e5f57611e5f611cc2565b50506001821b610f75565b5060208310610133831016604e8410600b8410161715611e8d575081810a610f75565b611e978383611dcf565b8060001904821115611eab57611eab611cc2565b029392505050565b60006114388383611e12565b6001600160401b03828116828216039080821115611edf57611edf611cc2565b5092915050565b81810381811115610f7557610f75611cc2565b600060208284031215611f0b57600080fd5b5051919050565b600060208284031215611f2457600080fd5b815163ffffffff8116811461143857600080fd5b600060208284031215611f4a57600080fd5b815161143881611b1756fea264697066735822122057acedcee07ba60bbc2e4fb40e1d5ae4bd6515d9afef5a6a046dadd71d8ca37a64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getStakingAmountInUSD(address,uint256)": {
        "details": "Get Staking token amount in offered currencies",
        "params": {
          "_amount": "Amount of purchase token"
        },
        "returns": {
          "_0": "Return amount of respective IDO token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "Pause()": {
        "notice": "----------------------------------- --------- Pause Function ---------- -----------------------------------"
      },
      "deposit(uint256,address,address)": {
        "notice": "----------------------------------- ---------- Core Function ---------- -----------------------------------"
      },
      "joinByReferral(address)": {
        "notice": "----------------------------------- ---------- View Function ---------- -----------------------------------"
      },
      "setAssetOracle(address,address)": {
        "notice": "----------------------------------- --------- Update Function --------- -----------------------------------"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4017,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4184,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4269,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5252,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "treasury",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5255,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "rewardToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)6459"
      },
      {
        "astId": 5258,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "extraRewardToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)6459"
      },
      {
        "astId": 5260,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "admin",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 5262,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "totalStaked",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5264,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "minimumStakingAmountInUSD",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5266,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "maximumEarningsInPercent",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5268,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "fallbackRewardTokenPriceInUSD",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5270,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "interestPerSeconds",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5272,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "directInterest",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5276,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "commissionInterestLevels",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_uint256)9_storage"
      },
      {
        "astId": 5278,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "poolStatus",
        "offset": 0,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 5283,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "offeredCurrencies",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_struct(OfferedCurrency)5238_storage)"
      },
      {
        "astId": 5288,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "allowedStakeTokens",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_struct(StakeToken)5233_storage)"
      },
      {
        "astId": 5292,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "assetPrices",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5296,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "totalReferralInvitations",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5300,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "referredBy",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5305,
        "contract": "contracts/DWStaking.sol:DWStaking",
        "label": "stakingContracts",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_struct(StakingInfo)5228_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)9_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[9]",
        "numberOfBytes": "288"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)6459": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(OfferedCurrency)5238_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DWStaking.OfferedCurrency)",
        "numberOfBytes": "32",
        "value": "t_struct(OfferedCurrency)5238_storage"
      },
      "t_mapping(t_address,t_struct(StakeToken)5233_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DWStaking.StakeToken)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeToken)5233_storage"
      },
      "t_mapping(t_address,t_struct(StakingInfo)5228_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DWStaking.StakingInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingInfo)5228_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(OfferedCurrency)5238_storage": {
        "encoding": "inplace",
        "label": "struct DWStaking.OfferedCurrency",
        "members": [
          {
            "astId": 5235,
            "contract": "contracts/DWStaking.sol:DWStaking",
            "label": "decimal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5237,
            "contract": "contracts/DWStaking.sol:DWStaking",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StakeToken)5233_storage": {
        "encoding": "inplace",
        "label": "struct DWStaking.StakeToken",
        "members": [
          {
            "astId": 5230,
            "contract": "contracts/DWStaking.sol:DWStaking",
            "label": "minimumAmountInUSD",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5232,
            "contract": "contracts/DWStaking.sol:DWStaking",
            "label": "created",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StakingInfo)5228_storage": {
        "encoding": "inplace",
        "label": "struct DWStaking.StakingInfo",
        "members": [
          {
            "astId": 5219,
            "contract": "contracts/DWStaking.sol:DWStaking",
            "label": "totalStakesInUSD",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5221,
            "contract": "contracts/DWStaking.sol:DWStaking",
            "label": "claimedInterest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5223,
            "contract": "contracts/DWStaking.sol:DWStaking",
            "label": "lastClaimedTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 5225,
            "contract": "contracts/DWStaking.sol:DWStaking",
            "label": "lastUpdatedTime",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 5227,
            "contract": "contracts/DWStaking.sol:DWStaking",
            "label": "lastTimeDeposited",
            "offset": 16,
            "slot": "2",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}