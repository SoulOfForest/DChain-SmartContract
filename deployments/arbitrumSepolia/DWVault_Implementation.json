{
  "address": "0x8Ea9E3814E8336916794116e16BE9891DEE02C8E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "investor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "offerToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "soldTokens",
          "type": "uint256"
        }
      ],
      "name": "BuyTokenByToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "soldTokens",
          "type": "uint256"
        }
      ],
      "name": "PendingSoldTokenClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vestedAmount",
          "type": "uint256"
        }
      ],
      "name": "TokenReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DWStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUB_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "__DChainBase_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableToStakeThroughVault",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_offerToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buyTokenWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_soldToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fundReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DWStaking",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tgePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalRaiseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockBeforeVesting",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_openTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockBeforeVesting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "offeredCurrencies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "created",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingSoldTokenClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "releasableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        }
      ],
      "name": "setOfferedCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tgePercentage",
          "type": "uint256"
        }
      ],
      "name": "setTGEPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalRaiseAmount",
          "type": "uint256"
        }
      ],
      "name": "setTotalRaiseAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "soldToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_originAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        }
      ],
      "name": "stakeWithVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tgePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRaiseAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRaised",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingPeriodInSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vestingSchedules",
      "outputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cliff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slicePeriodSeconds",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "revocable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "released",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "revoked",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x45acefdd7514d9107227ad395a76ac57b17976074491690558725b6432153ba1",
  "receipt": {
    "to": null,
    "from": "0x5d20cb3A06266eed62e518eBD58aC74b0b0f2d29",
    "contractAddress": "0x8Ea9E3814E8336916794116e16BE9891DEE02C8E",
    "transactionIndex": 1,
    "gasUsed": "2255431",
    "logsBloom": "0x
    "blockHash": "0x19d2679e3b25314bac60ee3b331398688699e2bdf81ec0844b730985d8fe9030",
    "transactionHash": "0x45acefdd7514d9107227ad395a76ac57b17976074491690558725b6432153ba1",
    "logs": [],
    "blockNumber": 4581330,
    "cumulativeGasUsed": "2255431",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f5aebcb8d3bc11338a03402a54132064",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offerToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldTokens\",\"type\":\"uint256\"}],\"name\":\"BuyTokenByToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldTokens\",\"type\":\"uint256\"}],\"name\":\"PendingSoldTokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestedAmount\",\"type\":\"uint256\"}],\"name\":\"TokenReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DWStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUB_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__DChainBase_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableToStakeThroughVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTokenWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_soldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DWStaking\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tgePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRaiseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockBeforeVesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockBeforeVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"offeredCurrencies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingSoldTokenClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"setOfferedCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tgePercentage\",\"type\":\"uint256\"}],\"name\":\"setTGEPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRaiseAmount\",\"type\":\"uint256\"}],\"name\":\"setTotalRaiseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"stakeWithVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaiseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPeriodInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingSchedules\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"release()\":{\"notice\":\"Release vested amount of tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DWVault.sol\":\"DWVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DChainBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\n/**\\n * @title HelixBase contract\\n * @notice This is our Base contract that most other contracts inherit from. It includes many standard\\n *  useful abilities like upgradeability, pausability, access control, and re-entrancy guards.\\n * @author Helix\\n */\\n\\ncontract DChainBase is\\n    AccessControlUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    bytes32 public constant SUB_ADMIN_ROLE = keccak256(\\\"SUB_ADMIN_ROLE\\\");\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    // Pre-reserving a few slots in the base contract in case we need to add things in the future.\\n    // This does not actually take up gas cost or storage cost, but it does reserve the storage slots.\\n    // See OpenZeppelin's use of this pattern here:\\n    // https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L37\\n    uint256[50] private __gap1;\\n    uint256[50] private __gap2;\\n    uint256[50] private __gap3;\\n    uint256[50] private __gap4;\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __DChainBase_init(address owner) public onlyInitializing {\\n        require(owner != address(0), \\\"Owner cannot be the zero address\\\");\\n        __AccessControl_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        _setupRole(OWNER_ROLE, owner);\\n        _setupRole(PAUSER_ROLE, owner);\\n\\n        _setRoleAdmin(SUB_ADMIN_ROLE, OWNER_ROLE);\\n        _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\n        _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n    }\\n\\n    function isAdmin() public view returns (bool) {\\n        return hasRole(OWNER_ROLE, _msgSender());\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(), \\\"Must have admin role to perform this action\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xff077614c10471835bea25f8d4a28ad727e5432380aec06f0ee3ec191ca2d377\",\"license\":\"MIT\"},\"contracts/DWVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IDChainStaking.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./DChainBase.sol\\\";\\n\\n\\ncontract DWVault is DChainBase {\\n    event PendingSoldTokenClaimed(\\n        address indexed claimer,\\n        address indexed beneficiary,\\n        uint soldTokens\\n    );\\n\\n    event BuyTokenByToken(\\n        address indexed investor,\\n        address indexed offerToken,\\n        address indexed beneficiary,\\n        uint amount,\\n        uint soldTokens\\n    );\\n\\n     event TokenReleased(\\n        address indexed beneficiary,\\n        uint vestedAmount\\n    );\\n\\n    struct VestingSchedule {\\n        // beneficiary of tokens after they are released\\n        address beneficiary;\\n        // cliff time of the vesting start in seconds since the UNIX epoch\\n        uint256 cliff;\\n        // start time of the vesting period in seconds since the UNIX epoch\\n        uint256 start;\\n        // duration of the vesting period in seconds\\n        uint256 duration;\\n        // duration of a slice period for the vesting in seconds\\n        uint256 slicePeriodSeconds;\\n        // whether or not the vesting is revocable\\n        bool revocable;\\n        // total amount of tokens to be released at the end of the vesting\\n        uint256 amountTotal;\\n        // amount of tokens released\\n        uint256 released;\\n        // whether or not the vesting has been revoked\\n        bool revoked;\\n    }\\n\\n    struct OfferedCurrency {\\n        uint256 decimals;\\n        uint256 rate;\\n        bool created;\\n    }\\n\\n    uint256 private constant PRECISION_POINT = 10000;\\n\\n    uint256 public tgePercentage;\\n\\n    uint public openTime;\\n    uint public closeTime;\\n    uint public lockBeforeVesting;\\n    uint public vestingDuration;\\n    uint public vestingPeriodInSeconds;\\n\\n    address public treasury;\\n    address public admin;\\n    address public fundReceiver;\\n    address public DWStaking;\\n\\n    IERC20 public soldToken;\\n\\n    uint public totalRaiseAmount; // In Sold token\\n    uint public totalRaised; // in Offer currency\\n\\n    uint public totalSold; // In Sold token\\n\\n    uint256 private vestingSchedulesTotalAmount;\\n    \\n    // Asset token -> Offered Currency (to $)\\n    mapping(address => OfferedCurrency) public offeredCurrencies;\\n    // Sender -> pending claim\\n    mapping(address => uint) public pendingSoldTokenClaim;\\n    // sender -> vesting schedule\\n    mapping(address => VestingSchedule) public vestingSchedules;\\n    function initialize(\\n        address _owner,\\n        IERC20 _soldToken, \\n        address _treasury, \\n        address _fundReceiver, \\n        address _DWStaking,\\n        uint _tgePercentage,\\n        uint _totalRaiseAmount,\\n        uint _lockBeforeVesting,\\n        uint _openTime,\\n        uint _duration\\n    ) external initializer {\\n        __DChainBase_init(_owner);\\n\\n        /// @dev: ZA - Zero address\\n        require(_DWStaking != address(0), \\\"ZA\\\");\\n        require(address(_soldToken) != address(0), \\\"ZA\\\");\\n        require(_treasury != address(0), \\\"ZA\\\");\\n        require(_fundReceiver != address(0), \\\"ZA\\\");\\n        require(_tgePercentage <= PRECISION_POINT, \\\"EOP\\\");\\n\\n        openTime = _openTime;\\n        closeTime = openTime + _duration;\\n        lockBeforeVesting = _lockBeforeVesting;\\n\\n        soldToken = _soldToken;\\n        treasury = _treasury;\\n        fundReceiver = _fundReceiver;\\n        DWStaking = _DWStaking;\\n        totalRaiseAmount = _totalRaiseAmount;\\n        tgePercentage = _tgePercentage;\\n        admin = msg.sender;\\n\\n        vestingDuration = 20 * 30 days; // 5% per month\\n        vestingPeriodInSeconds = 30 days; // one per month\\n    }\\n\\n    /**\\n     * @notice Release vested amount of tokens.\\n     */\\n    function release() public nonReentrant {\\n        VestingSchedule storage vestingSchedule = vestingSchedules[\\n            msg.sender\\n        ];\\n        bool isBeneficiary = msg.sender == vestingSchedule.beneficiary;\\n\\n        require(\\n            isBeneficiary,\\n            \\\"TokenVesting: only beneficiary can release vested tokens\\\"\\n        );\\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\\n        require(\\n            vestedAmount > 0,\\n            \\\"TokenVesting: cannot release tokens, not enough vested tokens\\\"\\n        );\\n        vestingSchedule.released = vestingSchedule.released + vestedAmount;\\n        address payable beneficiaryPayable = payable(\\n            vestingSchedule.beneficiary\\n        );\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount - vestedAmount;\\n        _deliverTokens(beneficiaryPayable, vestedAmount);\\n\\n        emit TokenReleased(beneficiaryPayable, vestedAmount);\\n    }\\n\\n    function stakeWithVault(\\n        uint256 _originAmount,\\n        uint256 _lockedAmount,\\n        address _referrer\\n    ) external {\\n        require(availableToStakeThroughVault(), \\\"pool: not allow to stake after vesting start\\\");\\n        \\n        address sender = msg.sender;\\n        VestingSchedule storage vestingSchedule = vestingSchedules[sender];\\n\\n        require(vestingSchedule.beneficiary == sender, \\\"pool: vesting schedule not existed\\\");\\n        require(soldToken.allowance(sender, address(this)) >= _originAmount, \\\"pool: allowance not enough\\\");\\n        require(vestingSchedule.amountTotal >= _lockedAmount, \\\"pool: vesting schedule amount total not enough to cover staking\\\");\\n        \\n        if (_originAmount > 0) {\\n            TransferHelper.safeTransferFrom(address(soldToken), _msgSender(), address(this), _originAmount);\\n            soldToken.approve(DWStaking, _originAmount);\\n        }\\n\\n        IDChainStaking(DWStaking).depositByVault(_originAmount, _lockedAmount, sender, _referrer);\\n    \\n        vestingSchedule.amountTotal -= _lockedAmount;\\n    }\\n\\n    function buyTokenWithToken(address _offerToken, address _beneficiary, uint256 _amount) external whenNotPaused nonReentrant {\\n        OfferedCurrency memory offeredCurrency = offeredCurrencies[_offerToken];\\n        \\n        require(offeredCurrency.rate != 0, \\\"PresalePool::Offer currency rate is invalid!\\\");\\n        require(_validPurchase(), \\\"PresalePool::Pool is ended!\\\");\\n        require(_verifyAllowance(msg.sender, _offerToken, _amount), \\\"PresalePool::Allowance for offered token unreached!\\\");\\n\\n        uint soldTokenAmount = _getSoldTokensByOfferedCurrency(_offerToken, _amount);\\n        require(soldTokenAmount + totalSold <= totalRaiseAmount, \\\"PresalePool::Purchase amount exceeds max amount!\\\");\\n\\n        _forwardFundTransfer(_offerToken, _amount);\\n\\n        pendingSoldTokenClaim[_beneficiary] += soldTokenAmount;\\n\\n        totalRaised = totalRaised + _amount;\\n        totalSold = totalSold + soldTokenAmount;\\n\\n        emit BuyTokenByToken(_msgSender(), _offerToken, _beneficiary, _amount, soldTokenAmount);\\n    }\\n\\n    function claim(address _beneficiary) external whenNotPaused nonReentrant {\\n        uint pendingTokenAmount = pendingSoldTokenClaim[_msgSender()];\\n\\n        require(block.timestamp > closeTime, \\\"pool: sale is not ended\\\");\\n        require(block.timestamp <= closeTime + lockBeforeVesting, \\\"pool: claim time is ended\\\");\\n        require(pendingTokenAmount > 0, \\\"pool: pending claim amount must be positive\\\");\\n\\n        // Calculate TGE Amount\\n        uint tgeAmount = pendingTokenAmount * tgePercentage / PRECISION_POINT;\\n        uint remainmingAmount = pendingTokenAmount - tgeAmount;\\n\\n        // Deliver TGE Amount to user's beneficiary address\\n        if (tgeAmount > 0) {\\n            _deliverTokens(_beneficiary, tgeAmount);\\n        }\\n\\n        VestingSchedule storage vestingSchedule = vestingSchedules[_beneficiary];\\n\\n        if (vestingSchedule.beneficiary == address(0)) {\\n            _createVestingSchedule(_beneficiary, closeTime + lockBeforeVesting, 0, vestingDuration, vestingPeriodInSeconds, true, remainmingAmount);\\n        } else {\\n            vestingSchedule.amountTotal += remainmingAmount;\\n        }\\n\\n        pendingSoldTokenClaim[_msgSender()] = 0;\\n        \\n        emit PendingSoldTokenClaimed(\\n            _msgSender(),\\n            _beneficiary,\\n            pendingTokenAmount   \\n        );\\n    }\\n\\n    function setTGEPercentage(uint256 _tgePercentage) external onlyAdmin {\\n        require(_tgePercentage <= PRECISION_POINT, \\\"EOP\\\");\\n        tgePercentage = _tgePercentage;\\n    }\\n\\n    function setTotalRaiseAmount(uint256 _totalRaiseAmount) external onlyAdmin {\\n        totalRaiseAmount = _totalRaiseAmount;\\n    }\\n\\n    // how to convert from 1 Token - to $\\n    function setOfferedCurrency(address _currency, uint _rate, uint _decimals) external onlyAdmin {\\n        OfferedCurrency storage offeredCurrency = offeredCurrencies[_currency];\\n        offeredCurrency.rate = _rate;\\n        offeredCurrency.decimals = _decimals;\\n    }\\n\\n    function releasableAmount(address _user) external view returns(uint) {\\n        return _computeReleasableAmount(vestingSchedules[_user]);\\n    }\\n\\n    function availableToStakeThroughVault() public view returns(bool) {\\n        return block.timestamp <= closeTime + lockBeforeVesting;\\n    }\\n\\n      function _verifyAllowance(address _user, address _token, uint _amount) internal view returns(bool) {\\n        uint allowance = IERC20(_token).allowance(_user, address(this));\\n        return allowance >= _amount;\\n    }\\n\\n    function _getSoldTokensByOfferedCurrency(address _token, uint _amount) internal view returns(uint) {\\n        OfferedCurrency memory offeredCurrency = offeredCurrencies[_token];\\n        return _amount * offeredCurrency.rate / (10 ** offeredCurrency.decimals);      \\n    }\\n\\n    function _deliverTokens(address _beneficiary, uint _amount) internal {\\n        TransferHelper.safeTransferFrom(address(soldToken), treasury, _beneficiary, _amount);\\n    }\\n\\n    function _forwardFundTransfer(address _token, uint _value) internal {\\n        TransferHelper.safeTransferFrom(_token, _msgSender(), fundReceiver, _value);\\n    }\\n\\n    function _validPurchase() internal view returns(bool) {\\n        bool withinPerioid = block.timestamp >= openTime && block.timestamp <= closeTime;\\n        return withinPerioid;\\n    }\\n\\n    /**\\n     * @dev Computes the releasable amount of tokens for a vesting schedule.\\n     * @return the amount of releasable tokens\\n     */\\n    function _computeReleasableAmount(\\n        VestingSchedule memory vestingSchedule\\n    ) internal view returns (uint256) {\\n        // Retrieve the current time.\\n        uint256 currentTime = block.timestamp;\\n        // If the current time is before the cliff, no tokens are releasable.\\n        if ((currentTime < vestingSchedule.cliff) || vestingSchedule.revoked) {\\n            return 0;\\n        }\\n        // If the current time is after the vesting period, all tokens are releasable,\\n        // minus the amount already released.\\n        else if (\\n            currentTime >= vestingSchedule.start + vestingSchedule.duration\\n        ) {\\n            return vestingSchedule.amountTotal - vestingSchedule.released;\\n        }\\n        // Otherwise, some tokens are releasable.\\n        else {\\n            // Compute the number of full vesting periods that have elapsed.\\n            uint256 timeFromStart = currentTime - vestingSchedule.start;\\n            uint256 secondsPerSlice = vestingSchedule.slicePeriodSeconds;\\n            uint256 vestedSlicePeriods = timeFromStart / secondsPerSlice;\\n            uint256 vestedSeconds = vestedSlicePeriods * secondsPerSlice;\\n            // Compute the amount of tokens that are vested.\\n            uint256 vestedAmount = (vestingSchedule.amountTotal *\\n                vestedSeconds) / vestingSchedule.duration;\\n            // Subtract the amount already released and return.\\n            return vestedAmount - vestingSchedule.released;\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates a new vesting schedule for a beneficiary.\\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\\n     * @param _start start time of the vesting period\\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\\n     * @param _duration duration in seconds of the period in which the tokens will vest\\n     * @param _slicePeriodSeconds duration of a slice period for the vesting in seconds\\n     * @param _revocable whether the vesting is revocable or not\\n     * @param _amount total amount of tokens to be released at the end of the vesting\\n     */\\n    function _createVestingSchedule(\\n        address _beneficiary,\\n        uint256 _start,\\n        uint256 _cliff,\\n        uint256 _duration,\\n        uint256 _slicePeriodSeconds,\\n        bool _revocable,\\n        uint256 _amount\\n    ) internal {\\n        require(_duration > 0, \\\"TokenVesting: duration must be > 0\\\");\\n        require(_amount > 0, \\\"TokenVesting: amount must be > 0\\\");\\n        require(\\n            _slicePeriodSeconds >= 1,\\n            \\\"TokenVesting: slicePeriodSeconds must be >= 1\\\"\\n        );\\n        require(_duration >= _cliff, \\\"TokenVesting: duration must be >= cliff\\\");\\n        uint256 cliff = _start + _cliff;\\n        vestingSchedules[_beneficiary] = VestingSchedule(\\n            _beneficiary,\\n            cliff,\\n            _start,\\n            _duration,\\n            _slicePeriodSeconds,\\n            _revocable,\\n            _amount,\\n            0,\\n            false\\n        );\\n\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount + _amount;\\n    }\\n\\n    /// --------------------------------\\n    /// ------- Modifier Function ------\\n    /// --------------------------------\\n}\",\"keccak256\":\"0x371f7e3b5dd03a1a98241852bce34fc1597740b2860669ca0294b46b9d69dbf8\",\"license\":\"MIT\"},\"contracts/interfaces/IDChainStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDChainStaking {\\n    function depositByVault(uint256 _originAmount, uint _lockedAmount, address _user, address referrer) external;\\n    // function stakingContracts(uint256 contractId) external view returns()\\n}\\n\",\"keccak256\":\"0x0395dcdf03f77227fa715c885e882a31e16da601ec1592b8a22c32d0b0fdbc9e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"import {IERC20 as IOpenZeppelinERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20 is IOpenZeppelinERC20 {\\n    function burn(uint256 amount) external;\\n}\",\"keccak256\":\"0x04dbf5ffc124aeb13c19a6146bd14b8eedf5a5b8e8181e2fe3230e2d57b7717d\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\",\"keccak256\":\"0x6c5e818daa61fc1b440ac7a1162f85eed19af7c17b06b90292b038e5b63cbe2c\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506127d3806100206000396000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c806370e6bf4d1161013b578063b6db75a0116100b8578063e58378bb1161007c578063e58378bb14610510578063e63ab1e914610525578063f851a4401461053a578063fb4aa0a11461054e578063fdb20ccb1461056257600080fd5b8063b6db75a0146104c5578063c5c4744c146104cd578063cc21d023146104d7578063cc3c70cf146104ea578063d547741f146104fd57600080fd5b8063a217fddf116100ff578063a217fddf14610497578063ae5ff7851461049f578063b1f1215c146104a9578063b3679bda146104b1578063b4256888146104bb57600080fd5b806370e6bf4d1461045557806386d1a69f1461045f5780638c8c2cee146104675780639106d7ba1461047a57806391d148541461048457600080fd5b806346e73271116101c9578063627749e61161018d578063627749e6146103fd57806362d6306f14610407578063657efde61461041a5780636769d1f91461042d5780636a736cea1461044157600080fd5b806346e73271146103595780635a3a85cb1461036c5780635b889e6e146103bc5780635c975abb146103c657806361d027b3146103d157600080fd5b8063248a9ca311610210578063248a9ca3146102dc5780632f2ff15d146102ff578063339fb6241461031257806336568abe146103335780633bcbfbc11461034657600080fd5b806301ffc9a71461024d578063022f2354146102755780631514617e146102aa5780631726cbc8146102b45780631e83409a146102c7575b600080fd5b61026061025b36600461238d565b61061e565b60405190151581526020015b60405180910390f35b61029c7fd2e4c2619ea6e0faebc405d89445161c041e30fe03373ea0473da142d57d451481565b60405190815260200161026c565b61029c6101c75481565b61029c6102c23660046121fa565b610655565b6102da6102d53660046121fa565b6106e9565b005b61029c6102ea366004612346565b60009081526065602052604090206001015490565b6102da61030d36600461235e565b610933565b61029c6103203660046121fa565b6101d36020526000908152604090205481565b6102da61034136600461235e565b61095d565b6102da610354366004612346565b6109db565b6102da610367366004612256565b610a27565b61039f61037a3660046121fa565b6101d26020526000908152604090208054600182015460029092015490919060ff1683565b60408051938452602084019290925215159082015260600161026c565b61029c6101c35481565b60975460ff16610260565b6101c9546103e5906001600160a01b031681565b6040516001600160a01b03909116815260200161026c565b61029c6101c55481565b6102da6104153660046121fa565b610c8e565b6102da6104283660046122f2565b610dc9565b6101cd546103e5906001600160a01b031681565b6101cc546103e5906001600160a01b031681565b61029c6101c65481565b6102da610e12565b6102da610475366004612346565b611034565b61029c6101d05481565b61026061049236600461235e565b61105e565b61029c600081565b61029c6101c85481565b610260611089565b61029c6101ce5481565b61029c6101c45481565b6102606110a5565b61029c6101cf5481565b6102da6104e5366004612216565b6110c4565b6102da6104f83660046123cd565b61137f565b6102da61050b36600461235e565b6116e9565b61029c60008051602061275e83398151915281565b61029c60008051602061277e83398151915281565b6101ca546103e5906001600160a01b031681565b6101cb546103e5906001600160a01b031681565b6105cc6105703660046121fa565b6101d4602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460078801546008909801546001600160a01b0390971697959694959394929360ff92831693919290911689565b604080516001600160a01b03909a168a5260208a01989098529688019590955260608701939093526080860191909152151560a085015260c084015260e083015215156101008201526101200161026c565b60006001600160e01b03198216637965db0b60e01b148061064f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b0380821660009081526101d460209081526040808320815161012081018352815490951685526001810154928501929092526002820154908401526003810154606084015260048101546080840152600581015460ff908116151560a0850152600682015460c0850152600782015460e08501526008909101541615156101008301529061064f9061170e565b6106f16117df565b6106f9611825565b3360009081526101d360205260409020546101c554421161075b5760405162461bcd60e51b81526020600482015260176024820152761c1bdbdb0e881cd85b19481a5cc81b9bdd08195b991959604a1b60448201526064015b60405180910390fd5b6101c6546101c55461076d9190612592565b4211156107b85760405162461bcd60e51b81526020600482015260196024820152781c1bdbdb0e8818db185a5b481d1a5b59481a5cc8195b991959603a1b6044820152606401610752565b6000811161081c5760405162461bcd60e51b815260206004820152602b60248201527f706f6f6c3a2070656e64696e6720636c61696d20616d6f756e74206d7573742060448201526a626520706f73697469766560a81b6064820152608401610752565b60006127106101c3548361083091906126b5565b61083a91906125aa565b9050600061084882846126d4565b9050811561085a5761085a848361187f565b6001600160a01b0380851660009081526101d46020526040902080549091166108aa576108a5856101c6546101c5546108939190612592565b60006101c7546101c85460018861189f565b6108c4565b818160060160008282546108be9190612592565b90915550505b3360008181526101d360205260408120556001600160a01b038616906001600160a01b03167f62184397e6a3fbbb9cd9b7aeba604a3ad439665f9fc7b58126dab25b0b3310f98660405161091a91815260200190565b60405180910390a350505050610930600160c955565b50565b60008281526065602052604090206001015461094e81611b0e565b6109588383611b18565b505050565b6001600160a01b03811633146109cd5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610752565b6109d78282611b9e565b5050565b6109e36110a5565b6109ff5760405162461bcd60e51b815260040161075290612547565b612710811115610a215760405162461bcd60e51b81526004016107529061252a565b6101c355565b600054610100900460ff1615808015610a475750600054600160ff909116105b80610a615750303b158015610a61575060005460ff166001145b610ac45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610752565b6000805460ff191660011790558015610ae7576000805461ff0019166101001790555b610af08b610c8e565b6001600160a01b038716610b165760405162461bcd60e51b8152600401610752906124c3565b6001600160a01b038a16610b3c5760405162461bcd60e51b8152600401610752906124c3565b6001600160a01b038916610b625760405162461bcd60e51b8152600401610752906124c3565b6001600160a01b038816610b885760405162461bcd60e51b8152600401610752906124c3565b612710861115610baa5760405162461bcd60e51b81526004016107529061252a565b6101c4839055610bba8284612592565b6101c5556101c68490556101cd80546001600160a01b03808d166001600160a01b0319928316179092556101c980548c84169083161790556101cb80548b84169083161790556101cc8054928a16928216929092179091556101ce8690556101c38790556101ca80549091163317905563031704006101c75562278d006101c8558015610c81576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b600054610100900460ff16610cb55760405162461bcd60e51b8152600401610752906124df565b6001600160a01b038116610d0b5760405162461bcd60e51b815260206004820181905260248201527f4f776e65722063616e6e6f7420626520746865207a65726f20616464726573736044820152606401610752565b610d13611c05565b610d1b611c2c565b610d23611c5b565b610d3b60008051602061275e83398151915282611c8a565b610d5360008051602061277e83398151915282611c8a565b610d8b7fd2e4c2619ea6e0faebc405d89445161c041e30fe03373ea0473da142d57d451460008051602061275e833981519152611c94565b610db160008051602061277e83398151915260008051602061275e833981519152611c94565b61093060008051602061275e83398151915280611c94565b610dd16110a5565b610ded5760405162461bcd60e51b815260040161075290612547565b6001600160a01b0390921660009081526101d260205260409020600181019190915555565b610e1a611825565b3360008181526101d460205260409020805490916001600160a01b039091161480610ea85760405162461bcd60e51b815260206004820152603860248201527f546f6b656e56657374696e673a206f6e6c792062656e65666963696172792063604482015277616e2072656c656173652076657374656420746f6b656e7360401b6064820152608401610752565b604080516101208101825283546001600160a01b03168152600184015460208201526002840154918101919091526003830154606082015260048301546080820152600583015460ff908116151560a0830152600684015460c0830152600784015460e08301526008840154161515610100820152600090610f299061170e565b905060008111610fa15760405162461bcd60e51b815260206004820152603d60248201527f546f6b656e56657374696e673a2063616e6e6f742072656c6561736520746f6b60448201527f656e732c206e6f7420656e6f7567682076657374656420746f6b656e730000006064820152608401610752565b808360070154610fb19190612592565b600784015582546101d1546001600160a01b0390911690610fd39083906126d4565b6101d155610fe1818361187f565b806001600160a01b03167f9cf9e3ab58b33f06d81842ea0ad850b6640c6430d6396973312e1715792e7a918360405161101c91815260200190565b60405180910390a250505050611032600160c955565b565b61103c6110a5565b6110585760405162461bcd60e51b815260040161075290612547565b6101ce55565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006101c6546101c55461109d9190612592565b421115905090565b60006110bf60008051602061275e8339815191523361105e565b905090565b6110cc6117df565b6110d4611825565b6001600160a01b03831660009081526101d26020908152604091829020825160608101845281548152600182015492810183905260029091015460ff1615159281019290925261117b5760405162461bcd60e51b815260206004820152602c60248201527f50726573616c65506f6f6c3a3a4f666665722063757272656e6379207261746560448201526b20697320696e76616c69642160a01b6064820152608401610752565b611183611cdf565b6111cf5760405162461bcd60e51b815260206004820152601b60248201527f50726573616c65506f6f6c3a3a506f6f6c20697320656e6465642100000000006044820152606401610752565b6111da338584611cfd565b6112425760405162461bcd60e51b815260206004820152603360248201527f50726573616c65506f6f6c3a3a416c6c6f77616e636520666f72206f66666572604482015272656420746f6b656e20756e726561636865642160681b6064820152608401610752565b600061124e8584611d8d565b90506101ce546101d054826112639190612592565b11156112ca5760405162461bcd60e51b815260206004820152603060248201527f50726573616c65506f6f6c3a3a507572636861736520616d6f756e742065786360448201526f65656473206d617820616d6f756e742160801b6064820152608401610752565b6112d48584611e01565b6001600160a01b03841660009081526101d36020526040812080548392906112fd908490612592565b90915550506101cf54611311908490612592565b6101cf556101d054611324908290612592565b6101d05560408051848152602081018390526001600160a01b03868116929088169133917f0eb64e5e4e82e4f05908b1b3d0f57d3c46b43a50a7e86944ee4b914d1a9a9270910160405180910390a45050610958600160c955565b611387611089565b6113e85760405162461bcd60e51b815260206004820152602c60248201527f706f6f6c3a206e6f7420616c6c6f7720746f207374616b65206166746572207660448201526b195cdd1a5b99c81cdd185c9d60a21b6064820152608401610752565b3360008181526101d46020526040902080546001600160a01b0316821461145c5760405162461bcd60e51b815260206004820152602260248201527f706f6f6c3a2076657374696e67207363686564756c65206e6f74206578697374604482015261195960f21b6064820152608401610752565b6101cd54604051636eb1769f60e11b81526001600160a01b0384811660048301523060248301528792169063dd62ed3e9060440160206040518083038186803b1580156114a857600080fd5b505afa1580156114bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e091906123b5565b101561152e5760405162461bcd60e51b815260206004820152601a60248201527f706f6f6c3a20616c6c6f77616e6365206e6f7420656e6f7567680000000000006044820152606401610752565b83816006015410156115a85760405162461bcd60e51b815260206004820152603f60248201527f706f6f6c3a2076657374696e67207363686564756c6520616d6f756e7420746f60448201527f74616c206e6f7420656e6f75676820746f20636f766572207374616b696e67006064820152608401610752565b8415611653576101cd546115c7906001600160a01b0316333088611e15565b6101cd546101cc5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810188905291169063095ea7b390604401602060405180830381600087803b15801561161957600080fd5b505af115801561162d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116519190612326565b505b6101cc54604051638e1303d760e01b815260048101879052602481018690526001600160a01b038481166044830152858116606483015290911690638e1303d790608401600060405180830381600087803b1580156116b157600080fd5b505af11580156116c5573d6000803e3d6000fd5b50505050838160060160008282546116dd91906126d4565b90915550505050505050565b60008281526065602052604090206001015461170481611b0e565b6109588383611b9e565b6020810151600090429081108061172757508261010001515b156117355750600092915050565b826060015183604001516117499190612592565b811061176a578260e001518360c0015161176391906126d4565b9392505050565b600083604001518261177c91906126d4565b6080850151909150600061179082846125aa565b9050600061179e83836126b5565b905060008760600151828960c001516117b791906126b5565b6117c191906125aa565b90508760e00151816117d391906126d4565b98975050505050505050565b60975460ff16156110325760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610752565b600260c95414156118785760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610752565b600260c955565b6101cd546101c9546109d7916001600160a01b0390811691168484611e15565b600084116118fa5760405162461bcd60e51b815260206004820152602260248201527f546f6b656e56657374696e673a206475726174696f6e206d757374206265203e604482015261020360f41b6064820152608401610752565b6000811161194a5760405162461bcd60e51b815260206004820181905260248201527f546f6b656e56657374696e673a20616d6f756e74206d757374206265203e20306044820152606401610752565b60018310156119b15760405162461bcd60e51b815260206004820152602d60248201527f546f6b656e56657374696e673a20736c696365506572696f645365636f6e647360448201526c206d757374206265203e3d203160981b6064820152608401610752565b84841015611a115760405162461bcd60e51b815260206004820152602760248201527f546f6b656e56657374696e673a206475726174696f6e206d757374206265203e6044820152661e9031b634b33360c91b6064820152608401610752565b6000611a1d8688612592565b60408051610120810182526001600160a01b03808c1680835260208084018681528486018e8152606086018d8152608087018d81528c151560a0890190815260c089018d8152600060e08b018181526101008c018281529982526101d49098529a909a209851895498166001600160a01b03199098169790971788559251600188015590516002870155516003860155516004850155915160058401805491151560ff1992831617905593516006840155905160078301555160089091018054911515919092161790556101d154909150611af9908390612592565b6101d1555050505050505050565b600160c955565b6109308133611f53565b611b22828261105e565b6109d75760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611b5a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611ba8828261105e565b156109d75760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff166110325760405162461bcd60e51b8152600401610752906124df565b600054610100900460ff16611c535760405162461bcd60e51b8152600401610752906124df565b611032611fac565b600054610100900460ff16611c825760405162461bcd60e51b8152600401610752906124df565b611032611fdf565b6109d78282611b18565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000806101c454421015801561064f57506101c55442111592915050565b604051636eb1769f60e11b81526001600160a01b038481166004830152306024830152600091829185169063dd62ed3e9060440160206040518083038186803b158015611d4957600080fd5b505afa158015611d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8191906123b5565b90921115949350505050565b6001600160a01b03821660009081526101d2602090815260408083208151606081018352815480825260018301549482019490945260029091015460ff1615159181019190915290611de090600a61260d565b6020820151611def90856126b5565b611df991906125aa565b949350505050565b6109d782336101cb546001600160a01b0316845b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691611e799190612405565b6000604051808303816000865af19150503d8060008114611eb6576040519150601f19603f3d011682016040523d82523d6000602084013e611ebb565b606091505b5091509150818015611ee5575080511580611ee5575080806020019051810190611ee59190612326565b611f4b5760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b6064820152608401610752565b505050505050565b611f5d828261105e565b6109d757611f6a81612006565b611f75836020612018565b604051602001611f86929190612421565b60408051601f198184030181529082905262461bcd60e51b825261075291600401612490565b600054610100900460ff16611fd35760405162461bcd60e51b8152600401610752906124df565b6097805460ff19169055565b600054610100900460ff16611b075760405162461bcd60e51b8152600401610752906124df565b606061064f6001600160a01b03831660145b606060006120278360026126b5565b612032906002612592565b67ffffffffffffffff81111561205857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612082576020820181803683370190505b509050600360fc1b816000815181106120ab57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106120e857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061210c8460026126b5565b612117906001612592565b90505b60018111156121ab576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061215957634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061217d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936121a48161271b565b905061211a565b5083156117635760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610752565b60006020828403121561220b578081fd5b813561176381612748565b60008060006060848603121561222a578182fd5b833561223581612748565b9250602084013561224581612748565b929592945050506040919091013590565b6000806000806000806000806000806101408b8d031215612275578586fd5b8a3561228081612748565b995060208b013561229081612748565b985060408b01356122a081612748565b975060608b01356122b081612748565b965060808b01356122c081612748565b999c989b50969995989760a0870135975060c08701359660e08101359650610100810135955061012001359350915050565b600080600060608486031215612306578283fd5b833561231181612748565b95602085013595506040909401359392505050565b600060208284031215612337578081fd5b81518015158114611763578182fd5b600060208284031215612357578081fd5b5035919050565b60008060408385031215612370578182fd5b82359150602083013561238281612748565b809150509250929050565b60006020828403121561239e578081fd5b81356001600160e01b031981168114611763578182fd5b6000602082840312156123c6578081fd5b5051919050565b6000806000606084860312156123e1578283fd5b833592506020840135915060408401356123fa81612748565b809150509250925092565b600082516124178184602087016126eb565b9190910192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8152600083516124538160178501602088016126eb565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516124848160288401602088016126eb565b01602801949350505050565b60208152600082518060208401526124af8160408501602087016126eb565b601f01601f19169190910160400192915050565b6020808252600290820152615a4160f01b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252600390820152620454f560ec1b604082015260600190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b600082198211156125a5576125a5612732565b500190565b6000826125c557634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156126055781600019048211156125eb576125eb612732565b808516156125f857918102915b93841c93908002906125cf565b509250929050565b600061176383836000826126235750600161064f565b816126305750600061064f565b816001811461264657600281146126505761266c565b600191505061064f565b60ff84111561266157612661612732565b50506001821b61064f565b5060208310610133831016604e8410600b841016171561268f575081810a61064f565b61269983836125ca565b80600019048211156126ad576126ad612732565b029392505050565b60008160001904831182151516156126cf576126cf612732565b500290565b6000828210156126e6576126e6612732565b500390565b60005b838110156127065781810151838201526020016126ee565b83811115612715576000848401525b50505050565b60008161272a5761272a612732565b506000190190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461093057600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa26469706673582212200c0ce91300ad763b0a0ee5268ee79b676219de4d4ba1c49d6ec68df0813f02ba64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102485760003560e01c806370e6bf4d1161013b578063b6db75a0116100b8578063e58378bb1161007c578063e58378bb14610510578063e63ab1e914610525578063f851a4401461053a578063fb4aa0a11461054e578063fdb20ccb1461056257600080fd5b8063b6db75a0146104c5578063c5c4744c146104cd578063cc21d023146104d7578063cc3c70cf146104ea578063d547741f146104fd57600080fd5b8063a217fddf116100ff578063a217fddf14610497578063ae5ff7851461049f578063b1f1215c146104a9578063b3679bda146104b1578063b4256888146104bb57600080fd5b806370e6bf4d1461045557806386d1a69f1461045f5780638c8c2cee146104675780639106d7ba1461047a57806391d148541461048457600080fd5b806346e73271116101c9578063627749e61161018d578063627749e6146103fd57806362d6306f14610407578063657efde61461041a5780636769d1f91461042d5780636a736cea1461044157600080fd5b806346e73271146103595780635a3a85cb1461036c5780635b889e6e146103bc5780635c975abb146103c657806361d027b3146103d157600080fd5b8063248a9ca311610210578063248a9ca3146102dc5780632f2ff15d146102ff578063339fb6241461031257806336568abe146103335780633bcbfbc11461034657600080fd5b806301ffc9a71461024d578063022f2354146102755780631514617e146102aa5780631726cbc8146102b45780631e83409a146102c7575b600080fd5b61026061025b36600461238d565b61061e565b60405190151581526020015b60405180910390f35b61029c7fd2e4c2619ea6e0faebc405d89445161c041e30fe03373ea0473da142d57d451481565b60405190815260200161026c565b61029c6101c75481565b61029c6102c23660046121fa565b610655565b6102da6102d53660046121fa565b6106e9565b005b61029c6102ea366004612346565b60009081526065602052604090206001015490565b6102da61030d36600461235e565b610933565b61029c6103203660046121fa565b6101d36020526000908152604090205481565b6102da61034136600461235e565b61095d565b6102da610354366004612346565b6109db565b6102da610367366004612256565b610a27565b61039f61037a3660046121fa565b6101d26020526000908152604090208054600182015460029092015490919060ff1683565b60408051938452602084019290925215159082015260600161026c565b61029c6101c35481565b60975460ff16610260565b6101c9546103e5906001600160a01b031681565b6040516001600160a01b03909116815260200161026c565b61029c6101c55481565b6102da6104153660046121fa565b610c8e565b6102da6104283660046122f2565b610dc9565b6101cd546103e5906001600160a01b031681565b6101cc546103e5906001600160a01b031681565b61029c6101c65481565b6102da610e12565b6102da610475366004612346565b611034565b61029c6101d05481565b61026061049236600461235e565b61105e565b61029c600081565b61029c6101c85481565b610260611089565b61029c6101ce5481565b61029c6101c45481565b6102606110a5565b61029c6101cf5481565b6102da6104e5366004612216565b6110c4565b6102da6104f83660046123cd565b61137f565b6102da61050b36600461235e565b6116e9565b61029c60008051602061275e83398151915281565b61029c60008051602061277e83398151915281565b6101ca546103e5906001600160a01b031681565b6101cb546103e5906001600160a01b031681565b6105cc6105703660046121fa565b6101d4602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460078801546008909801546001600160a01b0390971697959694959394929360ff92831693919290911689565b604080516001600160a01b03909a168a5260208a01989098529688019590955260608701939093526080860191909152151560a085015260c084015260e083015215156101008201526101200161026c565b60006001600160e01b03198216637965db0b60e01b148061064f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b0380821660009081526101d460209081526040808320815161012081018352815490951685526001810154928501929092526002820154908401526003810154606084015260048101546080840152600581015460ff908116151560a0850152600682015460c0850152600782015460e08501526008909101541615156101008301529061064f9061170e565b6106f16117df565b6106f9611825565b3360009081526101d360205260409020546101c554421161075b5760405162461bcd60e51b81526020600482015260176024820152761c1bdbdb0e881cd85b19481a5cc81b9bdd08195b991959604a1b60448201526064015b60405180910390fd5b6101c6546101c55461076d9190612592565b4211156107b85760405162461bcd60e51b81526020600482015260196024820152781c1bdbdb0e8818db185a5b481d1a5b59481a5cc8195b991959603a1b6044820152606401610752565b6000811161081c5760405162461bcd60e51b815260206004820152602b60248201527f706f6f6c3a2070656e64696e6720636c61696d20616d6f756e74206d7573742060448201526a626520706f73697469766560a81b6064820152608401610752565b60006127106101c3548361083091906126b5565b61083a91906125aa565b9050600061084882846126d4565b9050811561085a5761085a848361187f565b6001600160a01b0380851660009081526101d46020526040902080549091166108aa576108a5856101c6546101c5546108939190612592565b60006101c7546101c85460018861189f565b6108c4565b818160060160008282546108be9190612592565b90915550505b3360008181526101d360205260408120556001600160a01b038616906001600160a01b03167f62184397e6a3fbbb9cd9b7aeba604a3ad439665f9fc7b58126dab25b0b3310f98660405161091a91815260200190565b60405180910390a350505050610930600160c955565b50565b60008281526065602052604090206001015461094e81611b0e565b6109588383611b18565b505050565b6001600160a01b03811633146109cd5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610752565b6109d78282611b9e565b5050565b6109e36110a5565b6109ff5760405162461bcd60e51b815260040161075290612547565b612710811115610a215760405162461bcd60e51b81526004016107529061252a565b6101c355565b600054610100900460ff1615808015610a475750600054600160ff909116105b80610a615750303b158015610a61575060005460ff166001145b610ac45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610752565b6000805460ff191660011790558015610ae7576000805461ff0019166101001790555b610af08b610c8e565b6001600160a01b038716610b165760405162461bcd60e51b8152600401610752906124c3565b6001600160a01b038a16610b3c5760405162461bcd60e51b8152600401610752906124c3565b6001600160a01b038916610b625760405162461bcd60e51b8152600401610752906124c3565b6001600160a01b038816610b885760405162461bcd60e51b8152600401610752906124c3565b612710861115610baa5760405162461bcd60e51b81526004016107529061252a565b6101c4839055610bba8284612592565b6101c5556101c68490556101cd80546001600160a01b03808d166001600160a01b0319928316179092556101c980548c84169083161790556101cb80548b84169083161790556101cc8054928a16928216929092179091556101ce8690556101c38790556101ca80549091163317905563031704006101c75562278d006101c8558015610c81576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b600054610100900460ff16610cb55760405162461bcd60e51b8152600401610752906124df565b6001600160a01b038116610d0b5760405162461bcd60e51b815260206004820181905260248201527f4f776e65722063616e6e6f7420626520746865207a65726f20616464726573736044820152606401610752565b610d13611c05565b610d1b611c2c565b610d23611c5b565b610d3b60008051602061275e83398151915282611c8a565b610d5360008051602061277e83398151915282611c8a565b610d8b7fd2e4c2619ea6e0faebc405d89445161c041e30fe03373ea0473da142d57d451460008051602061275e833981519152611c94565b610db160008051602061277e83398151915260008051602061275e833981519152611c94565b61093060008051602061275e83398151915280611c94565b610dd16110a5565b610ded5760405162461bcd60e51b815260040161075290612547565b6001600160a01b0390921660009081526101d260205260409020600181019190915555565b610e1a611825565b3360008181526101d460205260409020805490916001600160a01b039091161480610ea85760405162461bcd60e51b815260206004820152603860248201527f546f6b656e56657374696e673a206f6e6c792062656e65666963696172792063604482015277616e2072656c656173652076657374656420746f6b656e7360401b6064820152608401610752565b604080516101208101825283546001600160a01b03168152600184015460208201526002840154918101919091526003830154606082015260048301546080820152600583015460ff908116151560a0830152600684015460c0830152600784015460e08301526008840154161515610100820152600090610f299061170e565b905060008111610fa15760405162461bcd60e51b815260206004820152603d60248201527f546f6b656e56657374696e673a2063616e6e6f742072656c6561736520746f6b60448201527f656e732c206e6f7420656e6f7567682076657374656420746f6b656e730000006064820152608401610752565b808360070154610fb19190612592565b600784015582546101d1546001600160a01b0390911690610fd39083906126d4565b6101d155610fe1818361187f565b806001600160a01b03167f9cf9e3ab58b33f06d81842ea0ad850b6640c6430d6396973312e1715792e7a918360405161101c91815260200190565b60405180910390a250505050611032600160c955565b565b61103c6110a5565b6110585760405162461bcd60e51b815260040161075290612547565b6101ce55565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006101c6546101c55461109d9190612592565b421115905090565b60006110bf60008051602061275e8339815191523361105e565b905090565b6110cc6117df565b6110d4611825565b6001600160a01b03831660009081526101d26020908152604091829020825160608101845281548152600182015492810183905260029091015460ff1615159281019290925261117b5760405162461bcd60e51b815260206004820152602c60248201527f50726573616c65506f6f6c3a3a4f666665722063757272656e6379207261746560448201526b20697320696e76616c69642160a01b6064820152608401610752565b611183611cdf565b6111cf5760405162461bcd60e51b815260206004820152601b60248201527f50726573616c65506f6f6c3a3a506f6f6c20697320656e6465642100000000006044820152606401610752565b6111da338584611cfd565b6112425760405162461bcd60e51b815260206004820152603360248201527f50726573616c65506f6f6c3a3a416c6c6f77616e636520666f72206f66666572604482015272656420746f6b656e20756e726561636865642160681b6064820152608401610752565b600061124e8584611d8d565b90506101ce546101d054826112639190612592565b11156112ca5760405162461bcd60e51b815260206004820152603060248201527f50726573616c65506f6f6c3a3a507572636861736520616d6f756e742065786360448201526f65656473206d617820616d6f756e742160801b6064820152608401610752565b6112d48584611e01565b6001600160a01b03841660009081526101d36020526040812080548392906112fd908490612592565b90915550506101cf54611311908490612592565b6101cf556101d054611324908290612592565b6101d05560408051848152602081018390526001600160a01b03868116929088169133917f0eb64e5e4e82e4f05908b1b3d0f57d3c46b43a50a7e86944ee4b914d1a9a9270910160405180910390a45050610958600160c955565b611387611089565b6113e85760405162461bcd60e51b815260206004820152602c60248201527f706f6f6c3a206e6f7420616c6c6f7720746f207374616b65206166746572207660448201526b195cdd1a5b99c81cdd185c9d60a21b6064820152608401610752565b3360008181526101d46020526040902080546001600160a01b0316821461145c5760405162461bcd60e51b815260206004820152602260248201527f706f6f6c3a2076657374696e67207363686564756c65206e6f74206578697374604482015261195960f21b6064820152608401610752565b6101cd54604051636eb1769f60e11b81526001600160a01b0384811660048301523060248301528792169063dd62ed3e9060440160206040518083038186803b1580156114a857600080fd5b505afa1580156114bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e091906123b5565b101561152e5760405162461bcd60e51b815260206004820152601a60248201527f706f6f6c3a20616c6c6f77616e6365206e6f7420656e6f7567680000000000006044820152606401610752565b83816006015410156115a85760405162461bcd60e51b815260206004820152603f60248201527f706f6f6c3a2076657374696e67207363686564756c6520616d6f756e7420746f60448201527f74616c206e6f7420656e6f75676820746f20636f766572207374616b696e67006064820152608401610752565b8415611653576101cd546115c7906001600160a01b0316333088611e15565b6101cd546101cc5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810188905291169063095ea7b390604401602060405180830381600087803b15801561161957600080fd5b505af115801561162d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116519190612326565b505b6101cc54604051638e1303d760e01b815260048101879052602481018690526001600160a01b038481166044830152858116606483015290911690638e1303d790608401600060405180830381600087803b1580156116b157600080fd5b505af11580156116c5573d6000803e3d6000fd5b50505050838160060160008282546116dd91906126d4565b90915550505050505050565b60008281526065602052604090206001015461170481611b0e565b6109588383611b9e565b6020810151600090429081108061172757508261010001515b156117355750600092915050565b826060015183604001516117499190612592565b811061176a578260e001518360c0015161176391906126d4565b9392505050565b600083604001518261177c91906126d4565b6080850151909150600061179082846125aa565b9050600061179e83836126b5565b905060008760600151828960c001516117b791906126b5565b6117c191906125aa565b90508760e00151816117d391906126d4565b98975050505050505050565b60975460ff16156110325760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610752565b600260c95414156118785760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610752565b600260c955565b6101cd546101c9546109d7916001600160a01b0390811691168484611e15565b600084116118fa5760405162461bcd60e51b815260206004820152602260248201527f546f6b656e56657374696e673a206475726174696f6e206d757374206265203e604482015261020360f41b6064820152608401610752565b6000811161194a5760405162461bcd60e51b815260206004820181905260248201527f546f6b656e56657374696e673a20616d6f756e74206d757374206265203e20306044820152606401610752565b60018310156119b15760405162461bcd60e51b815260206004820152602d60248201527f546f6b656e56657374696e673a20736c696365506572696f645365636f6e647360448201526c206d757374206265203e3d203160981b6064820152608401610752565b84841015611a115760405162461bcd60e51b815260206004820152602760248201527f546f6b656e56657374696e673a206475726174696f6e206d757374206265203e6044820152661e9031b634b33360c91b6064820152608401610752565b6000611a1d8688612592565b60408051610120810182526001600160a01b03808c1680835260208084018681528486018e8152606086018d8152608087018d81528c151560a0890190815260c089018d8152600060e08b018181526101008c018281529982526101d49098529a909a209851895498166001600160a01b03199098169790971788559251600188015590516002870155516003860155516004850155915160058401805491151560ff1992831617905593516006840155905160078301555160089091018054911515919092161790556101d154909150611af9908390612592565b6101d1555050505050505050565b600160c955565b6109308133611f53565b611b22828261105e565b6109d75760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611b5a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611ba8828261105e565b156109d75760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff166110325760405162461bcd60e51b8152600401610752906124df565b600054610100900460ff16611c535760405162461bcd60e51b8152600401610752906124df565b611032611fac565b600054610100900460ff16611c825760405162461bcd60e51b8152600401610752906124df565b611032611fdf565b6109d78282611b18565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000806101c454421015801561064f57506101c55442111592915050565b604051636eb1769f60e11b81526001600160a01b038481166004830152306024830152600091829185169063dd62ed3e9060440160206040518083038186803b158015611d4957600080fd5b505afa158015611d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8191906123b5565b90921115949350505050565b6001600160a01b03821660009081526101d2602090815260408083208151606081018352815480825260018301549482019490945260029091015460ff1615159181019190915290611de090600a61260d565b6020820151611def90856126b5565b611df991906125aa565b949350505050565b6109d782336101cb546001600160a01b0316845b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691611e799190612405565b6000604051808303816000865af19150503d8060008114611eb6576040519150601f19603f3d011682016040523d82523d6000602084013e611ebb565b606091505b5091509150818015611ee5575080511580611ee5575080806020019051810190611ee59190612326565b611f4b5760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b6064820152608401610752565b505050505050565b611f5d828261105e565b6109d757611f6a81612006565b611f75836020612018565b604051602001611f86929190612421565b60408051601f198184030181529082905262461bcd60e51b825261075291600401612490565b600054610100900460ff16611fd35760405162461bcd60e51b8152600401610752906124df565b6097805460ff19169055565b600054610100900460ff16611b075760405162461bcd60e51b8152600401610752906124df565b606061064f6001600160a01b03831660145b606060006120278360026126b5565b612032906002612592565b67ffffffffffffffff81111561205857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612082576020820181803683370190505b509050600360fc1b816000815181106120ab57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106120e857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061210c8460026126b5565b612117906001612592565b90505b60018111156121ab576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061215957634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061217d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936121a48161271b565b905061211a565b5083156117635760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610752565b60006020828403121561220b578081fd5b813561176381612748565b60008060006060848603121561222a578182fd5b833561223581612748565b9250602084013561224581612748565b929592945050506040919091013590565b6000806000806000806000806000806101408b8d031215612275578586fd5b8a3561228081612748565b995060208b013561229081612748565b985060408b01356122a081612748565b975060608b01356122b081612748565b965060808b01356122c081612748565b999c989b50969995989760a0870135975060c08701359660e08101359650610100810135955061012001359350915050565b600080600060608486031215612306578283fd5b833561231181612748565b95602085013595506040909401359392505050565b600060208284031215612337578081fd5b81518015158114611763578182fd5b600060208284031215612357578081fd5b5035919050565b60008060408385031215612370578182fd5b82359150602083013561238281612748565b809150509250929050565b60006020828403121561239e578081fd5b81356001600160e01b031981168114611763578182fd5b6000602082840312156123c6578081fd5b5051919050565b6000806000606084860312156123e1578283fd5b833592506020840135915060408401356123fa81612748565b809150509250925092565b600082516124178184602087016126eb565b9190910192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8152600083516124538160178501602088016126eb565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516124848160288401602088016126eb565b01602801949350505050565b60208152600082518060208401526124af8160408501602087016126eb565b601f01601f19169190910160400192915050565b6020808252600290820152615a4160f01b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252600390820152620454f560ec1b604082015260600190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b600082198211156125a5576125a5612732565b500190565b6000826125c557634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156126055781600019048211156125eb576125eb612732565b808516156125f857918102915b93841c93908002906125cf565b509250929050565b600061176383836000826126235750600161064f565b816126305750600061064f565b816001811461264657600281146126505761266c565b600191505061064f565b60ff84111561266157612661612732565b50506001821b61064f565b5060208310610133831016604e8410600b841016171561268f575081810a61064f565b61269983836125ca565b80600019048211156126ad576126ad612732565b029392505050565b60008160001904831182151516156126cf576126cf612732565b500290565b6000828210156126e6576126e6612732565b500390565b60005b838110156127065781810151838201526020016126ee565b83811115612715576000848401525b50505050565b60008161272a5761272a612732565b506000190190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461093057600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa26469706673582212200c0ce91300ad763b0a0ee5268ee79b676219de4d4ba1c49d6ec68df0813f02ba64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "release()": {
        "notice": "Release vested amount of tokens."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 415,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 418,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2044,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2848,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 598,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 703,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 718,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 776,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4441,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "__gap1",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4445,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "__gap2",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4449,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "__gap3",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4453,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "__gap4",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7944,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "tgePercentage",
        "offset": 0,
        "slot": "451",
        "type": "t_uint256"
      },
      {
        "astId": 7946,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "openTime",
        "offset": 0,
        "slot": "452",
        "type": "t_uint256"
      },
      {
        "astId": 7948,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "closeTime",
        "offset": 0,
        "slot": "453",
        "type": "t_uint256"
      },
      {
        "astId": 7950,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "lockBeforeVesting",
        "offset": 0,
        "slot": "454",
        "type": "t_uint256"
      },
      {
        "astId": 7952,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "vestingDuration",
        "offset": 0,
        "slot": "455",
        "type": "t_uint256"
      },
      {
        "astId": 7954,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "vestingPeriodInSeconds",
        "offset": 0,
        "slot": "456",
        "type": "t_uint256"
      },
      {
        "astId": 7956,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "treasury",
        "offset": 0,
        "slot": "457",
        "type": "t_address"
      },
      {
        "astId": 7958,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "admin",
        "offset": 0,
        "slot": "458",
        "type": "t_address"
      },
      {
        "astId": 7960,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "fundReceiver",
        "offset": 0,
        "slot": "459",
        "type": "t_address"
      },
      {
        "astId": 7962,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "DWStaking",
        "offset": 0,
        "slot": "460",
        "type": "t_address"
      },
      {
        "astId": 7965,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "soldToken",
        "offset": 0,
        "slot": "461",
        "type": "t_contract(IERC20)8961"
      },
      {
        "astId": 7967,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "totalRaiseAmount",
        "offset": 0,
        "slot": "462",
        "type": "t_uint256"
      },
      {
        "astId": 7969,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "totalRaised",
        "offset": 0,
        "slot": "463",
        "type": "t_uint256"
      },
      {
        "astId": 7971,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "totalSold",
        "offset": 0,
        "slot": "464",
        "type": "t_uint256"
      },
      {
        "astId": 7973,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "vestingSchedulesTotalAmount",
        "offset": 0,
        "slot": "465",
        "type": "t_uint256"
      },
      {
        "astId": 7978,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "offeredCurrencies",
        "offset": 0,
        "slot": "466",
        "type": "t_mapping(t_address,t_struct(OfferedCurrency)7939_storage)"
      },
      {
        "astId": 7982,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "pendingSoldTokenClaim",
        "offset": 0,
        "slot": "467",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7987,
        "contract": "contracts/DWVault.sol:DWVault",
        "label": "vestingSchedules",
        "offset": 0,
        "slot": "468",
        "type": "t_mapping(t_address,t_struct(VestingSchedule)7932_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)8961": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(OfferedCurrency)7939_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DWVault.OfferedCurrency)",
        "numberOfBytes": "32",
        "value": "t_struct(OfferedCurrency)7939_storage"
      },
      "t_mapping(t_address,t_struct(VestingSchedule)7932_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DWVault.VestingSchedule)",
        "numberOfBytes": "32",
        "value": "t_struct(VestingSchedule)7932_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(OfferedCurrency)7939_storage": {
        "encoding": "inplace",
        "label": "struct DWVault.OfferedCurrency",
        "members": [
          {
            "astId": 7934,
            "contract": "contracts/DWVault.sol:DWVault",
            "label": "decimals",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7936,
            "contract": "contracts/DWVault.sol:DWVault",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7938,
            "contract": "contracts/DWVault.sol:DWVault",
            "label": "created",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/DWVault.sol:DWVault",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/DWVault.sol:DWVault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VestingSchedule)7932_storage": {
        "encoding": "inplace",
        "label": "struct DWVault.VestingSchedule",
        "members": [
          {
            "astId": 7915,
            "contract": "contracts/DWVault.sol:DWVault",
            "label": "beneficiary",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7917,
            "contract": "contracts/DWVault.sol:DWVault",
            "label": "cliff",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7919,
            "contract": "contracts/DWVault.sol:DWVault",
            "label": "start",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7921,
            "contract": "contracts/DWVault.sol:DWVault",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7923,
            "contract": "contracts/DWVault.sol:DWVault",
            "label": "slicePeriodSeconds",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7925,
            "contract": "contracts/DWVault.sol:DWVault",
            "label": "revocable",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 7927,
            "contract": "contracts/DWVault.sol:DWVault",
            "label": "amountTotal",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7929,
            "contract": "contracts/DWVault.sol:DWVault",
            "label": "released",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 7931,
            "contract": "contracts/DWVault.sol:DWVault",
            "label": "revoked",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}