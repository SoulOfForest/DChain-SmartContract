{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20PermitUpgradeable.sol\";\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../../../utils/cryptography/EIP712Upgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 51\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\n        __EIP712_init_unchained(name, \"1\");\n    }\n\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/DChainBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\n/**\n * @title HelixBase contract\n * @notice This is our Base contract that most other contracts inherit from. It includes many standard\n *  useful abilities like upgradeability, pausability, access control, and re-entrancy guards.\n * @author Helix\n */\n\ncontract DChainBase is\n    AccessControlUpgradeable,\n    PausableUpgradeable,\n    ReentrancyGuardUpgradeable\n{\n    bytes32 public constant SUB_ADMIN_ROLE = keccak256(\"SUB_ADMIN_ROLE\");\n    bytes32 public constant OWNER_ROLE = keccak256(\"OWNER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n    // Pre-reserving a few slots in the base contract in case we need to add things in the future.\n    // This does not actually take up gas cost or storage cost, but it does reserve the storage slots.\n    // See OpenZeppelin's use of this pattern here:\n    // https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L37\n    uint256[50] private __gap1;\n    uint256[50] private __gap2;\n    uint256[50] private __gap3;\n    uint256[50] private __gap4;\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __DChainBase_init(address owner) public onlyInitializing {\n        require(owner != address(0), \"Owner cannot be the zero address\");\n        __AccessControl_init();\n        __Pausable_init();\n        __ReentrancyGuard_init();\n\n        _setupRole(OWNER_ROLE, owner);\n        _setupRole(PAUSER_ROLE, owner);\n\n        _setRoleAdmin(SUB_ADMIN_ROLE, OWNER_ROLE);\n        _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\n        _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\n    }\n\n    function isAdmin() public view returns (bool) {\n        return hasRole(OWNER_ROLE, _msgSender());\n    }\n\n    modifier onlyAdmin() {\n        require(isAdmin(), \"Must have admin role to perform this action\");\n        _;\n    }\n}\n"
    },
    "contracts/DDXStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IOracleSimple.sol\";\nimport \"./interfaces/IDChainStaking.sol\";\nimport \"./interfaces/IDDXVault.sol\";\nimport \"./interfaces/IDDXStaking.sol\";\nimport \"./DChainBase.sol\";\n\ncontract DDXStaking is DChainBase, IDDXStaking {\n    struct StakingInfo {\n        uint256 totalStakesInUSD;\n        uint256 claimedInterest;\n        uint64 dueDate;\n        uint64 timeStake;\n        uint64 lastClaimedTime;\n        uint64 lastUpdatedTime;\n        uint64 createdAt;\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        uint256 minDepositInUSD; // minimun amount that can be deposit\n        uint64 period; // period of pool\n        uint64 APR; // APR of pool : 5000 = 50%\n        bool status; // status of pool\n    }\n\n    struct OfferedCurrency {\n        uint256 decimal;\n        uint256 rate;\n    }\n\n    uint64 private constant INTEREST_RATE_PRECISION_POINT = (10 ** 5); \n    uint32 private constant ONE_DAY_IN_SECONDS = 1 days;\n    uint32 private constant ONE_YEAR_IN_SECONDS = 365 days;\n\n    IERC20 public rewardToken;\n    IDDXVault public vault;\n    \n    address public treasury;\n    address public admin;\n\n    address public oracle;\n\n    uint256 public totalStaked;\n\n    bool public emergencyCancelled;\n\n    // Asset token -> Offered Currency (to $)\n    mapping(address => OfferedCurrency) public offeredCurrencies;\n    // user -> current staking infos\n    mapping(uint => mapping(address => StakingInfo)) public stakingInfos;\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n\n    event ContractCreated(uint256 indexed contractId, address indexed user, address indexed stakeToken, address referrer, uint256 amount, uint256 amountInUSD);\n    event StakingContractCreated(address indexed user, address indexed referrer, uint indexed contractId, uint stakingAmount);\n    event Withdraw(address indexed user, uint256 amount);\n    event RewardHarvested(address indexed claimer, uint indexed pid, uint256 amount, uint256 amountInUSD);\n    event Withdrawed(address indexed claimer, uint indexed pid, uint256 amount, uint256 amountInUSD);\n    event PoolAdded(uint256 _minDepositInUSD, uint64 _APR, uint128 _period);    \n    \n    function initialize(address _owner, address _oracle, address _treasury, IERC20 _rewardToken) external initializer {\n        __DChainBase_init(_owner);\n        \n        /// @dev: ZA - Zero address\n        require(_treasury != address(0), \"ZA\");\n        require(address(_rewardToken) != address(0), \"ZA\");\n\n        treasury = _treasury;\n        rewardToken = _rewardToken;\n        admin = msg.sender;\n        oracle = _oracle;\n\n        _setupRole(SUB_ADMIN_ROLE, _owner);\n\n        // Max approve for transfer from \n        rewardToken.approve(address(this), type(uint256).max);\n    }\n    \n    /// -----------------------------------\n    /// --------- Update Function ---------\n    /// -----------------------------------\n\n    function setDDXVault(IDDXVault _vault) external onlyRole(SUB_ADMIN_ROLE) {\n        require(address(_vault) != address(0), \"pool: DDX vault cannot be zero address\");\n        vault = _vault;\n    }\n\n\n    // how to convert from 1 Token - to $\n    function setOfferedCurrency(address _currency, uint _rate, uint _decimal) external onlyRole(SUB_ADMIN_ROLE) {\n        OfferedCurrency storage offeredCurrency = offeredCurrencies[_currency];\n        offeredCurrency.rate = _rate;\n        offeredCurrency.decimal = _decimal;\n    }\n\n\n    /// -----------------------------------\n    /// ---------- Core Function ----------\n    /// -----------------------------------\n\n    function addPool(uint256 _minDepositInUSD, uint64 _APR, uint64 _period) external onlyRole(SUB_ADMIN_ROLE) {        \n        poolInfo.push(PoolInfo({\n            minDepositInUSD: _minDepositInUSD,\n            APR: _APR,\n            period: _period,\n            status: true\n        }));\n\n        emit PoolAdded(_minDepositInUSD, _APR, _period);\n    }\n\n    function depositByVault(uint _pid, uint _originAmount, uint _lockedAmount, address _user) external override whenNotPaused nonReentrant {\n        require(_msgSender() == address(vault), \"pool: Not stake by vault\");\n        require(IDDXVault(vault).startVestingTime() <= block.timestamp, \"pool: not allow to use this after vesting time started\");\n\n        uint totalStakeAmount = _originAmount + _lockedAmount;\n\n        require(totalStakeAmount > 0, \"pool: amount cannot be zero\");\n\n        address sender = _user;\n\n        // Forward from vault to smart contract \n        _forwardRewardToken(address(vault), _originAmount);\n        uint amountOutInUSD = _validateMinimumStakingAmount(_pid, totalStakeAmount);\n\n        _updateUserStakingInfo(_pid, sender, totalStakeAmount, amountOutInUSD);\n    }\n\n    function deposit(uint256 _pid, uint256 _amount) external whenNotPaused nonReentrant {\n        address sender = msg.sender;\n\n        PoolInfo storage pool = poolInfo[_pid];\n        StakingInfo storage stakingInfo = stakingInfos[_pid][msg.sender];\n\n        require(_amount > 0, \"pool: amount cannot be zero\");\n        require(pool.status, \"This pool is close\");\n        \n        // Forward user tokens to smart contract \n        uint stakingAmount = _forwardRewardToken(sender, _amount);\n        uint amountOutInUSD = _validateMinimumStakingAmount(_pid, stakingAmount);\n\n        if (stakingInfo.timeStake == 0) {\n            stakingInfo.createdAt = uint64(block.timestamp);\n            stakingInfo.timeStake = uint64(block.timestamp);\n            stakingInfo.dueDate = stakingInfo.timeStake +  pool.period;\n        }\n       \n        stakingInfo.lastClaimedTime = uint64(block.timestamp);\n        stakingInfo.lastUpdatedTime = uint64(block.timestamp);\n        stakingInfo.totalStakesInUSD += amountOutInUSD;\n       \n        totalStaked += stakingAmount;\n\n        _updateUserStakingInfo(_pid, sender, stakingAmount, amountOutInUSD);\n    }\n\n    function withdraw(uint _pid) external whenNotPaused nonReentrant {\n        address sender = msg.sender;\n\n        StakingInfo storage stakingInfo = stakingInfos[_pid][sender];\n        require(stakingInfo.totalStakesInUSD > 0, \"pool: total stakes must greater than 0\");\n        require(block.timestamp > stakingInfo.dueDate, \"pool: due date req not meet\");\n\n        _harvest(_pid, sender);\n\n        uint256 rewardsInRewardTokens = _convertUSDToRewardToken(stakingInfo.totalStakesInUSD);\n\n        require(rewardsInRewardTokens > 0, \"pool: reward not enough to harvest\");\n\n        // Transfer the interest amount to owner\n        rewardToken.transferFrom(treasury, sender, rewardsInRewardTokens);\n        \n        delete stakingInfos[_pid][sender];\n        \n        emit Withdrawed(sender, _pid, rewardsInRewardTokens, stakingInfo.totalStakesInUSD);\n    }\n\n    function claimReward(uint _pid) external nonReentrant whenNotPaused {\n        address sender = msg.sender;\n        _harvest(_pid, sender);\n    }\n\n    function pendingRewardInUSD(uint256 _pid, address _user) public view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        StakingInfo storage stakingInfo = stakingInfos[_pid][_user];\n\n        uint64 current = uint64(block.timestamp);\n        \n        if (current <= stakingInfo.lastClaimedTime) {\n            return 0;\n        }\n\n        if (current > stakingInfo.dueDate) {\n            current = stakingInfo.dueDate;\n        }\n\n        // Get total number of interest periods from the last time claimed\n        uint64 passedDuration = uint64(block.timestamp) - stakingInfo.lastClaimedTime; \n\n        uint256 pendingInterest = stakingInfo.totalStakesInUSD * passedDuration * pool.APR / INTEREST_RATE_PRECISION_POINT / ONE_YEAR_IN_SECONDS;\n\n        return pendingInterest;\n    }\n\n    function getAmountDDXByUSD(uint _amountInUSD) external override returns(uint) {\n        return _convertUSDToRewardToken(_amountInUSD);\n    }\n\n    // Reward token - asset\n    function _validateMinimumStakingAmount(uint256 _pid, uint256 _stakingAmount) internal returns(uint256 totalStakingAmountInUSD) {\n        PoolInfo storage pool = poolInfo[_pid];\n        StakingInfo storage stakingInfo = stakingInfos[_pid][msg.sender];\n        \n        uint256 amountOut;\n\n        if (oracle != address(0)) {\n            // Update oracle Pricing when time elapsed has passed\n            if (block.timestamp - IOracleSimple(oracle).getBlockTimestampLast() >  IOracleSimple(oracle).PERIOD()) { \n                IOracleSimple(oracle).update();\n            }\n\n            amountOut = IOracleSimple(oracle).consult(address(rewardToken), _stakingAmount);\n        }\n\n        if (amountOut > 0) {\n            totalStakingAmountInUSD = amountOut;\n        } else { \n            // This case fallback to pre setup price\n            totalStakingAmountInUSD = getStakingAmountInUSD(address(rewardToken), _stakingAmount);  // Get amount in case we don't have an active oracle\n        }\n\n        stakingInfo.totalStakesInUSD += totalStakingAmountInUSD;\n\n        // Needs to be make sure staking amount by $ greater than minimum amount\n        require(stakingInfo.totalStakesInUSD >= pool.minDepositInUSD, \"pool: minimum staking amount not reached\");\n    }\n\n    function _convertUSDToRewardToken(uint256 _amountInUSD) internal returns(uint256) {\n        if (oracle != address(0)) {\n            // Update oracle Pricing when time elapsed has passed\n            if (block.timestamp - IOracleSimple(oracle).getBlockTimestampLast() >  IOracleSimple(oracle).PERIOD()) { \n                IOracleSimple(oracle).update();\n            }\n\n            return IOracleSimple(oracle).consult(IOracleSimple(oracle).token1(), _amountInUSD);\n        }\n\n        // Get amount in case we don't have an active oracle\n        return getStakingAmountByPegToken(address(rewardToken), _amountInUSD); \n    }\n\n    /**\n     * @dev Get Staking token amount in offered currencies\n     * @param _amount Amount of purchase token\n     * @return Return amount of respective IDO token\n     */\n    function getStakingAmountInUSD(\n        address _token,\n        uint _amount\n    ) public view returns (uint) {\n        OfferedCurrency memory currency = offeredCurrencies[_token];\n        return\n            (_amount * (10 ** currency.decimal)) / currency.rate;\n    }\n\n    function getStakingAmountByPegToken(\n        address _token,\n        uint _amount\n    ) public view returns (uint) {\n        OfferedCurrency memory currency = offeredCurrencies[_token];\n        return\n            (_amount * currency.rate) / (10 ** currency.decimal);\n    }\n\n    function _forwardRewardToken(address sender, uint256 amount) internal returns(uint256) {\n        uint256 totalStakingbefore = rewardToken.balanceOf(address(this));\n        // Locking principal deposit amount\n        rewardToken.transferFrom(sender, address(this), amount);\n        // Get balance of contract after staking\n        uint256 totalStakingAfter = rewardToken.balanceOf(address(this));\n\n        return totalStakingAfter - totalStakingbefore;\n    }\n\n    function _updateUserStakingInfo(uint _pid, address _user, uint _stakingAmount, uint _amountOutInUSD) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        StakingInfo storage stakingInfo = stakingInfos[_pid][_user];\n\n        if (stakingInfo.timeStake == 0) {\n            stakingInfo.createdAt = uint64(block.timestamp);\n            stakingInfo.timeStake = uint64(block.timestamp);\n            stakingInfo.dueDate = stakingInfo.timeStake +  pool.period;\n        }\n       \n        stakingInfo.lastClaimedTime = uint64(block.timestamp);\n        stakingInfo.lastUpdatedTime = uint64(block.timestamp);\n        stakingInfo.totalStakesInUSD += _amountOutInUSD;\n       \n        totalStaked += _stakingAmount;\n    }\n\n    function _harvest(uint _pid, address _sender) internal {\n        StakingInfo storage stakingInfo = stakingInfos[_pid][_sender];\n\n        uint256 rewardsInUSD = pendingRewardInUSD(_pid, _sender);\n        uint256 rewardsInRewardTokens = _convertUSDToRewardToken(rewardsInUSD);\n\n        require(rewardsInRewardTokens > 0, \"pool: reward not enough to harvest\");\n\n        // Transfer the interest amount to owner\n        rewardToken.transferFrom(treasury, _sender, rewardsInRewardTokens);\n        \n        uint64 lastClaimedTime = uint64(block.timestamp);\n\n        if (lastClaimedTime > stakingInfo.dueDate) {\n            lastClaimedTime = stakingInfo.dueDate;\n        }\n\n        stakingInfo.lastUpdatedTime = uint64(block.timestamp);\n        stakingInfo.lastClaimedTime = lastClaimedTime;\n        stakingInfo.claimedInterest += rewardsInUSD;\n        \n        emit RewardHarvested(_sender, _pid, rewardsInRewardTokens, rewardsInUSD);\n    }\n\n    /// -----------------------------------\n    /// --------- Pause Function ----------\n    /// -----------------------------------\n\n    function pause() external onlyAdmin {\n        _pause();\n    }\n\n    function unpause() external onlyAdmin {\n        _unpause();\n    }\n}"
    },
    "contracts/DDXVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./DChainBase.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IDChainStaking.sol\";\nimport \"./interfaces/IDDXVault.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract DDXVault is DChainBase, IDDXVault {\n    struct VestingSchedule {\n        // beneficiary of tokens after they are released\n        address beneficiary;\n        // cliff time of the vesting start in seconds since the UNIX epoch\n        uint256 cliff;\n        // start time of the vesting period in seconds since the UNIX epoch\n        uint256 start;\n        // duration of the vesting period in seconds\n        uint256 duration;\n        // duration of a slice period for the vesting in seconds\n        uint256 slicePeriodSeconds;\n        // whether or not the vesting is revocable\n        bool revocable;\n        // total amount of tokens to be released at the end of the vesting\n        uint256 amountTotal;\n        // amount of tokens released\n        uint256 released;\n        // whether or not the vesting has been revoked\n        bool revoked;\n    }\n\n    uint256 private constant PRECISION_POINT = 10000;\n\n    uint public override startVestingTime;\n    uint public vestingDuration;\n    uint public vestingPeriodInSeconds;\n\n    address public treasury;\n    address public admin;\n    address public DDXStaking;\n    address public DWStaking;\n\n    IERC20 public rewardToken;\n\n    bool public override rewardApplicable;\n\n    uint256 private vestingSchedulesTotalAmount;\n    \n    bytes32[] private vestingSchedulesIds;\n    mapping(bytes32 => VestingSchedule) private vestingSchedules;\n    mapping(address => uint256) private holdersVestingCount;\n\n    function initialize(\n        address _owner,\n        IERC20 _rewardToken, \n        address _treasury, \n        address _DWStaking,\n        address _DDXStaking,\n        uint _startVestingTime\n    ) external initializer {\n        /// @dev: ZA - Zero address\n        require(_DWStaking != address(0), \"ZA\");\n        require(_DDXStaking != address(0), \"ZA\");\n        require(address(_rewardToken) != address(0), \"ZA\");\n        require(_treasury != address(0), \"ZA\");\n\n        startVestingTime = _startVestingTime;\n\n        rewardToken = _rewardToken;\n        treasury = _treasury;\n        DDXStaking = _DDXStaking;\n        DWStaking = _DWStaking;\n\n        vestingDuration = 20 * 30 days; // 20 monthds\n        vestingPeriodInSeconds = 30 days;\n        rewardApplicable = true;\n\n        _setupRole(SUB_ADMIN_ROLE, _owner);\n    }\n\n    function stakeWithVault(\n        uint256 _originAmount,\n        uint256 _lockedAmount\n    ) external {\n        require(block.timestamp <= startVestingTime, \"pool: not allow to stake after vesting start\");\n        \n        address sender = msg.sender;\n        VestingSchedule memory vestingSchedule = getVestingSchedule(computeVestingScheduleIdForAddressAndIndex(sender, 0));\n\n        require(vestingSchedule.beneficiary == sender, \"pool: vesting schedule not existed\");\n        require(rewardToken.allowance(sender, address(this)) >= _originAmount, \"pool: allowance not enough\");\n        require(vestingSchedule.amountTotal >= _lockedAmount, \"pool: vesting schedule amount total not enough to cover staking\");\n        \n        rewardToken.approve(DWStaking, _originAmount);\n\n        vestingSchedule.amountTotal -= _lockedAmount;\n    }\n\n    function multipleRelease(\n        bytes32[] calldata vestingScheduleIds\n    ) external nonReentrant whenNotPaused{\n        for (uint i; i < vestingScheduleIds.length;) {\n            release(vestingScheduleIds[i]);\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    /**\n     * @notice Release vested amount of tokens.\n     * @param vestingScheduleId the vesting schedule identifier\n     */\n    function release(\n        bytes32 vestingScheduleId\n    ) public nonReentrant whenNotPaused onlyIfVestingScheduleNotRevoked(vestingScheduleId) {\n        VestingSchedule storage vestingSchedule = vestingSchedules[\n            vestingScheduleId\n        ];\n        bool isBeneficiary = msg.sender == vestingSchedule.beneficiary;\n\n        require(\n            isBeneficiary,\n            \"TokenVesting: only beneficiary and owner can release vested tokens\"\n        );\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\n        vestingSchedule.released = vestingSchedule.released + vestedAmount;\n        address payable beneficiaryPayable = payable(\n            vestingSchedule.beneficiary\n        );\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount - vestedAmount;\n        TransferHelper.safeTransfer(address(rewardToken), beneficiaryPayable, vestedAmount);\n    }\n\n\n    function rewardFromDWStaking(address _beneficiary, uint256 _amount) external override {\n        require(msg.sender == DWStaking, \"vault: must be called from DWStaking\");\n        require(rewardApplicable, \"vault: ddx reward duration is ended\");\n\n        if (block.timestamp > startVestingTime) {\n            _createVestingSchedule(_beneficiary, block.timestamp, 0, vestingDuration, vestingPeriodInSeconds, true, _amount);\n        } else {\n            VestingSchedule memory vestingSchedule = getVestingSchedule(computeVestingScheduleIdForAddressAndIndex(_beneficiary, 0));\n\n            if (vestingSchedule.beneficiary == address(0)) {\n                _createVestingSchedule(_beneficiary, startVestingTime, 0, vestingDuration, vestingPeriodInSeconds, true, _amount);\n            }\n\n            vestingSchedule.amountTotal += _amount;\n        }\n    }\n\n    function toggleRewardApplicable() external onlyRole(SUB_ADMIN_ROLE) {\n        rewardApplicable = rewardApplicable ? false : true;\n    }\n\n    /**\n     * @notice Returns the vesting schedule information for a given identifier.\n     * @return the vesting schedule structure information\n    */\n    function getVestingSchedule(\n        bytes32 vestingScheduleId\n    ) public view returns (VestingSchedule memory) {\n        return vestingSchedules[vestingScheduleId];\n    }\n\n    /**\n     * @notice Returns the vesting schedule information for a given holder and index.\n     * @return the vesting schedule structure information\n     */\n    function getVestingScheduleByAddressAndIndex(\n        address holder,\n        uint256 index\n    ) public view returns (VestingSchedule memory) {\n        return\n            getVestingSchedule(\n                computeVestingScheduleIdForAddressAndIndex(holder, index)\n            );\n    }\n\n     /**\n     * @dev Computes the vesting schedule identifier for an address and an index.\n     */\n    function computeVestingScheduleIdForAddressAndIndex(\n        address holder,\n        uint256 index\n    ) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(holder, index));\n    }\n\n    /**\n     * @dev Computes the next vesting schedule identifier for a given holder address.\n     */\n    function computeNextVestingScheduleIdForHolder(\n        address holder\n    ) public view returns (bytes32) {\n        return\n            computeVestingScheduleIdForAddressAndIndex(\n                holder,\n                holdersVestingCount[holder]\n            );\n    }\n\n    function _verifyAllowance(address _user, address _token, uint _amount) internal view returns(bool) {\n        uint allowance = IERC20(_token).allowance(_user, address(this));\n        return allowance >= _amount;\n    }\n\n\n    function _deliverTokens(address _beneficiary, uint _amount) internal {\n        TransferHelper.safeTransferFrom(address(rewardToken), treasury, _beneficiary, _amount);\n    }\n\n    /**\n     * @dev Computes the releasable amount of tokens for a vesting schedule.\n     * @return the amount of releasable tokens\n     */\n    function _computeReleasableAmount(\n        VestingSchedule memory vestingSchedule\n    ) internal view returns (uint256) {\n        // Retrieve the current time.\n        uint256 currentTime = block.timestamp;\n        // If the current time is before the cliff, no tokens are releasable.\n        if ((currentTime < vestingSchedule.cliff) || vestingSchedule.revoked) {\n            return 0;\n        }\n        // If the current time is after the vesting period, all tokens are releasable,\n        // minus the amount already released.\n        else if (\n            currentTime >= vestingSchedule.start + vestingSchedule.duration\n        ) {\n            return vestingSchedule.amountTotal - vestingSchedule.released;\n        }\n        // Otherwise, some tokens are releasable.\n        else {\n            // Compute the number of full vesting periods that have elapsed.\n            uint256 timeFromStart = currentTime - vestingSchedule.start;\n            uint256 secondsPerSlice = vestingSchedule.slicePeriodSeconds;\n            uint256 vestedSlicePeriods = timeFromStart / secondsPerSlice;\n            uint256 vestedSeconds = vestedSlicePeriods * secondsPerSlice;\n            // Compute the amount of tokens that are vested.\n            uint256 vestedAmount = (vestingSchedule.amountTotal *\n                vestedSeconds) / vestingSchedule.duration;\n            // Subtract the amount already released and return.\n            return vestedAmount - vestingSchedule.released;\n        }\n    }\n\n    /**\n     * @notice Creates a new vesting schedule for a beneficiary.\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n     * @param _start start time of the vesting period\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n     * @param _duration duration in seconds of the period in which the tokens will vest\n     * @param _slicePeriodSeconds duration of a slice period for the vesting in seconds\n     * @param _revocable whether the vesting is revocable or not\n     * @param _amount total amount of tokens to be released at the end of the vesting\n     */\n    function _createVestingSchedule(\n        address _beneficiary,\n        uint256 _start,\n        uint256 _cliff,\n        uint256 _duration,\n        uint256 _slicePeriodSeconds,\n        bool _revocable,\n        uint256 _amount\n    ) internal {\n        require(_duration > 0, \"TokenVesting: duration must be > 0\");\n        require(_amount > 0, \"TokenVesting: amount must be > 0\");\n        require(\n            _slicePeriodSeconds >= 1,\n            \"TokenVesting: slicePeriodSeconds must be >= 1\"\n        );\n        require(_duration >= _cliff, \"TokenVesting: duration must be >= cliff\");\n        bytes32 vestingScheduleId = computeNextVestingScheduleIdForHolder(\n            _beneficiary\n        );\n        uint256 cliff = _start + _cliff;\n        vestingSchedules[vestingScheduleId] = VestingSchedule(\n            _beneficiary,\n            cliff,\n            _start,\n            _duration,\n            _slicePeriodSeconds,\n            _revocable,\n            _amount,\n            0,\n            false\n        );\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount + _amount;\n        vestingSchedulesIds.push(vestingScheduleId);\n        uint256 currentVestingCount = holdersVestingCount[_beneficiary];\n        holdersVestingCount[_beneficiary] = currentVestingCount + 1;\n    }\n\n\n    \n\n    /// --------------------------------\n    /// ------- Modifier Function ------\n    /// --------------------------------\n\n    /**\n     * @dev Reverts if the vesting schedule does not exist or has been revoked.\n     */\n    modifier onlyIfVestingScheduleNotRevoked(bytes32 vestingScheduleId) {\n        require(!vestingSchedules[vestingScheduleId].revoked);\n        _;\n    }\n\n}"
    },
    "contracts/DWStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IOracleSimple.sol\";\nimport \"./interfaces/IDChainStaking.sol\";\nimport \"./interfaces/IDDXVault.sol\";\nimport \"./interfaces/IDDXStaking.sol\";\nimport \"./interfaces/IDWVault.sol\";\nimport \"./DChainBase.sol\";\n\n\ncontract DWStaking is IDChainStaking, DChainBase {\n    struct StakingInfo {\n        uint256 totalExpectedInterest;\n        uint256 totalStakesInUSD;\n        uint256 claimedInterest;\n        uint64 claimDuration;\n        uint64 dueDate;\n        uint64 lastClaimedTime;\n        uint64 lastUpdatedTime;\n        uint64 createdAt;\n    }\n\n    struct StakeToken {\n        bool created;\n    }\n\n    struct OfferedCurrency {\n        uint256 decimal;\n        uint256 rate;\n    }\n\n    uint64 private constant INTEREST_RATE_PRECISION_POINT = (10 ** 18); \n    uint32 private constant ONE_DAY_IN_SECONDS = 1 days;\n    uint32 private constant ONE_YEAR_IN_SECONDS = 365 days;\n\n\n    IERC20 public rewardToken;\n    IERC20 public extraRewardToken;\n\n    IDDXVault public DDXVault;\n    IDWVault public vault;\n    IDDXStaking public DDXStaking;\n    \n    address public treasury;\n    address public admin;\n\n    uint256 public totalStakingContracts;\n\n    uint256 public totalStaked;\n    uint256 public minimumStakingAmountInUSD; \n    uint256 public maximumEarningsInPercent;\n\n    uint64 public claimDuration;\n    uint256 public directInterest;\n    \n    uint256[9] public commissionInterestLevels;\n\n    bool public emergencyCancelled;\n\n    // Asset token -> Offered Currency (to $)\n    mapping(address => OfferedCurrency) public offeredCurrencies;\n    mapping(address => StakeToken) public allowedStakeTokens;\n    // Asset token => oracle\n    mapping(address => address) public assetPrices;\n    // referrer -> number of F1s\n    mapping(address => uint256) public totalReferralInvitations;\n    // sender -> referrer \n    mapping(address => address) public referredBy;\n    // sender -> current staking infos\n    mapping(uint => StakingInfo) public stakingContracts;\n    // staking contract id -> owner\n    mapping(uint => address) public stakingContractOwnedBy;\n\n    event ContractCreated(uint256 indexed contractId, address indexed user, address indexed stakeToken, address referrer, uint256 amount, uint256 amountInUSD);\n    event StakingContractCreated(address indexed user, address indexed referrer, uint indexed contractId, uint stakingAmount);\n    event Withdraw(address indexed user, uint256 amount);\n    event RewardHarvested(address indexed claimer, uint256 amount, uint256 amountInUSD);\n\n    function initialize(address _owner, address _treasury, IERC20 _rewardToken, IERC20 _extraRewardToken) external initializer {\n        __DChainBase_init(_owner);\n        \n        /// @dev: ZA - Zero address\n        require(_treasury != address(0), \"ZA\");\n        require(address(_rewardToken) != address(0), \"ZA\");\n\n        treasury = _treasury;\n        rewardToken = _rewardToken;\n        extraRewardToken = _extraRewardToken;\n        admin = msg.sender;\n\n        /// Commission for the invitation and only get once\n        commissionInterestLevels = [\n            1500, // 15%\n            1000, // 10%\n            500,  // 5%\n            500,  // 5%\n            500,  // 5%\n            0,\n            0,\n            0,\n            0\n        ];\n\n\n        claimDuration = 600 days; // 20 months\n        directInterest = 50000000000000000; // 5%\n        minimumStakingAmountInUSD = 100 * (10 ** 6); // Minimum will be 100$\n        maximumEarningsInPercent = 2000000000000000000; // 200%\n\n        _setupRole(SUB_ADMIN_ROLE, _owner);\n\n        // Max approve for transfer from \n        rewardToken.approve(address(this), type(uint256).max);\n    }\n\n    /// -----------------------------------\n    /// --------- Update Function ---------\n    /// -----------------------------------\n\n    function setDDXStaking(IDDXStaking _staking) external onlyRole(SUB_ADMIN_ROLE) {\n        require(address(_staking) != address(0), \"pool: DDX Staking cannot be zero address\");\n        DDXStaking = _staking;\n    }\n\n    function setDWVault(IDWVault _vault) external onlyRole(SUB_ADMIN_ROLE) {\n        require(address(_vault) != address(0), \"pool: DW vault cannot be zero address\");\n        vault = _vault;\n    }\n\n    function setDDXVault(IDDXVault _vault) external onlyRole(SUB_ADMIN_ROLE) {\n        require(address(_vault) != address(0), \"pool: DDX vault cannot be zero address\");\n        DDXVault = _vault;\n    }\n\n    function setAssetOracle(address _pegToken, address _oracle) external onlyRole(SUB_ADMIN_ROLE) {\n        assetPrices[_pegToken] = _oracle;\n    }\n\n    // how to convert from 1 Token - to $\n    function setOfferedCurrency(address _currency, uint _rate, uint _decimal) external onlyRole(SUB_ADMIN_ROLE) {\n        OfferedCurrency storage offeredCurrency = offeredCurrencies[_currency];\n        offeredCurrency.rate = _rate;\n        offeredCurrency.decimal = _decimal;\n    }\n\n    function setAllowedStakeToken(address _stakeToken) external onlyRole(SUB_ADMIN_ROLE) {\n        StakeToken storage stakeToken = allowedStakeTokens[_stakeToken];\n        require(!stakeToken.created, \"Allowed token is already existed!\");\n        stakeToken.created = true;\n    }\n\n    /// -----------------------------------\n    /// ---------- Core Function ----------\n    /// -----------------------------------\n\n    function depositByVault(uint256 _originAmount, uint _lockedAmount, address _user, address _referrer) external override whenNotPaused nonReentrant {\n        require(_msgSender() == address(vault), \"pool: Not stake by vault\");\n        \n        uint totalStakeAmount = _originAmount + _lockedAmount;\n\n        require(totalStakeAmount > 0, \"pool: amount cannot be zero\");\n\n        // Forward from vault to smart contract \n        _forwardRewardToken(address(vault), _originAmount);\n        uint amountOutInUSD = _validateMinimumStakingAmount(address(rewardToken), totalStakeAmount);\n\n        // If user choose to stake with platform token, need to specify which peg token you want to convert to \n        if (_originAmount > 0) {\n            rewardToken.burn(_originAmount);\n        }\n\n        _joinByReferral(_user, _referrer, totalStakeAmount);\n        _createStakingContract(_user, address(rewardToken), _referrer, totalStakeAmount, amountOutInUSD);\n    \n        _rewardDDXToUser(amountOutInUSD, _user);\n    }\n\n    function deposit(uint256 amount, address stakeToken, address referrer) external whenNotPaused nonReentrant {\n        address sender = msg.sender;\n\n        require(amount > 0, \"pool: amount cannot be zero\");\n        require(sender != address(0), \"pool: stake address can not be zero address\");\n\n        // Forward user tokens to smart contract \n        uint stakingAmount = _forwardRewardToken(sender, amount);\n        uint amountOutInUSD = _validateMinimumStakingAmount(stakeToken, stakingAmount);\n\n        // If uesr choose to stake with other tokens, the token needs to be in the allowed list.\n        if (stakeToken != address(rewardToken)) {\n            StakeToken memory allowedStakeToken = allowedStakeTokens[stakeToken];\n            require(allowedStakeToken.created, \"pool: stake token is not allowed\");\n        }\n        \n        // If user choose to stake with platform token, need to specify which peg token you want to convert to \n        if (stakeToken == address(rewardToken)) {\n            rewardToken.burn(stakingAmount);\n        }\n\n        _joinByReferral(sender, referrer, stakingAmount);\n        _createStakingContract(sender, stakeToken, referrer, stakingAmount, amountOutInUSD);\n\n        _rewardDDXToUser(amountOutInUSD, sender);\n    }\n\n    function claimMultRewards(uint[] memory _contractIds) external nonReentrant whenNotPaused {\n        for (uint i; i < _contractIds.length;) {\n            claimReward(_contractIds[i]);\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function claimReward(uint _contractId) public nonReentrant whenNotPaused {\n        address sender = msg.sender;\n        require(stakingContractOwnedBy[_contractId] == sender, \"pool: contract id not belongs to this owner\");\n        _harvest(sender, _contractId);\n    }\n\n    function _harvest(address _sender, uint _contractId) internal {\n        StakingInfo storage stakingInfo = stakingContracts[_contractId];\n\n        uint256 rewardsInUSD = pendingRewardInUSD(_contractId);\n        uint256 rewardsInRewardTokens = _convertUSDToRewardToken(rewardsInUSD);\n\n        require(rewardsInRewardTokens > 0, \"pool: reward not enough to harvest\");\n\n        // Transfer the interest amount to owner\n        rewardToken.transferFrom(treasury, _sender, rewardsInRewardTokens);\n        \n        uint64 lastClaimedTime = uint64(block.timestamp);\n\n        if (lastClaimedTime > stakingInfo.dueDate) {\n            lastClaimedTime = stakingInfo.dueDate;\n        }\n\n        stakingInfo.lastUpdatedTime = uint64(block.timestamp);\n        stakingInfo.lastClaimedTime = lastClaimedTime;\n        stakingInfo.claimedInterest += rewardsInUSD;\n        \n        emit RewardHarvested(_sender, rewardsInRewardTokens, rewardsInUSD);\n    }\n\n    function pendingRewardInUSD(uint256 _contractId) public view returns (uint256) {\n        StakingInfo memory stakingInfo = stakingContracts[_contractId];\n\n        uint64 current = uint64(block.timestamp);\n\n        if (current <= stakingInfo.lastClaimedTime) {\n            return 0;\n        }\n\n        if (current > stakingInfo.dueDate) {\n            current = stakingInfo.dueDate;\n        }\n\n        // Get total number of interest periods from the last time claimed\n        uint64 passedDuration = uint64(block.timestamp) - stakingInfo.lastClaimedTime; \n\n        uint256 pendingInterest = stakingInfo.totalExpectedInterest * passedDuration * INTEREST_RATE_PRECISION_POINT / claimDuration / INTEREST_RATE_PRECISION_POINT;\n\n        return pendingInterest;\n    }\n\n    // Reward token - asset\n    function _validateMinimumStakingAmount(address _stakeToken, uint256 _stakingAmount) internal returns(uint256 totalStakingAmountInUSD) {\n        address oracle = assetPrices[_stakeToken];\n\n        uint256 amountOut;\n\n        if (oracle != address(0)) {\n            // Update oracle Pricing when time elapsed has passed\n            if (block.timestamp - IOracleSimple(oracle).getBlockTimestampLast() >  IOracleSimple(oracle).PERIOD()) { \n                IOracleSimple(oracle).update();\n            }\n\n            amountOut = IOracleSimple(oracle).consult(_stakeToken, _stakingAmount);\n        }\n\n        if (amountOut > 0) {\n            totalStakingAmountInUSD = amountOut;\n        } else { \n            // This case fallback to pre setup price\n            totalStakingAmountInUSD = getStakingAmountInUSD(_stakeToken, _stakingAmount);  // Get amount in case we don't have an active oracle\n        }\n\n        // Needs to be make sure staking amount by $ greater than minimum amount\n        require(totalStakingAmountInUSD >= minimumStakingAmountInUSD, \"pool: minimum staking amount not reached\");\n    }\n\n    function _convertUSDToRewardToken(uint256 _amountInUSD) internal returns(uint256) {\n        address oracle = assetPrices[address(rewardToken)];\n\n        if (oracle != address(0)) {\n            // Update oracle Pricing when time elapsed has passed\n            if (block.timestamp - IOracleSimple(oracle).getBlockTimestampLast() >  IOracleSimple(oracle).PERIOD()) { \n                IOracleSimple(oracle).update();\n            }\n\n            return IOracleSimple(oracle).consult(IOracleSimple(oracle).token1(), _amountInUSD);\n        }\n\n        // Get amount in case we don't have an active oracle\n        return getStakingAmountByPegToken(address(rewardToken), _amountInUSD); \n    }\n\n    function _convertUSDToExtraRewardToken(uint256 _amountInUSD) internal returns(uint256) {\n        address oracle = assetPrices[address(extraRewardToken)];\n\n        if (oracle != address(0)) {\n            // Update oracle Pricing when time elapsed has passed\n            if (block.timestamp - IOracleSimple(oracle).getBlockTimestampLast() >  IOracleSimple(oracle).PERIOD()) { \n                IOracleSimple(oracle).update();\n            }\n\n            return IOracleSimple(oracle).consult(IOracleSimple(oracle).token1(), _amountInUSD);\n        }\n\n        // Get amount in case we don't have an active oracle\n        return getStakingAmountByPegToken(address(extraRewardToken), _amountInUSD); \n    }\n\n    /**\n     * @dev Get Staking token amount in offered currencies\n     * @param _amount Amount of purchase token\n     * @return Return amount of respective IDO token\n     */\n    function getStakingAmountInUSD(\n        address _token,\n        uint _amount\n    ) public view returns (uint) {\n        OfferedCurrency memory currency = offeredCurrencies[_token];\n        return\n            (_amount * (10 ** currency.decimal)) / currency.rate;\n    }\n\n    function getStakingAmountByPegToken(\n        address _token,\n        uint _amount\n    ) public view returns (uint) {\n        OfferedCurrency memory currency = offeredCurrencies[_token];\n        return\n            (_amount * currency.rate) / (10 ** currency.decimal);\n    }\n\n    function _forwardRewardToken(address sender, uint256 amount) internal returns(uint256) {\n        uint256 totalStakingbefore = rewardToken.balanceOf(address(this));\n        // Locking principal deposit amount\n        rewardToken.transferFrom(sender, address(this), amount);\n        // Get balance of contract after staking\n        uint256 totalStakingAfter = rewardToken.balanceOf(address(this));\n\n        return totalStakingAfter - totalStakingbefore;\n    }\n\n    function _joinByReferral(address _sender, address _referrer, uint _stakingAmount) internal {\n        // Validate Referrals\n        if (_referrer != address(0)) {\n            require(referredBy[_sender] == address(0) && _referrer != _sender,\"pool: user already joined by referral\");\n            \n            referredBy[_sender] = _referrer;\n            totalReferralInvitations[_referrer] += 1;\n\n            // Give direct intetest to the refferer\n            uint256 directInterestForReffer = _stakingAmount * directInterest / INTEREST_RATE_PRECISION_POINT;\n            rewardToken.transferFrom(treasury, _referrer, directInterestForReffer);\n        }\n    }\n\n    function _createStakingContract(address _user, address _stakeToken, address _referrer, uint _stakingAmount, uint _amountOutInUSD) internal {\n        uint contractId = totalStakingContracts;\n\n        StakingInfo storage stakingInfo = stakingContracts[contractId];\n        stakingInfo.createdAt = uint64(block.timestamp);\n        stakingInfo.lastClaimedTime = uint64(block.timestamp);\n        stakingInfo.lastUpdatedTime = uint64(block.timestamp);\n        stakingInfo.totalStakesInUSD = _amountOutInUSD;\n        stakingInfo.totalExpectedInterest =  stakingInfo.totalStakesInUSD  * maximumEarningsInPercent / INTEREST_RATE_PRECISION_POINT;\n        stakingInfo.claimDuration = claimDuration;\n        stakingInfo.dueDate = stakingInfo.createdAt +  stakingInfo.claimDuration;\n\n        totalStaked += _stakingAmount;\n        totalStakingContracts++;\n\n        stakingContractOwnedBy[contractId] = _user;\n\n        emit ContractCreated(contractId, _user, _stakeToken, _referrer, _stakingAmount, _amountOutInUSD);\n    }\n\n    function _rewardDDXToUser(uint _amountOutInUSD, address _user) internal {\n        // Transfer extra DDX reward token to investor\n        uint extraRewardTokenAmount = DDXStaking.getAmountDDXByUSD(_amountOutInUSD);\n        if (extraRewardTokenAmount > 0 && DDXVault.rewardApplicable()) {\n            DDXVault.rewardFromDWStaking(_user, extraRewardTokenAmount);\n        }\n    }\n\n    /// -----------------------------------\n    /// --------- Pause Function ----------\n    /// -----------------------------------\n\n    function pause() external onlyRole(SUB_ADMIN_ROLE) {\n        _pause();\n    }\n\n    function unpause() external onlyRole(SUB_ADMIN_ROLE) {\n        _unpause();\n    }\n}"
    },
    "contracts/DWVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IDChainStaking.sol\";\nimport \"./libraries/TransferHelper.sol\";\nimport \"./DChainBase.sol\";\n\n\ncontract DWVault is DChainBase {\n    event PendingSoldTokenClaimed(\n        address indexed claimer,\n        address indexed beneficiary,\n        uint soldTokens\n    );\n\n    event BuyTokenByToken(\n        address indexed investor,\n        address indexed offerToken,\n        address indexed beneficiary,\n        uint amount,\n        uint soldTokens\n    );\n\n     event TokenReleased(\n        address indexed beneficiary,\n        uint vestedAmount\n    );\n\n    struct VestingSchedule {\n        // beneficiary of tokens after they are released\n        address beneficiary;\n        // cliff time of the vesting start in seconds since the UNIX epoch\n        uint256 cliff;\n        // start time of the vesting period in seconds since the UNIX epoch\n        uint256 start;\n        // duration of the vesting period in seconds\n        uint256 duration;\n        // duration of a slice period for the vesting in seconds\n        uint256 slicePeriodSeconds;\n        // whether or not the vesting is revocable\n        bool revocable;\n        // total amount of tokens to be released at the end of the vesting\n        uint256 amountTotal;\n        // amount of tokens released\n        uint256 released;\n        // whether or not the vesting has been revoked\n        bool revoked;\n    }\n\n    struct OfferedCurrency {\n        uint256 decimals;\n        uint256 rate;\n        bool created;\n    }\n\n    uint256 private constant PRECISION_POINT = 10000;\n\n    uint256 public tgePercentage;\n\n    uint public openTime;\n    uint public closeTime;\n    uint public lockBeforeVesting;\n    uint public vestingDuration;\n    uint public vestingPeriodInSeconds;\n\n    address public treasury;\n    address public admin;\n    address public fundReceiver;\n    address public DWStaking;\n\n    IERC20 public soldToken;\n\n    uint public totalRaiseAmount; // In Sold token\n    uint public totalRaised; // in Offer currency\n\n    uint public totalSold; // In Sold token\n\n    uint256 private vestingSchedulesTotalAmount;\n    \n    // Asset token -> Offered Currency (to $)\n    mapping(address => OfferedCurrency) public offeredCurrencies;\n    // Sender -> pending claim\n    mapping(address => uint) public pendingSoldTokenClaim;\n    // sender -> vesting schedule\n    mapping(address => VestingSchedule) public vestingSchedules;\n    function initialize(\n        address _owner,\n        IERC20 _soldToken, \n        address _treasury, \n        address _fundReceiver, \n        address _DWStaking,\n        uint _tgePercentage,\n        uint _totalRaiseAmount,\n        uint _lockBeforeVesting,\n        uint _openTime,\n        uint _duration\n    ) external initializer {\n        __DChainBase_init(_owner);\n\n        /// @dev: ZA - Zero address\n        require(_DWStaking != address(0), \"ZA\");\n        require(address(_soldToken) != address(0), \"ZA\");\n        require(_treasury != address(0), \"ZA\");\n        require(_fundReceiver != address(0), \"ZA\");\n        require(_tgePercentage <= PRECISION_POINT, \"EOP\");\n\n        openTime = _openTime;\n        closeTime = openTime + _duration;\n        lockBeforeVesting = _lockBeforeVesting;\n\n        soldToken = _soldToken;\n        treasury = _treasury;\n        fundReceiver = _fundReceiver;\n        DWStaking = _DWStaking;\n        totalRaiseAmount = _totalRaiseAmount;\n        tgePercentage = _tgePercentage;\n        admin = msg.sender;\n\n        vestingDuration = 20 * 30 days; // 5% per month\n        vestingPeriodInSeconds = 30 days; // one per month\n    }\n\n    /**\n     * @notice Release vested amount of tokens.\n     */\n    function release() public nonReentrant {\n        VestingSchedule storage vestingSchedule = vestingSchedules[\n            msg.sender\n        ];\n        bool isBeneficiary = msg.sender == vestingSchedule.beneficiary;\n\n        require(\n            isBeneficiary,\n            \"TokenVesting: only beneficiary can release vested tokens\"\n        );\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\n        require(\n            vestedAmount > 0,\n            \"TokenVesting: cannot release tokens, not enough vested tokens\"\n        );\n        vestingSchedule.released = vestingSchedule.released + vestedAmount;\n        address payable beneficiaryPayable = payable(\n            vestingSchedule.beneficiary\n        );\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount - vestedAmount;\n        _deliverTokens(beneficiaryPayable, vestedAmount);\n\n        emit TokenReleased(beneficiaryPayable, vestedAmount);\n    }\n\n    function stakeWithVault(\n        uint256 _originAmount,\n        uint256 _lockedAmount,\n        address _referrer\n    ) external {\n        require(availableToStakeThroughVault(), \"pool: not allow to stake after vesting start\");\n        \n        address sender = msg.sender;\n        VestingSchedule storage vestingSchedule = vestingSchedules[sender];\n\n        require(vestingSchedule.beneficiary == sender, \"pool: vesting schedule not existed\");\n        require(soldToken.allowance(sender, address(this)) >= _originAmount, \"pool: allowance not enough\");\n        require(vestingSchedule.amountTotal >= _lockedAmount, \"pool: vesting schedule amount total not enough to cover staking\");\n        \n        if (_originAmount > 0) {\n            TransferHelper.safeTransferFrom(address(soldToken), _msgSender(), address(this), _originAmount);\n            soldToken.approve(DWStaking, _originAmount);\n        }\n\n        IDChainStaking(DWStaking).depositByVault(_originAmount, _lockedAmount, sender, _referrer);\n    \n        vestingSchedule.amountTotal -= _lockedAmount;\n    }\n\n    function buyTokenWithToken(address _offerToken, address _beneficiary, uint256 _amount) external whenNotPaused nonReentrant {\n        OfferedCurrency memory offeredCurrency = offeredCurrencies[_offerToken];\n        \n        require(offeredCurrency.rate != 0, \"PresalePool::Offer currency rate is invalid!\");\n        require(_validPurchase(), \"PresalePool::Pool is ended!\");\n        require(_verifyAllowance(msg.sender, _offerToken, _amount), \"PresalePool::Allowance for offered token unreached!\");\n\n        uint soldTokenAmount = _getSoldTokensByOfferedCurrency(_offerToken, _amount);\n        require(soldTokenAmount + totalSold <= totalRaiseAmount, \"PresalePool::Purchase amount exceeds max amount!\");\n\n        _forwardFundTransfer(_offerToken, _amount);\n\n        pendingSoldTokenClaim[_beneficiary] += soldTokenAmount;\n\n        totalRaised = totalRaised + _amount;\n        totalSold = totalSold + soldTokenAmount;\n\n        emit BuyTokenByToken(_msgSender(), _offerToken, _beneficiary, _amount, soldTokenAmount);\n    }\n\n    function claim(address _beneficiary) external whenNotPaused nonReentrant {\n        uint pendingTokenAmount = pendingSoldTokenClaim[_msgSender()];\n\n        require(block.timestamp > closeTime, \"pool: sale is not ended\");\n        require(block.timestamp <= closeTime + lockBeforeVesting, \"pool: claim time is ended\");\n        require(pendingTokenAmount > 0, \"pool: pending claim amount must be positive\");\n\n        // Calculate TGE Amount\n        uint tgeAmount = pendingTokenAmount * tgePercentage / PRECISION_POINT;\n        uint remainmingAmount = pendingTokenAmount - tgeAmount;\n\n        // Deliver TGE Amount to user's beneficiary address\n        if (tgeAmount > 0) {\n            _deliverTokens(_beneficiary, tgeAmount);\n        }\n\n        VestingSchedule storage vestingSchedule = vestingSchedules[_beneficiary];\n\n        if (vestingSchedule.beneficiary == address(0)) {\n            _createVestingSchedule(_beneficiary, closeTime + lockBeforeVesting, 0, vestingDuration, vestingPeriodInSeconds, true, remainmingAmount);\n        } else {\n            vestingSchedule.amountTotal += remainmingAmount;\n        }\n\n        pendingSoldTokenClaim[_msgSender()] = 0;\n        \n        emit PendingSoldTokenClaimed(\n            _msgSender(),\n            _beneficiary,\n            pendingTokenAmount   \n        );\n    }\n\n    function setTGEPercentage(uint256 _tgePercentage) external onlyAdmin {\n        require(_tgePercentage <= PRECISION_POINT, \"EOP\");\n        tgePercentage = _tgePercentage;\n    }\n\n    function setTotalRaiseAmount(uint256 _totalRaiseAmount) external onlyAdmin {\n        totalRaiseAmount = _totalRaiseAmount;\n    }\n\n    // how to convert from 1 Token - to $\n    function setOfferedCurrency(address _currency, uint _rate, uint _decimals) external onlyAdmin {\n        OfferedCurrency storage offeredCurrency = offeredCurrencies[_currency];\n        offeredCurrency.rate = _rate;\n        offeredCurrency.decimals = _decimals;\n    }\n\n    function releasableAmount(address _user) external view returns(uint) {\n        return _computeReleasableAmount(vestingSchedules[_user]);\n    }\n\n    function availableToStakeThroughVault() public view returns(bool) {\n        return block.timestamp <= closeTime + lockBeforeVesting;\n    }\n\n      function _verifyAllowance(address _user, address _token, uint _amount) internal view returns(bool) {\n        uint allowance = IERC20(_token).allowance(_user, address(this));\n        return allowance >= _amount;\n    }\n\n    function _getSoldTokensByOfferedCurrency(address _token, uint _amount) internal view returns(uint) {\n        OfferedCurrency memory offeredCurrency = offeredCurrencies[_token];\n        return _amount * offeredCurrency.rate / (10 ** offeredCurrency.decimals);      \n    }\n\n    function _deliverTokens(address _beneficiary, uint _amount) internal {\n        TransferHelper.safeTransferFrom(address(soldToken), treasury, _beneficiary, _amount);\n    }\n\n    function _forwardFundTransfer(address _token, uint _value) internal {\n        TransferHelper.safeTransferFrom(_token, _msgSender(), fundReceiver, _value);\n    }\n\n    function _validPurchase() internal view returns(bool) {\n        bool withinPerioid = block.timestamp >= openTime && block.timestamp <= closeTime;\n        return withinPerioid;\n    }\n\n    /**\n     * @dev Computes the releasable amount of tokens for a vesting schedule.\n     * @return the amount of releasable tokens\n     */\n    function _computeReleasableAmount(\n        VestingSchedule memory vestingSchedule\n    ) internal view returns (uint256) {\n        // Retrieve the current time.\n        uint256 currentTime = block.timestamp;\n        // If the current time is before the cliff, no tokens are releasable.\n        if ((currentTime < vestingSchedule.cliff) || vestingSchedule.revoked) {\n            return 0;\n        }\n        // If the current time is after the vesting period, all tokens are releasable,\n        // minus the amount already released.\n        else if (\n            currentTime >= vestingSchedule.start + vestingSchedule.duration\n        ) {\n            return vestingSchedule.amountTotal - vestingSchedule.released;\n        }\n        // Otherwise, some tokens are releasable.\n        else {\n            // Compute the number of full vesting periods that have elapsed.\n            uint256 timeFromStart = currentTime - vestingSchedule.start;\n            uint256 secondsPerSlice = vestingSchedule.slicePeriodSeconds;\n            uint256 vestedSlicePeriods = timeFromStart / secondsPerSlice;\n            uint256 vestedSeconds = vestedSlicePeriods * secondsPerSlice;\n            // Compute the amount of tokens that are vested.\n            uint256 vestedAmount = (vestingSchedule.amountTotal *\n                vestedSeconds) / vestingSchedule.duration;\n            // Subtract the amount already released and return.\n            return vestedAmount - vestingSchedule.released;\n        }\n    }\n\n    /**\n     * @notice Creates a new vesting schedule for a beneficiary.\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n     * @param _start start time of the vesting period\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n     * @param _duration duration in seconds of the period in which the tokens will vest\n     * @param _slicePeriodSeconds duration of a slice period for the vesting in seconds\n     * @param _revocable whether the vesting is revocable or not\n     * @param _amount total amount of tokens to be released at the end of the vesting\n     */\n    function _createVestingSchedule(\n        address _beneficiary,\n        uint256 _start,\n        uint256 _cliff,\n        uint256 _duration,\n        uint256 _slicePeriodSeconds,\n        bool _revocable,\n        uint256 _amount\n    ) internal {\n        require(_duration > 0, \"TokenVesting: duration must be > 0\");\n        require(_amount > 0, \"TokenVesting: amount must be > 0\");\n        require(\n            _slicePeriodSeconds >= 1,\n            \"TokenVesting: slicePeriodSeconds must be >= 1\"\n        );\n        require(_duration >= _cliff, \"TokenVesting: duration must be >= cliff\");\n        uint256 cliff = _start + _cliff;\n        vestingSchedules[_beneficiary] = VestingSchedule(\n            _beneficiary,\n            cliff,\n            _start,\n            _duration,\n            _slicePeriodSeconds,\n            _revocable,\n            _amount,\n            0,\n            false\n        );\n\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount + _amount;\n    }\n\n    /// --------------------------------\n    /// ------- Modifier Function ------\n    /// --------------------------------\n}"
    },
    "contracts/interfaces/IDChainStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IDChainStaking {\n    function depositByVault(uint256 _originAmount, uint _lockedAmount, address _user, address referrer) external;\n    // function stakingContracts(uint256 contractId) external view returns()\n}\n"
    },
    "contracts/interfaces/IDDXStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IDDXStaking {\n    function depositByVault(uint256 _pid, uint256 _originAmount, uint _lockedAmount, address _user) external;\n    function getAmountDDXByUSD(uint256 _amountInUSD) external returns(uint);\n}\n"
    },
    "contracts/interfaces/IDDXVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IDDXVault {\n    function rewardFromDWStaking(address _beneficiary, uint256 _amount) external;\n    function rewardApplicable() external view returns(bool);\n    function startVestingTime() external view returns(uint256);\n}\n"
    },
    "contracts/interfaces/IDWVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IDWVault {\n}\n"
    },
    "contracts/interfaces/IERC173.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\n// Copied from: https://eips.ethereum.org/EIPS/eip-173\n\n/// @title ERC-173 Contract Ownership Standard\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n  /// @dev This emits when ownership of a contract changes.\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /// @notice Get the address of the owner\n  /// @return The address of the owner.\n  function owner() external view returns (address);\n\n  /// @notice Set the address of the new owner of the contract\n  /// @dev Set _newOwner to address(0) to renounce any ownership.\n  /// @param _newOwner The address of the new owner of the contract\n  function transferOwnership(address _newOwner) external;\n}"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "import {IERC20 as IOpenZeppelinERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20 is IOpenZeppelinERC20 {\n    function burn(uint256 amount) external;\n}"
    },
    "contracts/interfaces/IOracleSimple.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface IOracleSimple {\n\n    function getBlockTimestampLast() external view returns (uint32);\n\n    function consult(address token, uint amountIn) external view returns (uint amountOut);\n\n    function update() external;\n\n    function token0() external view returns(address);\n    \n    function token1() external view returns(address);\n\n    function PERIOD() external view returns(uint);\n}"
    },
    "contracts/interfaces/IVersioned.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\n/// @title interface for implementers that have an arbitrary associated tag\ninterface IVersioned {\n  /// @notice Returns the version triplet `[major, minor, patch]`\n  function getVersion() external pure returns (uint8[3] memory);\n}"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}"
    },
    "contracts/mocks/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\";\n\ncontract MockERC20 is ERC20PermitUpgradeable {\n    uint8 _decimals = 18;\n\n    function initialize(\n        string memory name,\n        string memory symbol,\n        uint8 decimals_\n    ) public initializer {\n        __ERC20Permit_init(name);\n        __ERC20_init(name, symbol);\n        // ERC20Upgradeable._mint(msg.sender, (10**9)*(10**18));\n        setDecimals(decimals_);\n    }\n\n    function mint(address _to, uint _amount) public {\n        ERC20Upgradeable._mint(_to, _amount);\n    }\n\n    function burn(uint _amount) public {\n        ERC20Upgradeable._burn(_msgSender(), _amount);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    function setDecimals(uint8 decimals_) public {\n        _decimals = decimals_;\n    }\n\n    function burn(address _from, uint _amount) public {\n        ERC20Upgradeable._burn(_from, _amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal override {\n        string memory symbol = symbol();\n        if (\n            keccak256(abi.encodePacked(symbol)) ==\n            keccak256(abi.encodePacked(\"USDT\"))\n        ) {\n            require(\n                !((amount != 0) && (allowance(msg.sender, spender) != 0)),\n                \"Approve USDT fail\"\n            );\n        }\n        super._approve(owner, spender, amount);\n    }\n}\n"
    },
    "contracts/proxy/ImplementationRepository.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport {DChainBase} from \"../DChainBase.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n/// @title User Controlled Upgrades (UCU) Proxy Repository\n/// A repository maintaing a collection of \"lineages\" of implementation contracts\n///\n/// Lineages are a sequence of implementations each lineage can be thought of as\n/// a \"major\" revision of implementations. Implementations between lineages are\n/// considered incompatible.\ncontract ImplementationRepository is DChainBase {\n  address internal constant INVALID_IMPL = address(0);\n  uint256 internal constant INVALID_LINEAGE_ID = 0;\n\n  /// @notice returns data that will be delegatedCalled when the given implementation\n  ///           is upgraded to\n  mapping(address => bytes) public upgradeDataFor;\n\n  /// @dev mapping from one implementation to the succeeding implementation\n  mapping(address => address) internal _nextImplementationOf;\n\n  /// @notice Returns the id of the lineage a given implementation belongs to\n  mapping(address => uint256) public lineageIdOf;\n\n  /// @dev internal because we expose this through the `currentImplementation(uint256)` api\n  mapping(uint256 => address) internal _currentOfLineage;\n\n  /// @notice Returns the id of the most recently created lineage\n  uint256 public currentLineageId;\n\n  // //////// External ////////////////////////////////////////////////////////////\n\n  /// @notice initialize the repository's state\n  /// @dev reverts if `_owner` is the null address\n  /// @dev reverts if `implementation` is not a contract\n  /// @param _owner owner of the repository\n  /// @param implementation initial implementation in the repository\n  function initialize(address _owner, address implementation) external initializer {\n    __DChainBase_init(_owner);\n    _createLineage(implementation);\n    require(currentLineageId != INVALID_LINEAGE_ID);\n  }\n\n  /// @notice set data that will be delegate called when a proxy upgrades to the given `implementation`\n  /// @dev reverts when caller is not an admin\n  /// @dev reverts when the contract is paused\n  /// @dev reverts if the given implementation isn't registered\n  function setUpgradeDataFor(\n    address implementation,\n    bytes calldata data\n  ) external onlyAdmin whenNotPaused {\n    _setUpgradeDataFor(implementation, data);\n  }\n\n  /// @notice Create a new lineage of implementations.\n  ///\n  /// This creates a new \"root\" of a new lineage\n  /// @dev reverts if `implementation` is not a contract\n  /// @param implementation implementation that will be the first implementation in the lineage\n  /// @return newly created lineage's id\n  function createLineage(\n    address implementation\n  ) external onlyAdmin whenNotPaused returns (uint256) {\n    return _createLineage(implementation);\n  }\n\n  /// @notice add a new implementation and set it as the current implementation\n  /// @dev reverts if the sender is not an owner\n  /// @dev reverts if the contract is paused\n  /// @dev reverts if `implementation` is not a contract\n  /// @param implementation implementation to append\n  function append(address implementation) external onlyAdmin whenNotPaused {\n    _append(implementation, currentLineageId);\n  }\n\n  /// @notice Append an implementation to a specified lineage\n  /// @dev reverts if the contract is paused\n  /// @dev reverts if the sender is not an owner\n  /// @dev reverts if `implementation` is not a contract\n  /// @param implementation implementation to append\n  /// @param lineageId id of lineage to append to\n  function append(address implementation, uint256 lineageId) external onlyAdmin whenNotPaused {\n    _append(implementation, lineageId);\n  }\n\n  /// @notice Remove an implementation from the chain and \"stitch\" together its neighbors\n  /// @dev If you have a chain of `A -> B -> C` and I call `remove(B, C)` it will result in `A -> C`\n  /// @dev reverts if `previos` is not the ancestor of `toRemove`\n  /// @dev we need to provide the previous implementation here to be able to successfully \"stitch\"\n  ///       the chain back together. Because this is an admin action, we can source what the previous\n  ///       version is from events.\n  /// @param toRemove Implementation to remove\n  /// @param previous Implementation that currently has `toRemove` as its successor\n  function remove(address toRemove, address previous) external onlyAdmin whenNotPaused {\n    _remove(toRemove, previous);\n  }\n\n  // //////// External view ////////////////////////////////////////////////////////////\n\n  /// @notice Returns `true` if an implementation has a next implementation set\n  /// @param implementation implementation to check\n  /// @return The implementation following the given implementation\n  function hasNext(address implementation) external view returns (bool) {\n    return _nextImplementationOf[implementation] != INVALID_IMPL;\n  }\n\n  /// @notice Returns `true` if an implementation has already been added\n  /// @param implementation Implementation to check existence of\n  /// @return `true` if the implementation has already been added\n  function has(address implementation) external view returns (bool) {\n    return _has(implementation);\n  }\n\n  /// @notice Get the next implementation for a given implementation or\n  ///           `address(0)` if it doesn't exist\n  /// @dev reverts when contract is paused\n  /// @param implementation implementation to get the upgraded implementation for\n  /// @return Next Implementation\n  function nextImplementationOf(\n    address implementation\n  ) external view whenNotPaused returns (address) {\n    return _nextImplementationOf[implementation];\n  }\n\n  /// @notice Returns `true` if a given lineageId exists\n  function lineageExists(uint256 lineageId) external view returns (bool) {\n    return _lineageExists(lineageId);\n  }\n\n  /// @notice Return the current implementation of a lineage with the given `lineageId`\n  function currentImplementation(uint256 lineageId) external view whenNotPaused returns (address) {\n    return _currentImplementation(lineageId);\n  }\n\n  /// @notice return current implementaton of the current lineage\n  function currentImplementation() external view whenNotPaused returns (address) {\n    return _currentImplementation(currentLineageId);\n  }\n\n  // //////// Internal ////////////////////////////////////////////////////////////\n\n  function _setUpgradeDataFor(address implementation, bytes memory data) internal {\n    require(_has(implementation), \"unknown impl\");\n    upgradeDataFor[implementation] = data;\n    emit UpgradeDataSet(implementation, data);\n  }\n\n  function _createLineage(address implementation) internal virtual returns (uint256) {\n    require(Address.isContract(implementation), \"not a contract\");\n    // NOTE: impractical to overflow\n    currentLineageId += 1;\n\n    _currentOfLineage[currentLineageId] = implementation;\n    lineageIdOf[implementation] = currentLineageId;\n\n    emit Added(currentLineageId, implementation, address(0));\n    return currentLineageId;\n  }\n\n  function _currentImplementation(uint256 lineageId) internal view returns (address) {\n    return _currentOfLineage[lineageId];\n  }\n\n  /// @notice Returns `true` if an implementation has already been added\n  /// @param implementation implementation to check for\n  /// @return `true` if the implementation has already been added\n  function _has(address implementation) internal view virtual returns (bool) {\n    return lineageIdOf[implementation] != INVALID_LINEAGE_ID;\n  }\n\n  /// @notice Set an implementation to the current implementation\n  /// @param implementation implementation to set as current implementation\n  /// @param lineageId id of lineage to append to\n  function _append(address implementation, uint256 lineageId) internal virtual {\n    require(Address.isContract(implementation), \"not a contract\");\n    require(!_has(implementation), \"exists\");\n    require(_lineageExists(lineageId), \"invalid lineageId\");\n    require(_currentOfLineage[lineageId] != INVALID_IMPL, \"empty lineage\");\n\n    address oldImplementation = _currentOfLineage[lineageId];\n    _currentOfLineage[lineageId] = implementation;\n    lineageIdOf[implementation] = lineageId;\n    _nextImplementationOf[oldImplementation] = implementation;\n\n    emit Added(lineageId, implementation, oldImplementation);\n  }\n\n  function _remove(address toRemove, address previous) internal virtual {\n    require(toRemove != INVALID_IMPL && previous != INVALID_IMPL, \"ZERO\");\n    require(_nextImplementationOf[previous] == toRemove, \"Not prev\");\n\n    uint256 lineageId = lineageIdOf[toRemove];\n\n    // need to reset the head pointer to the previous version if we remove the head\n    if (toRemove == _currentOfLineage[lineageId]) {\n      _currentOfLineage[lineageId] = previous;\n    }\n\n    _setUpgradeDataFor(toRemove, \"\"); // reset upgrade data\n    _nextImplementationOf[previous] = _nextImplementationOf[toRemove];\n    _nextImplementationOf[toRemove] = INVALID_IMPL;\n    lineageIdOf[toRemove] = INVALID_LINEAGE_ID;\n    emit Removed(lineageId, toRemove);\n  }\n\n  function _lineageExists(uint256 lineageId) internal view returns (bool) {\n    return lineageId != INVALID_LINEAGE_ID && lineageId <= currentLineageId;\n  }\n\n  // //////// Events //////////////////////////////////////////////////////////////\n  event Added(\n    uint256 indexed lineageId,\n    address indexed newImplementation,\n    address indexed oldImplementation\n  );\n  event Removed(uint256 indexed lineageId, address indexed implementation);\n  event UpgradeDataSet(address indexed implementation, bytes data);\n}"
    },
    "contracts/proxy/UcuProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport {ImplementationRepository as Repo} from \"./ImplementationRepository.sol\";\nimport {Proxy} from \"@openzeppelin/contracts/proxy/Proxy.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {IERC173} from \"../interfaces/IERC173.sol\";\n\n/// @title User Controlled Upgrade (UCU) Proxy\n///\n/// The UCU Proxy contract allows the owner of the proxy to control _when_ they\n/// upgrade their proxy, but not to what implementation.  The implementation is\n/// determined by an externally controlled {ImplementationRepository} contract that\n/// specifices the upgrade path. A user is able to upgrade their proxy as many\n/// times as is available until they're reached the most up to date version\ncontract UcuProxy is IERC173, Proxy {\n  /// @dev Storage slot with the address of the current implementation.\n  /// This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1\n  bytes32 private constant _IMPLEMENTATION_SLOT =\n    0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n  // defined here: https://eips.ethereum.org/EIPS/eip-1967\n  // result of `bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1)`\n  bytes32 private constant _ADMIN_SLOT =\n    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n  // result of `bytes32(uint256(keccak256('eipxxxx.proxy.repository')) - 1)`\n  bytes32 private constant _REPOSITORY_SLOT =\n    0x007037545499569801a5c0bd8dbf5fccb13988c7610367d129f45ee69b1624f8;\n\n  // ///////////////////// EXTERNAL ///////////////////////////////////////////////////////////////////////////\n\n  /// @param _repository repository used for sourcing upgrades\n  /// @param _owner owner of proxy\n  /// @dev reverts if either `_repository` or `_owner` is null\n  constructor(Repo _repository, address _owner) {\n    require(_owner != address(0), \"bad owner\");\n    _setOwner(_owner);\n    _setRepository(_repository);\n    // this will validate that the passed in repo is a contract\n    _upgradeToAndCall(_repository.currentImplementation(), \"\");\n  }\n\n  /// @notice upgrade the proxy implementation\n  /// @dev reverts if the repository has not been initialized or if there is no following version\n  function upgradeImplementation() external onlyOwner {\n    _upgradeImplementation();\n  }\n\n  /// @inheritdoc IERC173\n  function transferOwnership(address newOwner) external override onlyOwner {\n    _setOwner(newOwner);\n  }\n\n  /// @inheritdoc IERC173\n  function owner() external view override returns (address) {\n    return _getOwner();\n  }\n\n  /// @notice Returns the associated {Repo}\n  ///   contract used for fetching implementations to upgrade to\n  function getRepository() external view returns (Repo) {\n    return _getRepository();\n  }\n\n  // ///////////////////////// INTERNAL //////////////////////////////////////////////////////////////////////\n\n  function _upgradeImplementation() internal {\n    Repo repo = _getRepository();\n    address nextImpl = repo.nextImplementationOf(_implementation());\n    bytes memory data = repo.upgradeDataFor(nextImpl);\n    _upgradeToAndCall(nextImpl, data);\n  }\n\n  /// @dev Returns the current implementation address.\n  function _implementation() internal view override returns (address impl) {\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      impl := sload(_IMPLEMENTATION_SLOT)\n    }\n  }\n\n  /// @dev Upgrades the proxy to a new implementation.\n  //\n  /// Emits an {Upgraded} event.\n  function _upgradeToAndCall(address newImplementation, bytes memory data) internal virtual {\n    _setImplementationAndCall(newImplementation, data);\n    emit Upgraded(newImplementation);\n  }\n\n  /// @dev Stores a new address in the EIP1967 implementation slot.\n  function _setImplementationAndCall(address newImplementation, bytes memory data) internal {\n    require(Address.isContract(newImplementation), \"no upgrade\");\n\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      sstore(_IMPLEMENTATION_SLOT, newImplementation)\n    }\n\n    if (data.length > 0) {\n      (bool success, ) = newImplementation.delegatecall(data);\n      if (!success) {\n        assembly {\n          // This assembly ensure the revert contains the exact string data\n          let returnDataSize := returndatasize()\n          returndatacopy(0, 0, returnDataSize)\n          revert(0, returnDataSize)\n        }\n      }\n    }\n  }\n\n  function _setRepository(Repo newRepository) internal {\n    require(Address.isContract(address(newRepository)), \"bad repo\");\n    // solhint-disable-next-line security/no-inline-assembly\n    assembly {\n      sstore(_REPOSITORY_SLOT, newRepository)\n    }\n  }\n\n  function _getRepository() internal view returns (Repo repo) {\n    // solhint-disable-next-line security/no-inline-assembly\n    assembly {\n      repo := sload(_REPOSITORY_SLOT)\n    }\n  }\n\n  function _getOwner() internal view returns (address adminAddress) {\n    // solhint-disable-next-line security/no-inline-assembly\n    assembly {\n      adminAddress := sload(_ADMIN_SLOT)\n    }\n  }\n\n  function _setOwner(address newOwner) internal {\n    address previousOwner = _getOwner();\n    // solhint-disable-next-line security/no-inline-assembly\n    assembly {\n      sstore(_ADMIN_SLOT, newOwner)\n    }\n    emit OwnershipTransferred(previousOwner, newOwner);\n  }\n\n  // /////////////////////// MODIFIERS ////////////////////////////////////////////////////////////////////////\n  modifier onlyOwner() {\n    /// @dev NA: not authorized. not owner\n    require(msg.sender == _getOwner(), \"NA\");\n    _;\n  }\n\n  // /////////////////////// EVENTS ///////////////////////////////////////////////////////////////////////////\n\n  /// @dev Emitted when the implementation is upgraded.\n  event Upgraded(address indexed implementation);\n}"
    },
    "contracts/proxy/VersionedImplementationRepository.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport {IVersioned} from \"../interfaces/IVersioned.sol\";\nimport {ImplementationRepository as Repo} from \"./ImplementationRepository.sol\";\n\ncontract VersionedImplementationRepository is Repo {\n  /// @dev abi encoded version -> implementation address\n  /// @dev we use bytes here so only a single storage slot is used\n  mapping(bytes => address) internal _byVersion;\n\n  // // EXTERNAL //////////////////////////////////////////////////////////////////\n\n  /// @notice get an implementation by a version tag\n  /// @param version `[major, minor, patch]` version tag\n  /// @return implementation associated with the given version tag\n  function getByVersion(uint8[3] calldata version) external view returns (address) {\n    return _byVersion[abi.encodePacked(version)];\n  }\n\n  /// @notice check if a version exists\n  /// @param version `[major, minor, patch]` version tag\n  /// @return true if the version is registered\n  function hasVersion(uint8[3] calldata version) external view returns (bool) {\n    return _hasVersion(version);\n  }\n\n  // // INTERNAL //////////////////////////////////////////////////////////////////\n\n  function _append(address implementation, uint256 lineageId) internal override {\n    uint8[3] memory version = IVersioned(implementation).getVersion();\n    _insertVersion(version, implementation);\n    return super._append(implementation, lineageId);\n  }\n\n  function _createLineage(address implementation) internal override returns (uint256) {\n    uint8[3] memory version = IVersioned(implementation).getVersion();\n    _insertVersion(version, implementation);\n    uint256 lineageId = super._createLineage(implementation);\n    return lineageId;\n  }\n\n  function _remove(address toRemove, address previous) internal override {\n    uint8[3] memory version = IVersioned(toRemove).getVersion();\n    _removeVersion(version);\n    return super._remove(toRemove, previous);\n  }\n\n  function _insertVersion(uint8[3] memory version, address impl) internal {\n    require(!_hasVersion(version), \"exists\");\n    _byVersion[abi.encodePacked(version)] = impl;\n    emit VersionAdded(version, impl);\n  }\n\n  function _removeVersion(uint8[3] memory version) internal {\n    address toRemove = _byVersion[abi.encode(version)];\n    _byVersion[abi.encodePacked(version)] = INVALID_IMPL;\n    emit VersionRemoved(version, toRemove);\n  }\n\n  function _hasVersion(uint8[3] memory version) internal view returns (bool) {\n    return _byVersion[abi.encodePacked(version)] != INVALID_IMPL;\n  }\n\n  event VersionAdded(uint8[3] indexed version, address indexed impl);\n  event VersionRemoved(uint8[3] indexed version, address indexed impl);\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc",
          "devdoc",
          "userdoc",
          "storageLayout"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}