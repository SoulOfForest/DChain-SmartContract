/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace DGWStaking {
  export type StakingInfoStruct = {
    totalExpectedInterest: PromiseOrValue<BigNumberish>;
    totalStakesInUSD: PromiseOrValue<BigNumberish>;
    claimedInterest: PromiseOrValue<BigNumberish>;
    claimDuration: PromiseOrValue<BigNumberish>;
    dueDate: PromiseOrValue<BigNumberish>;
    lastClaimedTime: PromiseOrValue<BigNumberish>;
    lastUpdatedTime: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    stakeToken: PromiseOrValue<string>;
    totalStakesInToken: PromiseOrValue<BigNumberish>;
  };

  export type StakingInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    totalExpectedInterest: BigNumber;
    totalStakesInUSD: BigNumber;
    claimedInterest: BigNumber;
    claimDuration: BigNumber;
    dueDate: BigNumber;
    lastClaimedTime: BigNumber;
    lastUpdatedTime: BigNumber;
    createdAt: BigNumber;
    stakeToken: string;
    totalStakesInToken: BigNumber;
  };
}

export interface DGWStakingInterface extends utils.Interface {
  functions: {
    "DDXStaking()": FunctionFragment;
    "DDXVault()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "OWNER_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "SUB_ADMIN_ROLE()": FunctionFragment;
    "__DChainBase_init(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "allowedStakeTokens(address)": FunctionFragment;
    "assetPrices(address)": FunctionFragment;
    "claimDuration()": FunctionFragment;
    "claimMultipleRewards(uint256[])": FunctionFragment;
    "claimReward(uint256)": FunctionFragment;
    "commissionInterestLevels(uint256)": FunctionFragment;
    "couldBecomeReferrer(address)": FunctionFragment;
    "deposit(uint256,address,address)": FunctionFragment;
    "depositByVault(uint256,uint256,address,address)": FunctionFragment;
    "directBonus(address)": FunctionFragment;
    "directBonusRefreshExecuted(address)": FunctionFragment;
    "directInterest()": FunctionFragment;
    "emergencyCancelled()": FunctionFragment;
    "extraRewardToken()": FunctionFragment;
    "fundReceiver()": FunctionFragment;
    "getAllPendingRewards(uint256[])": FunctionFragment;
    "getAmountDWByUSD(uint256)": FunctionFragment;
    "getAmountDWByUSDStatic(uint256)": FunctionFragment;
    "getAmountUSDByToken(address,uint256)": FunctionFragment;
    "getAmountUSDByTokenStatic(address,uint256)": FunctionFragment;
    "getMultipleContractInfos(uint256[])": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getStakingAmountByPegToken(address,uint256)": FunctionFragment;
    "getStakingAmountInUSD(address,uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "isAdmin()": FunctionFragment;
    "maximumEarningsInPercent()": FunctionFragment;
    "minimumStakingAmountInUSD()": FunctionFragment;
    "offeredCurrencies(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingRewardInUSD(uint256)": FunctionFragment;
    "referredBy(address)": FunctionFragment;
    "refreshDirectBonus(address[])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "root()": FunctionFragment;
    "setAllowedStakeToken(address)": FunctionFragment;
    "setAssetOracle(address,address)": FunctionFragment;
    "setClaimDuration(uint64)": FunctionFragment;
    "setDDXStaking(address)": FunctionFragment;
    "setDDXVault(address)": FunctionFragment;
    "setDWVault(address)": FunctionFragment;
    "setDirectInterest(uint256)": FunctionFragment;
    "setFundReceiver(address)": FunctionFragment;
    "setMinimumStakingInUSD(uint256)": FunctionFragment;
    "setOfferedCurrency(address,uint256,uint256)": FunctionFragment;
    "setRoot(address)": FunctionFragment;
    "stakingContractOwnedBy(uint256)": FunctionFragment;
    "stakingContracts(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalReferralInvitations(address)": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "totalStakingContracts()": FunctionFragment;
    "treasury()": FunctionFragment;
    "unpause()": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DDXStaking"
      | "DDXVault"
      | "DEFAULT_ADMIN_ROLE"
      | "OWNER_ROLE"
      | "PAUSER_ROLE"
      | "SUB_ADMIN_ROLE"
      | "__DChainBase_init"
      | "admin"
      | "allowedStakeTokens"
      | "assetPrices"
      | "claimDuration"
      | "claimMultipleRewards"
      | "claimReward"
      | "commissionInterestLevels"
      | "couldBecomeReferrer"
      | "deposit"
      | "depositByVault"
      | "directBonus"
      | "directBonusRefreshExecuted"
      | "directInterest"
      | "emergencyCancelled"
      | "extraRewardToken"
      | "fundReceiver"
      | "getAllPendingRewards"
      | "getAmountDWByUSD"
      | "getAmountDWByUSDStatic"
      | "getAmountUSDByToken"
      | "getAmountUSDByTokenStatic"
      | "getMultipleContractInfos"
      | "getRoleAdmin"
      | "getStakingAmountByPegToken"
      | "getStakingAmountInUSD"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isAdmin"
      | "maximumEarningsInPercent"
      | "minimumStakingAmountInUSD"
      | "offeredCurrencies"
      | "pause"
      | "paused"
      | "pendingRewardInUSD"
      | "referredBy"
      | "refreshDirectBonus"
      | "renounceRole"
      | "revokeRole"
      | "rewardToken"
      | "root"
      | "setAllowedStakeToken"
      | "setAssetOracle"
      | "setClaimDuration"
      | "setDDXStaking"
      | "setDDXVault"
      | "setDWVault"
      | "setDirectInterest"
      | "setFundReceiver"
      | "setMinimumStakingInUSD"
      | "setOfferedCurrency"
      | "setRoot"
      | "stakingContractOwnedBy"
      | "stakingContracts"
      | "supportsInterface"
      | "totalReferralInvitations"
      | "totalStaked"
      | "totalStakingContracts"
      | "treasury"
      | "unpause"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DDXStaking",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DDXVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OWNER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUB_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__DChainBase_init",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowedStakeTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetPrices",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimMultipleRewards",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "commissionInterestLevels",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "couldBecomeReferrer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositByVault",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "directBonus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "directBonusRefreshExecuted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "directInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyCancelled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraRewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPendingRewards",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountDWByUSD",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountDWByUSDStatic",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountUSDByToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountUSDByTokenStatic",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultipleContractInfos",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingAmountByPegToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingAmountInUSD",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "isAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maximumEarningsInPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumStakingAmountInUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offeredCurrencies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRewardInUSD",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "referredBy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "refreshDirectBonus",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "root", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAllowedStakeToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetOracle",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDDXStaking",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDDXVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDWVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDirectInterest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundReceiver",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumStakingInUSD",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOfferedCurrency",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoot",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingContractOwnedBy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingContracts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReferralInvitations",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakingContracts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "DDXStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DDXVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUB_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__DChainBase_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedStakeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMultipleRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commissionInterestLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "couldBecomeReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositByVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "directBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "directBonusRefreshExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "directInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyCancelled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountDWByUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountDWByUSDStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountUSDByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountUSDByTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultipleContractInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingAmountByPegToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingAmountInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maximumEarningsInPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumStakingAmountInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offeredCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewardInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "referredBy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refreshDirectBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "root", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDDXStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDDXVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDWVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDirectInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumStakingInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOfferedCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingContractOwnedBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReferralInvitations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakingContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "ComissionDirectBonus(address,address,uint256,uint256)": EventFragment;
    "ContractCreated(uint256,address,address,address,uint256,uint256,uint256,uint64)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "RewardHarvested(uint256,address,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "StakingContractCreated(address,address,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ComissionDirectBonus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardHarvested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingContractCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ComissionDirectBonusEventObject {
  user: string;
  recipient: string;
  amount: BigNumber;
  amountInUSD: BigNumber;
}
export type ComissionDirectBonusEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ComissionDirectBonusEventObject
>;

export type ComissionDirectBonusEventFilter =
  TypedEventFilter<ComissionDirectBonusEvent>;

export interface ContractCreatedEventObject {
  contractId: BigNumber;
  user: string;
  stakeToken: string;
  referrer: string;
  amount: BigNumber;
  amountInUSD: BigNumber;
  interestAmountInUSD: BigNumber;
  dueDate: BigNumber;
}
export type ContractCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  ContractCreatedEventObject
>;

export type ContractCreatedEventFilter = TypedEventFilter<ContractCreatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RewardHarvestedEventObject {
  contractId: BigNumber;
  claimer: string;
  amount: BigNumber;
  amountInUSD: BigNumber;
}
export type RewardHarvestedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  RewardHarvestedEventObject
>;

export type RewardHarvestedEventFilter = TypedEventFilter<RewardHarvestedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StakingContractCreatedEventObject {
  user: string;
  referrer: string;
  contractId: BigNumber;
  stakingAmount: BigNumber;
}
export type StakingContractCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  StakingContractCreatedEventObject
>;

export type StakingContractCreatedEventFilter =
  TypedEventFilter<StakingContractCreatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface DGWStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DGWStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DDXStaking(overrides?: CallOverrides): Promise<[string]>;

    DDXVault(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SUB_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    __DChainBase_init(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allowedStakeTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { created: boolean }>;

    assetPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    claimDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimMultipleRewards(
      _contractIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      _contractId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commissionInterestLevels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    couldBecomeReferrer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      stakeToken: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositByVault(
      _originAmount: PromiseOrValue<BigNumberish>,
      _lockedAmount: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    directBonus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    directBonusRefreshExecuted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    directInterest(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyCancelled(overrides?: CallOverrides): Promise<[boolean]>;

    extraRewardToken(overrides?: CallOverrides): Promise<[string]>;

    fundReceiver(overrides?: CallOverrides): Promise<[string]>;

    getAllPendingRewards(
      _contractIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmountDWByUSD(
      _amountInUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAmountDWByUSDStatic(
      _amountInUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAmountUSDByToken(
      _stakeToken: PromiseOrValue<string>,
      _stakingAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAmountUSDByTokenStatic(
      _stakeToken: PromiseOrValue<string>,
      _stakingAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMultipleContractInfos(
      _contractIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[DGWStaking.StakingInfoStructOutput[]]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStakingAmountByPegToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakingAmountInUSD(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _owner: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _fundReceiver: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _extraRewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAdmin(overrides?: CallOverrides): Promise<[boolean]>;

    maximumEarningsInPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumStakingAmountInUSD(overrides?: CallOverrides): Promise<[BigNumber]>;

    offeredCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { decimal: BigNumber; rate: BigNumber }
    >;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingRewardInUSD(
      _contractId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referredBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    refreshDirectBonus(
      _addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    root(overrides?: CallOverrides): Promise<[string]>;

    setAllowedStakeToken(
      _stakeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAssetOracle(
      _pegToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setClaimDuration(
      _claimDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDDXStaking(
      _staking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDDXVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDWVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDirectInterest(
      _directInterest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFundReceiver(
      _fundReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumStakingInUSD(
      _minimumStakingAmountInUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOfferedCurrency(
      _currency: PromiseOrValue<string>,
      _rate: PromiseOrValue<BigNumberish>,
      _decimal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoot(
      _root: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakingContractOwnedBy(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stakingContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ] & {
        totalExpectedInterest: BigNumber;
        totalStakesInUSD: BigNumber;
        claimedInterest: BigNumber;
        claimDuration: BigNumber;
        dueDate: BigNumber;
        lastClaimedTime: BigNumber;
        lastUpdatedTime: BigNumber;
        createdAt: BigNumber;
        stakeToken: string;
        totalStakesInToken: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalReferralInvitations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakingContracts(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  DDXStaking(overrides?: CallOverrides): Promise<string>;

  DDXVault(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  SUB_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  __DChainBase_init(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  allowedStakeTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  assetPrices(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  claimDuration(overrides?: CallOverrides): Promise<BigNumber>;

  claimMultipleRewards(
    _contractIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    _contractId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commissionInterestLevels(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  couldBecomeReferrer(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    stakeToken: PromiseOrValue<string>,
    referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositByVault(
    _originAmount: PromiseOrValue<BigNumberish>,
    _lockedAmount: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    _referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  directBonus(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  directBonusRefreshExecuted(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  directInterest(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyCancelled(overrides?: CallOverrides): Promise<boolean>;

  extraRewardToken(overrides?: CallOverrides): Promise<string>;

  fundReceiver(overrides?: CallOverrides): Promise<string>;

  getAllPendingRewards(
    _contractIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountDWByUSD(
    _amountInUSD: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAmountDWByUSDStatic(
    _amountInUSD: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAmountUSDByToken(
    _stakeToken: PromiseOrValue<string>,
    _stakingAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAmountUSDByTokenStatic(
    _stakeToken: PromiseOrValue<string>,
    _stakingAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMultipleContractInfos(
    _contractIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<DGWStaking.StakingInfoStructOutput[]>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getStakingAmountByPegToken(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakingAmountInUSD(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _owner: PromiseOrValue<string>,
    _treasury: PromiseOrValue<string>,
    _fundReceiver: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    _extraRewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAdmin(overrides?: CallOverrides): Promise<boolean>;

  maximumEarningsInPercent(overrides?: CallOverrides): Promise<BigNumber>;

  minimumStakingAmountInUSD(overrides?: CallOverrides): Promise<BigNumber>;

  offeredCurrencies(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { decimal: BigNumber; rate: BigNumber }>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingRewardInUSD(
    _contractId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  referredBy(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  refreshDirectBonus(
    _addresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  root(overrides?: CallOverrides): Promise<string>;

  setAllowedStakeToken(
    _stakeToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAssetOracle(
    _pegToken: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setClaimDuration(
    _claimDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDDXStaking(
    _staking: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDDXVault(
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDWVault(
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDirectInterest(
    _directInterest: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFundReceiver(
    _fundReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumStakingInUSD(
    _minimumStakingAmountInUSD: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOfferedCurrency(
    _currency: PromiseOrValue<string>,
    _rate: PromiseOrValue<BigNumberish>,
    _decimal: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoot(
    _root: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakingContractOwnedBy(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  stakingContracts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber
    ] & {
      totalExpectedInterest: BigNumber;
      totalStakesInUSD: BigNumber;
      claimedInterest: BigNumber;
      claimDuration: BigNumber;
      dueDate: BigNumber;
      lastClaimedTime: BigNumber;
      lastUpdatedTime: BigNumber;
      createdAt: BigNumber;
      stakeToken: string;
      totalStakesInToken: BigNumber;
    }
  >;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalReferralInvitations(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakingContracts(overrides?: CallOverrides): Promise<BigNumber>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DDXStaking(overrides?: CallOverrides): Promise<string>;

    DDXVault(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    SUB_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    __DChainBase_init(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    allowedStakeTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    claimDuration(overrides?: CallOverrides): Promise<BigNumber>;

    claimMultipleRewards(
      _contractIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(
      _contractId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    commissionInterestLevels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    couldBecomeReferrer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      stakeToken: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositByVault(
      _originAmount: PromiseOrValue<BigNumberish>,
      _lockedAmount: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    directBonus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    directBonusRefreshExecuted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    directInterest(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyCancelled(overrides?: CallOverrides): Promise<boolean>;

    extraRewardToken(overrides?: CallOverrides): Promise<string>;

    fundReceiver(overrides?: CallOverrides): Promise<string>;

    getAllPendingRewards(
      _contractIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountDWByUSD(
      _amountInUSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountDWByUSDStatic(
      _amountInUSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountUSDByToken(
      _stakeToken: PromiseOrValue<string>,
      _stakingAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountUSDByTokenStatic(
      _stakeToken: PromiseOrValue<string>,
      _stakingAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultipleContractInfos(
      _contractIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<DGWStaking.StakingInfoStructOutput[]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getStakingAmountByPegToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingAmountInUSD(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _owner: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _fundReceiver: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _extraRewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAdmin(overrides?: CallOverrides): Promise<boolean>;

    maximumEarningsInPercent(overrides?: CallOverrides): Promise<BigNumber>;

    minimumStakingAmountInUSD(overrides?: CallOverrides): Promise<BigNumber>;

    offeredCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { decimal: BigNumber; rate: BigNumber }
    >;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingRewardInUSD(
      _contractId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referredBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    refreshDirectBonus(
      _addresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    root(overrides?: CallOverrides): Promise<string>;

    setAllowedStakeToken(
      _stakeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAssetOracle(
      _pegToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimDuration(
      _claimDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDDXStaking(
      _staking: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDDXVault(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDWVault(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDirectInterest(
      _directInterest: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundReceiver(
      _fundReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumStakingInUSD(
      _minimumStakingAmountInUSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOfferedCurrency(
      _currency: PromiseOrValue<string>,
      _rate: PromiseOrValue<BigNumberish>,
      _decimal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoot(
      _root: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingContractOwnedBy(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    stakingContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ] & {
        totalExpectedInterest: BigNumber;
        totalStakesInUSD: BigNumber;
        claimedInterest: BigNumber;
        claimDuration: BigNumber;
        dueDate: BigNumber;
        lastClaimedTime: BigNumber;
        lastUpdatedTime: BigNumber;
        createdAt: BigNumber;
        stakeToken: string;
        totalStakesInToken: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalReferralInvitations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakingContracts(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ComissionDirectBonus(address,address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      amountInUSD?: null
    ): ComissionDirectBonusEventFilter;
    ComissionDirectBonus(
      user?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      amountInUSD?: null
    ): ComissionDirectBonusEventFilter;

    "ContractCreated(uint256,address,address,address,uint256,uint256,uint256,uint64)"(
      contractId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      stakeToken?: PromiseOrValue<string> | null,
      referrer?: null,
      amount?: null,
      amountInUSD?: null,
      interestAmountInUSD?: null,
      dueDate?: null
    ): ContractCreatedEventFilter;
    ContractCreated(
      contractId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      stakeToken?: PromiseOrValue<string> | null,
      referrer?: null,
      amount?: null,
      amountInUSD?: null,
      interestAmountInUSD?: null,
      dueDate?: null
    ): ContractCreatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RewardHarvested(uint256,address,uint256,uint256)"(
      contractId?: PromiseOrValue<BigNumberish> | null,
      claimer?: PromiseOrValue<string> | null,
      amount?: null,
      amountInUSD?: null
    ): RewardHarvestedEventFilter;
    RewardHarvested(
      contractId?: PromiseOrValue<BigNumberish> | null,
      claimer?: PromiseOrValue<string> | null,
      amount?: null,
      amountInUSD?: null
    ): RewardHarvestedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "StakingContractCreated(address,address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      referrer?: PromiseOrValue<string> | null,
      contractId?: PromiseOrValue<BigNumberish> | null,
      stakingAmount?: null
    ): StakingContractCreatedEventFilter;
    StakingContractCreated(
      user?: PromiseOrValue<string> | null,
      referrer?: PromiseOrValue<string> | null,
      contractId?: PromiseOrValue<BigNumberish> | null,
      stakingAmount?: null
    ): StakingContractCreatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdraw(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    DDXStaking(overrides?: CallOverrides): Promise<BigNumber>;

    DDXVault(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SUB_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    __DChainBase_init(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allowedStakeTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimDuration(overrides?: CallOverrides): Promise<BigNumber>;

    claimMultipleRewards(
      _contractIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimReward(
      _contractId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commissionInterestLevels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    couldBecomeReferrer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      stakeToken: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositByVault(
      _originAmount: PromiseOrValue<BigNumberish>,
      _lockedAmount: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    directBonus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    directBonusRefreshExecuted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    directInterest(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyCancelled(overrides?: CallOverrides): Promise<BigNumber>;

    extraRewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    fundReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPendingRewards(
      _contractIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountDWByUSD(
      _amountInUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAmountDWByUSDStatic(
      _amountInUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAmountUSDByToken(
      _stakeToken: PromiseOrValue<string>,
      _stakingAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAmountUSDByTokenStatic(
      _stakeToken: PromiseOrValue<string>,
      _stakingAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMultipleContractInfos(
      _contractIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingAmountByPegToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingAmountInUSD(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _fundReceiver: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _extraRewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    maximumEarningsInPercent(overrides?: CallOverrides): Promise<BigNumber>;

    minimumStakingAmountInUSD(overrides?: CallOverrides): Promise<BigNumber>;

    offeredCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewardInUSD(
      _contractId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referredBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refreshDirectBonus(
      _addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<BigNumber>;

    setAllowedStakeToken(
      _stakeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAssetOracle(
      _pegToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setClaimDuration(
      _claimDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDDXStaking(
      _staking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDDXVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDWVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDirectInterest(
      _directInterest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFundReceiver(
      _fundReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumStakingInUSD(
      _minimumStakingAmountInUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOfferedCurrency(
      _currency: PromiseOrValue<string>,
      _rate: PromiseOrValue<BigNumberish>,
      _decimal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoot(
      _root: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakingContractOwnedBy(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalReferralInvitations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakingContracts(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DDXStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DDXVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SUB_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __DChainBase_init(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedStakeTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimMultipleRewards(
      _contractIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      _contractId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commissionInterestLevels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    couldBecomeReferrer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      stakeToken: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositByVault(
      _originAmount: PromiseOrValue<BigNumberish>,
      _lockedAmount: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    directBonus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    directBonusRefreshExecuted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    directInterest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyCancelled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extraRewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllPendingRewards(
      _contractIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountDWByUSD(
      _amountInUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAmountDWByUSDStatic(
      _amountInUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAmountUSDByToken(
      _stakeToken: PromiseOrValue<string>,
      _stakingAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAmountUSDByTokenStatic(
      _stakeToken: PromiseOrValue<string>,
      _stakingAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMultipleContractInfos(
      _contractIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingAmountByPegToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingAmountInUSD(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _fundReceiver: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _extraRewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maximumEarningsInPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumStakingAmountInUSD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offeredCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewardInUSD(
      _contractId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referredBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refreshDirectBonus(
      _addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    root(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllowedStakeToken(
      _stakeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAssetOracle(
      _pegToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setClaimDuration(
      _claimDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDDXStaking(
      _staking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDDXVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDWVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDirectInterest(
      _directInterest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFundReceiver(
      _fundReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumStakingInUSD(
      _minimumStakingAmountInUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOfferedCurrency(
      _currency: PromiseOrValue<string>,
      _rate: PromiseOrValue<BigNumberish>,
      _decimal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoot(
      _root: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakingContractOwnedBy(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalReferralInvitations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakingContracts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
