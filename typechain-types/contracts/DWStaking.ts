/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DWStakingInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "allowedStakeTokens(address)": FunctionFragment;
    "assetPrices(address)": FunctionFragment;
    "claimReward()": FunctionFragment;
    "commissionInterestLevels(uint256)": FunctionFragment;
    "deposit(uint256,address,address)": FunctionFragment;
    "directInterest()": FunctionFragment;
    "extraRewardToken()": FunctionFragment;
    "fallbackRewardTokenPriceInUSD()": FunctionFragment;
    "getStakingAmountByPegToken(address,uint256)": FunctionFragment;
    "getStakingAmountInUSD(address,uint256)": FunctionFragment;
    "interestPerSeconds()": FunctionFragment;
    "joinByReferral(address)": FunctionFragment;
    "maximumEarningsInPercent()": FunctionFragment;
    "minimumStakingAmountInUSD()": FunctionFragment;
    "offeredCurrencies(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingRewardInUSD(address)": FunctionFragment;
    "poolStatus()": FunctionFragment;
    "referredBy(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setAllowedStakeToken(address)": FunctionFragment;
    "setAssetOracle(address,address)": FunctionFragment;
    "setOfferedCurrency(address,uint256,uint256)": FunctionFragment;
    "stakingContracts(address)": FunctionFragment;
    "totalReferralInvitations(address)": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateAdmin(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "allowedStakeTokens"
      | "assetPrices"
      | "claimReward"
      | "commissionInterestLevels"
      | "deposit"
      | "directInterest"
      | "extraRewardToken"
      | "fallbackRewardTokenPriceInUSD"
      | "getStakingAmountByPegToken"
      | "getStakingAmountInUSD"
      | "interestPerSeconds"
      | "joinByReferral"
      | "maximumEarningsInPercent"
      | "minimumStakingAmountInUSD"
      | "offeredCurrencies"
      | "owner"
      | "pause"
      | "paused"
      | "pendingRewardInUSD"
      | "poolStatus"
      | "referredBy"
      | "renounceOwnership"
      | "rewardToken"
      | "setAllowedStakeToken"
      | "setAssetOracle"
      | "setOfferedCurrency"
      | "stakingContracts"
      | "totalReferralInvitations"
      | "totalStaked"
      | "transferOwnership"
      | "treasury"
      | "unpause"
      | "updateAdmin"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowedStakeTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetPrices",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commissionInterestLevels",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "directInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraRewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fallbackRewardTokenPriceInUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingAmountByPegToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingAmountInUSD",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "interestPerSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinByReferral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumEarningsInPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumStakingAmountInUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offeredCurrencies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRewardInUSD",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referredBy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedStakeToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetOracle",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOfferedCurrency",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingContracts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReferralInvitations",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedStakeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commissionInterestLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "directInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fallbackRewardTokenPriceInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingAmountByPegToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingAmountInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestPerSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinByReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumEarningsInPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumStakingAmountInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offeredCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewardInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "referredBy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOfferedCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReferralInvitations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposited(address,address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RewardHarvested(address,uint256,uint256)": EventFragment;
    "StakingContractCreated(address,address,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardHarvested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingContractCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DepositedEventObject {
  user: string;
  stakeToken: string;
  referrer: string;
  amount: BigNumber;
  amountInUSD: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RewardHarvestedEventObject {
  claimer: string;
  amount: BigNumber;
  amountInUSD: BigNumber;
}
export type RewardHarvestedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RewardHarvestedEventObject
>;

export type RewardHarvestedEventFilter = TypedEventFilter<RewardHarvestedEvent>;

export interface StakingContractCreatedEventObject {
  user: string;
  referrer: string;
  contractId: BigNumber;
  stakingAmount: BigNumber;
}
export type StakingContractCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  StakingContractCreatedEventObject
>;

export type StakingContractCreatedEventFilter =
  TypedEventFilter<StakingContractCreatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface DWStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DWStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    allowedStakeTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { created: boolean }>;

    assetPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    claimReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commissionInterestLevels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      stakeToken: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    directInterest(overrides?: CallOverrides): Promise<[BigNumber]>;

    extraRewardToken(overrides?: CallOverrides): Promise<[string]>;

    fallbackRewardTokenPriceInUSD(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakingAmountByPegToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakingAmountInUSD(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    interestPerSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    joinByReferral(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maximumEarningsInPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumStakingAmountInUSD(overrides?: CallOverrides): Promise<[BigNumber]>;

    offeredCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { decimal: BigNumber; rate: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingRewardInUSD(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolStatus(overrides?: CallOverrides): Promise<[boolean]>;

    referredBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setAllowedStakeToken(
      _stakeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAssetOracle(
      _pegToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOfferedCurrency(
      _currency: PromiseOrValue<string>,
      _rate: PromiseOrValue<BigNumberish>,
      _decimal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakingContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalStakesInUSD: BigNumber;
        claimedInterest: BigNumber;
        lastClaimedTime: BigNumber;
        lastUpdatedTime: BigNumber;
        lastTimeDeposited: BigNumber;
      }
    >;

    totalReferralInvitations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  allowedStakeTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  assetPrices(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  claimReward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commissionInterestLevels(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    stakeToken: PromiseOrValue<string>,
    referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  directInterest(overrides?: CallOverrides): Promise<BigNumber>;

  extraRewardToken(overrides?: CallOverrides): Promise<string>;

  fallbackRewardTokenPriceInUSD(overrides?: CallOverrides): Promise<BigNumber>;

  getStakingAmountByPegToken(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakingAmountInUSD(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  interestPerSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  joinByReferral(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maximumEarningsInPercent(overrides?: CallOverrides): Promise<BigNumber>;

  minimumStakingAmountInUSD(overrides?: CallOverrides): Promise<BigNumber>;

  offeredCurrencies(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { decimal: BigNumber; rate: BigNumber }>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingRewardInUSD(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolStatus(overrides?: CallOverrides): Promise<boolean>;

  referredBy(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setAllowedStakeToken(
    _stakeToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAssetOracle(
    _pegToken: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOfferedCurrency(
    _currency: PromiseOrValue<string>,
    _rate: PromiseOrValue<BigNumberish>,
    _decimal: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakingContracts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalStakesInUSD: BigNumber;
      claimedInterest: BigNumber;
      lastClaimedTime: BigNumber;
      lastUpdatedTime: BigNumber;
      lastTimeDeposited: BigNumber;
    }
  >;

  totalReferralInvitations(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    allowedStakeTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    claimReward(overrides?: CallOverrides): Promise<void>;

    commissionInterestLevels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      stakeToken: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    directInterest(overrides?: CallOverrides): Promise<BigNumber>;

    extraRewardToken(overrides?: CallOverrides): Promise<string>;

    fallbackRewardTokenPriceInUSD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingAmountByPegToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingAmountInUSD(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestPerSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    joinByReferral(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maximumEarningsInPercent(overrides?: CallOverrides): Promise<BigNumber>;

    minimumStakingAmountInUSD(overrides?: CallOverrides): Promise<BigNumber>;

    offeredCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { decimal: BigNumber; rate: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingRewardInUSD(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolStatus(overrides?: CallOverrides): Promise<boolean>;

    referredBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setAllowedStakeToken(
      _stakeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAssetOracle(
      _pegToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOfferedCurrency(
      _currency: PromiseOrValue<string>,
      _rate: PromiseOrValue<BigNumberish>,
      _decimal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalStakesInUSD: BigNumber;
        claimedInterest: BigNumber;
        lastClaimedTime: BigNumber;
        lastUpdatedTime: BigNumber;
        lastTimeDeposited: BigNumber;
      }
    >;

    totalReferralInvitations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Deposited(address,address,address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      stakeToken?: PromiseOrValue<string> | null,
      referrer?: PromiseOrValue<string> | null,
      amount?: null,
      amountInUSD?: null
    ): DepositedEventFilter;
    Deposited(
      user?: PromiseOrValue<string> | null,
      stakeToken?: PromiseOrValue<string> | null,
      referrer?: PromiseOrValue<string> | null,
      amount?: null,
      amountInUSD?: null
    ): DepositedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RewardHarvested(address,uint256,uint256)"(
      claimer?: PromiseOrValue<string> | null,
      amount?: null,
      amountInUSD?: null
    ): RewardHarvestedEventFilter;
    RewardHarvested(
      claimer?: PromiseOrValue<string> | null,
      amount?: null,
      amountInUSD?: null
    ): RewardHarvestedEventFilter;

    "StakingContractCreated(address,address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      referrer?: PromiseOrValue<string> | null,
      contractId?: PromiseOrValue<BigNumberish> | null,
      stakingAmount?: null
    ): StakingContractCreatedEventFilter;
    StakingContractCreated(
      user?: PromiseOrValue<string> | null,
      referrer?: PromiseOrValue<string> | null,
      contractId?: PromiseOrValue<BigNumberish> | null,
      stakingAmount?: null
    ): StakingContractCreatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdraw(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allowedStakeTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commissionInterestLevels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      stakeToken: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    directInterest(overrides?: CallOverrides): Promise<BigNumber>;

    extraRewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    fallbackRewardTokenPriceInUSD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingAmountByPegToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingAmountInUSD(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestPerSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    joinByReferral(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maximumEarningsInPercent(overrides?: CallOverrides): Promise<BigNumber>;

    minimumStakingAmountInUSD(overrides?: CallOverrides): Promise<BigNumber>;

    offeredCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewardInUSD(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolStatus(overrides?: CallOverrides): Promise<BigNumber>;

    referredBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setAllowedStakeToken(
      _stakeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAssetOracle(
      _pegToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOfferedCurrency(
      _currency: PromiseOrValue<string>,
      _rate: PromiseOrValue<BigNumberish>,
      _decimal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakingContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalReferralInvitations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedStakeTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commissionInterestLevels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      stakeToken: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    directInterest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extraRewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fallbackRewardTokenPriceInUSD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingAmountByPegToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingAmountInUSD(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestPerSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinByReferral(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maximumEarningsInPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumStakingAmountInUSD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offeredCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewardInUSD(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referredBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllowedStakeToken(
      _stakeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAssetOracle(
      _pegToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOfferedCurrency(
      _currency: PromiseOrValue<string>,
      _rate: PromiseOrValue<BigNumberish>,
      _decimal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakingContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalReferralInvitations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
