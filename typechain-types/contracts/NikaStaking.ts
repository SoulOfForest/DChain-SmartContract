/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface NikaStakingInterface extends utils.Interface {
  functions: {
    "Pause()": FunctionFragment;
    "TEN_MINUTES()": FunctionFragment;
    "UnPause()": FunctionFragment;
    "admin()": FunctionFragment;
    "baseInterestPerDay()": FunctionFragment;
    "commissionInterestLevels(uint256)": FunctionFragment;
    "cycleDuration()": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "getF1Invited(address)": FunctionFragment;
    "interestDistributeFrequency()": FunctionFragment;
    "interestIncreasePerCycle()": FunctionFragment;
    "isReferral(address)": FunctionFragment;
    "maxInterestPerDay()": FunctionFragment;
    "minimumStakingAmount()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingReward(address)": FunctionFragment;
    "poolStatus()": FunctionFragment;
    "referralInvitationsByCommissionLevel(address,uint256)": FunctionFragment;
    "referralLevels(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "totalReferralInvitations(address)": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "updateAdmin(address)": FunctionFragment;
    "updateTreasury(address)": FunctionFragment;
    "userStakingInfos(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Pause"
      | "TEN_MINUTES"
      | "UnPause"
      | "admin"
      | "baseInterestPerDay"
      | "commissionInterestLevels"
      | "cycleDuration"
      | "deposit"
      | "getF1Invited"
      | "interestDistributeFrequency"
      | "interestIncreasePerCycle"
      | "isReferral"
      | "maxInterestPerDay"
      | "minimumStakingAmount"
      | "oracle"
      | "owner"
      | "paused"
      | "pendingReward"
      | "poolStatus"
      | "referralInvitationsByCommissionLevel"
      | "referralLevels"
      | "renounceOwnership"
      | "rewardToken"
      | "totalReferralInvitations"
      | "totalStaked"
      | "transferOwnership"
      | "treasury"
      | "updateAdmin"
      | "updateTreasury"
      | "userStakingInfos"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "Pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TEN_MINUTES",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "UnPause", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseInterestPerDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commissionInterestLevels",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cycleDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getF1Invited",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "interestDistributeFrequency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestIncreasePerCycle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isReferral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxInterestPerDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumStakingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralInvitationsByCommissionLevel",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "referralLevels",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReferralInvitations",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakingInfos",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "Pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TEN_MINUTES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UnPause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseInterestPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commissionInterestLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cycleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getF1Invited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestDistributeFrequency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestIncreasePerCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isReferral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxInterestPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumStakingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralInvitationsByCommissionLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReferralInvitations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStakingInfos",
    data: BytesLike
  ): Result;

  events: {
    "CantClaimReward(address,uint256,uint256)": EventFragment;
    "CommissionRewardReferrerByLevel(address,address,uint256,uint256,uint256)": EventFragment;
    "Deposit(address,address,uint256)": EventFragment;
    "LinearRewardClaimed(address,uint256)": EventFragment;
    "LinearRewardReferrerByLevel(address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "ReferralLevelAdded(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CantClaimReward"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CommissionRewardReferrerByLevel"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinearRewardClaimed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LinearRewardReferrerByLevel"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralLevelAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface CantClaimRewardEventObject {
  claimer: string;
  amount: BigNumber;
  maxClaimAmount: BigNumber;
}
export type CantClaimRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CantClaimRewardEventObject
>;

export type CantClaimRewardEventFilter = TypedEventFilter<CantClaimRewardEvent>;

export interface CommissionRewardReferrerByLevelEventObject {
  origin: string;
  receiver: string;
  level: BigNumber;
  amount: BigNumber;
  invitationByLevel: BigNumber;
}
export type CommissionRewardReferrerByLevelEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  CommissionRewardReferrerByLevelEventObject
>;

export type CommissionRewardReferrerByLevelEventFilter =
  TypedEventFilter<CommissionRewardReferrerByLevelEvent>;

export interface DepositEventObject {
  user: string;
  referrer: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface LinearRewardClaimedEventObject {
  claimer: string;
  amount: BigNumber;
}
export type LinearRewardClaimedEvent = TypedEvent<
  [string, BigNumber],
  LinearRewardClaimedEventObject
>;

export type LinearRewardClaimedEventFilter =
  TypedEventFilter<LinearRewardClaimedEvent>;

export interface LinearRewardReferrerByLevelEventObject {
  origin: string;
  receiver: string;
  level: BigNumber;
  amount: BigNumber;
}
export type LinearRewardReferrerByLevelEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LinearRewardReferrerByLevelEventObject
>;

export type LinearRewardReferrerByLevelEventFilter =
  TypedEventFilter<LinearRewardReferrerByLevelEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ReferralLevelAddedEventObject {
  user: string;
  referral: string;
  level: BigNumber;
}
export type ReferralLevelAddedEvent = TypedEvent<
  [string, string, BigNumber],
  ReferralLevelAddedEventObject
>;

export type ReferralLevelAddedEventFilter =
  TypedEventFilter<ReferralLevelAddedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface NikaStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NikaStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    TEN_MINUTES(overrides?: CallOverrides): Promise<[number]>;

    UnPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    baseInterestPerDay(overrides?: CallOverrides): Promise<[number]>;

    commissionInterestLevels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cycleDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getF1Invited(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    interestDistributeFrequency(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    interestIncreasePerCycle(overrides?: CallOverrides): Promise<[number]>;

    isReferral(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxInterestPerDay(overrides?: CallOverrides): Promise<[number]>;

    minimumStakingAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingReward(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    poolStatus(overrides?: CallOverrides): Promise<[boolean]>;

    referralInvitationsByCommissionLevel(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referralLevels(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    totalReferralInvitations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    updateAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userStakingInfos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        totalStakes: BigNumber;
        totalWithdrawed: BigNumber;
        commissionInterest: BigNumber;
        claimedStakingInterest: BigNumber;
        stakingInterestRate: BigNumber;
        lastUpdatedTime: BigNumber;
        lastTimeDeposited: BigNumber;
        lastTimeClaimed: BigNumber;
        joinByReferral: boolean;
      }
    >;
  };

  Pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  TEN_MINUTES(overrides?: CallOverrides): Promise<number>;

  UnPause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  baseInterestPerDay(overrides?: CallOverrides): Promise<number>;

  commissionInterestLevels(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cycleDuration(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getF1Invited(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  interestDistributeFrequency(overrides?: CallOverrides): Promise<BigNumber>;

  interestIncreasePerCycle(overrides?: CallOverrides): Promise<number>;

  isReferral(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxInterestPerDay(overrides?: CallOverrides): Promise<number>;

  minimumStakingAmount(overrides?: CallOverrides): Promise<BigNumber>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingReward(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  poolStatus(overrides?: CallOverrides): Promise<boolean>;

  referralInvitationsByCommissionLevel(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  referralLevels(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  totalReferralInvitations(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  updateAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userStakingInfos(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      totalStakes: BigNumber;
      totalWithdrawed: BigNumber;
      commissionInterest: BigNumber;
      claimedStakingInterest: BigNumber;
      stakingInterestRate: BigNumber;
      lastUpdatedTime: BigNumber;
      lastTimeDeposited: BigNumber;
      lastTimeClaimed: BigNumber;
      joinByReferral: boolean;
    }
  >;

  callStatic: {
    Pause(overrides?: CallOverrides): Promise<void>;

    TEN_MINUTES(overrides?: CallOverrides): Promise<number>;

    UnPause(overrides?: CallOverrides): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    baseInterestPerDay(overrides?: CallOverrides): Promise<number>;

    commissionInterestLevels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cycleDuration(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getF1Invited(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestDistributeFrequency(overrides?: CallOverrides): Promise<BigNumber>;

    interestIncreasePerCycle(overrides?: CallOverrides): Promise<number>;

    isReferral(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxInterestPerDay(overrides?: CallOverrides): Promise<number>;

    minimumStakingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingReward(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    poolStatus(overrides?: CallOverrides): Promise<boolean>;

    referralInvitationsByCommissionLevel(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralLevels(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    totalReferralInvitations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    updateAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userStakingInfos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        totalStakes: BigNumber;
        totalWithdrawed: BigNumber;
        commissionInterest: BigNumber;
        claimedStakingInterest: BigNumber;
        stakingInterestRate: BigNumber;
        lastUpdatedTime: BigNumber;
        lastTimeDeposited: BigNumber;
        lastTimeClaimed: BigNumber;
        joinByReferral: boolean;
      }
    >;
  };

  filters: {
    "CantClaimReward(address,uint256,uint256)"(
      claimer?: PromiseOrValue<string> | null,
      amount?: null,
      maxClaimAmount?: null
    ): CantClaimRewardEventFilter;
    CantClaimReward(
      claimer?: PromiseOrValue<string> | null,
      amount?: null,
      maxClaimAmount?: null
    ): CantClaimRewardEventFilter;

    "CommissionRewardReferrerByLevel(address,address,uint256,uint256,uint256)"(
      origin?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      level?: null,
      amount?: null,
      invitationByLevel?: null
    ): CommissionRewardReferrerByLevelEventFilter;
    CommissionRewardReferrerByLevel(
      origin?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      level?: null,
      amount?: null,
      invitationByLevel?: null
    ): CommissionRewardReferrerByLevelEventFilter;

    "Deposit(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      referrer?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      user?: PromiseOrValue<string> | null,
      referrer?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositEventFilter;

    "LinearRewardClaimed(address,uint256)"(
      claimer?: PromiseOrValue<string> | null,
      amount?: null
    ): LinearRewardClaimedEventFilter;
    LinearRewardClaimed(
      claimer?: PromiseOrValue<string> | null,
      amount?: null
    ): LinearRewardClaimedEventFilter;

    "LinearRewardReferrerByLevel(address,address,uint256,uint256)"(
      origin?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      level?: null,
      amount?: null
    ): LinearRewardReferrerByLevelEventFilter;
    LinearRewardReferrerByLevel(
      origin?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      level?: null,
      amount?: null
    ): LinearRewardReferrerByLevelEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ReferralLevelAdded(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      referral?: PromiseOrValue<string> | null,
      level?: null
    ): ReferralLevelAddedEventFilter;
    ReferralLevelAdded(
      user?: PromiseOrValue<string> | null,
      referral?: PromiseOrValue<string> | null,
      level?: null
    ): ReferralLevelAddedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdraw(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    Pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    TEN_MINUTES(overrides?: CallOverrides): Promise<BigNumber>;

    UnPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    baseInterestPerDay(overrides?: CallOverrides): Promise<BigNumber>;

    commissionInterestLevels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cycleDuration(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getF1Invited(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestDistributeFrequency(overrides?: CallOverrides): Promise<BigNumber>;

    interestIncreasePerCycle(overrides?: CallOverrides): Promise<BigNumber>;

    isReferral(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxInterestPerDay(overrides?: CallOverrides): Promise<BigNumber>;

    minimumStakingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolStatus(overrides?: CallOverrides): Promise<BigNumber>;

    referralInvitationsByCommissionLevel(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralLevels(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    totalReferralInvitations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    updateAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userStakingInfos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    TEN_MINUTES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UnPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseInterestPerDay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commissionInterestLevels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cycleDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getF1Invited(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestDistributeFrequency(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestIncreasePerCycle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReferral(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxInterestPerDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumStakingAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralInvitationsByCommissionLevel(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralLevels(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalReferralInvitations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userStakingInfos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
