/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockERC20,
  MockERC20Interface,
} from "../../../contracts/mocks/MockERC20";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    name: "setDecimals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260cc805460ff1916601217905534801561001d57600080fd5b506116068061002d6000396000f3fe608060405234801561001057600080fd5b50600436106101115760003560e01c806342966c68116100ad5780639dc29fac116100715780639dc29fac1461023e578063a457c2d714610251578063a9059cbb14610264578063d505accf14610277578063dd62ed3e1461028a57600080fd5b806342966c68146101d457806370a08231146101e75780637a1395aa146102105780637ecebe001461022357806395d89b411461023657600080fd5b806306fdde0314610116578063095ea7b3146101345780631624f6c61461015757806318160ddd1461016c57806323b872dd1461017e578063313ce567146101915780633644e515146101a657806339509351146101ae57806340c10f19146101c1575b600080fd5b61011e61029d565b60405161012b9190611497565b60405180910390f35b6101476101423660046113af565b61032f565b604051901515815260200161012b565b61016a6101653660046113d8565b610347565b005b6035545b60405190815260200161012b565b61014761018c36600461130b565b610474565b60cc5460405160ff909116815260200161012b565b610170610498565b6101476101bc3660046113af565b6104a7565b61016a6101cf3660046113af565b6104c9565b61016a6101e2366004611449565b6104d7565b6101706101f53660046112b8565b6001600160a01b031660009081526033602052604090205490565b61016a61021e366004611461565b6104e4565b6101706102313660046112b8565b6104fa565b61011e61051a565b61016a61024c3660046113af565b610529565b61014761025f3660046113af565b610533565b6101476102723660046113af565b6105ae565b61016a610285366004611346565b6105bc565b6101706102983660046112d9565b610720565b6060603680546102ac90611565565b80601f01602080910402602001604051908101604052809291908181526020018280546102d890611565565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b5050505050905090565b60003361033d81858561074b565b5060019392505050565b600054610100900460ff16158080156103675750600054600160ff909116105b806103815750303b158015610381575060005460ff166001145b6103e95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561040c576000805461ff0019166101001790555b61041584610811565b61041f848461085b565b610428826104e4565b801561046e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60003361048285828561088c565b61048d858585610900565b506001949350505050565b60006104a2610a99565b905090565b60003361033d8185856104ba8383610720565b6104c49190611515565b61074b565b6104d38282610b14565b5050565b6104e13382610bc3565b50565b60cc805460ff191660ff92909216919091179055565b6001600160a01b0381166000908152609960205260408120545b92915050565b6060603780546102ac90611565565b6104d38282610bc3565b600033816105418286610720565b9050838110156105a15760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103e0565b61048d828686840361074b565b60003361033d818585610900565b8342111561060c5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016103e0565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c988888861063b8c610ce7565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061069682610d0f565b905060006106a682878787610d5d565b9050896001600160a01b0316816001600160a01b0316146107095760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016103e0565b6107148a8a8a61074b565b50505050505050505050565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b600061075561051a565b604051631554d11560e21b60208201529091506024016040516020818303038152906040528051906020012081604051602001610792919061147b565b6040516020818303038152906040528051906020012014156108065781158015906107c557506107c23384610720565b15155b156108065760405162461bcd60e51b8152602060048201526011602482015270105c1c1c9bdd99481554d1150819985a5b607a1b60448201526064016103e0565b61046e848484610d85565b600054610100900460ff166108385760405162461bcd60e51b81526004016103e0906114ca565b6104e181604051806040016040528060018152602001603160f81b815250610ea1565b600054610100900460ff166108825760405162461bcd60e51b81526004016103e0906114ca565b6104d38282610ee2565b60006108988484610720565b9050600019811461046e57818110156108f35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103e0565b61046e848484840361074b565b6001600160a01b0383166109645760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103e0565b6001600160a01b0382166109c65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103e0565b6001600160a01b03831660009081526033602052604090205481811015610a3e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103e0565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591516000805160206115b183398151915290610a8c9086815260200190565b60405180910390a361046e565b60006104a27f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610ac860655490565b6066546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6001600160a01b038216610b6a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103e0565b8060356000828254610b7c9190611515565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481526000805160206115b1833981519152910160405180910390a35050565b6001600160a01b038216610c235760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103e0565b6001600160a01b03821660009081526033602052604090205481811015610c975760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103e0565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192916000805160206115b183398151915291015b60405180910390a35b505050565b6001600160a01b03811660009081526099602052604090208054600181018255905b50919050565b6000610514610d1c610a99565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000610d6e87878787610f30565b91509150610d7b81610fea565b5095945050505050565b6001600160a01b038316610de75760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103e0565b6001600160a01b038216610e485760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103e0565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101610cd9565b600054610100900460ff16610ec85760405162461bcd60e51b81526004016103e0906114ca565b815160209283012081519190920120606591909155606655565b600054610100900460ff16610f095760405162461bcd60e51b81526004016103e0906114ca565b8151610f1c90603690602085019061116b565b508051610ce290603790602084019061116b565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115610f5d5750600090506003610fe1565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610fb1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610fda57600060019250925050610fe1565b9150600090505b94509492505050565b600081600481111561100c57634e487b7160e01b600052602160045260246000fd5b14156110155750565b600181600481111561103757634e487b7160e01b600052602160045260246000fd5b14156110805760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016103e0565b60028160048111156110a257634e487b7160e01b600052602160045260246000fd5b14156110f05760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016103e0565b600381600481111561111257634e487b7160e01b600052602160045260246000fd5b14156104e15760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016103e0565b82805461117790611565565b90600052602060002090601f01602090048101928261119957600085556111df565b82601f106111b257805160ff19168380011785556111df565b828001600101855582156111df579182015b828111156111df5782518255916020019190600101906111c4565b506111eb9291506111ef565b5090565b5b808211156111eb57600081556001016111f0565b80356001600160a01b038116811461121b57600080fd5b919050565b600082601f830112611230578081fd5b813567ffffffffffffffff8082111561124b5761124b61159a565b604051601f8301601f19908116603f011681019082821181831017156112735761127361159a565b8160405283815286602085880101111561128b578485fd5b8360208701602083013792830160200193909352509392505050565b803560ff8116811461121b57600080fd5b6000602082840312156112c9578081fd5b6112d282611204565b9392505050565b600080604083850312156112eb578081fd5b6112f483611204565b915061130260208401611204565b90509250929050565b60008060006060848603121561131f578081fd5b61132884611204565b925061133660208501611204565b9150604084013590509250925092565b600080600080600080600060e0888a031215611360578283fd5b61136988611204565b965061137760208901611204565b95506040880135945060608801359350611393608089016112a7565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156113c1578182fd5b6113ca83611204565b946020939093013593505050565b6000806000606084860312156113ec578283fd5b833567ffffffffffffffff80821115611403578485fd5b61140f87838801611220565b94506020860135915080821115611424578384fd5b5061143186828701611220565b925050611440604085016112a7565b90509250925092565b60006020828403121561145a578081fd5b5035919050565b600060208284031215611472578081fd5b6112d2826112a7565b6000825161148d818460208701611539565b9190910192915050565b60208152600082518060208401526114b6816040850160208701611539565b601f01601f19169190910160400192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000821982111561153457634e487b7160e01b81526011600452602481fd5b500190565b60005b8381101561155457818101518382015260200161153c565b8381111561046e5750506000910152565b600181811c9082168061157957607f821691505b60208210811415610d0957634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212203106e081e5a1c18662f5243ac8b21ea5b253fd0ed3c56753b0731d4eda97f52e64736f6c63430008040033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockERC20> {
    return super.deploy(overrides || {}) as Promise<MockERC20>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockERC20 {
    return super.attach(address) as MockERC20;
  }
  override connect(signer: Signer): MockERC20__factory {
    return super.connect(signer) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new utils.Interface(_abi) as MockERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC20 {
    return new Contract(address, _abi, signerOrProvider) as MockERC20;
  }
}
