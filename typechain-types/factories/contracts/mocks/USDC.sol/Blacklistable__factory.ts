/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Blacklistable,
  BlacklistableInterface,
} from "../../../../contracts/mocks/USDC.sol/Blacklistable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "Blacklisted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newBlacklister",
        type: "address",
      },
    ],
    name: "BlacklisterChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "UnBlacklisted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "blacklist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "blacklister",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "isBlacklisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "unBlacklist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newBlacklister",
        type: "address",
      },
    ],
    name: "updateBlacklister",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061059d806100206000396000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c80631a895266146100725780638da5cb5b1461009a578063ad38bf22146100be578063bd102430146100e4578063f2fde38b146100ec578063f9f92be414610112578063fe575a8714610138575b600080fd5b6100986004803603602081101561008857600080fd5b50356001600160a01b0316610172565b005b6100a2610204565b604080516001600160a01b039092168252519081900360200190f35b610098600480360360208110156100d457600080fd5b50356001600160a01b0316610213565b6100a2610307565b6100986004803603602081101561010257600080fd5b50356001600160a01b0316610316565b6100986004803603602081101561012857600080fd5b50356001600160a01b031661040e565b61015e6004803603602081101561014e57600080fd5b50356001600160a01b03166104a3565b604080519115158252519081900360200190f35b6001546001600160a01b031633146101bb5760405162461bcd60e51b815260040180806020018281038252602c81526020018061050a602c913960400191505060405180910390fd5b6001600160a01b038116600081815260026020526040808220805460ff19169055517f117e3210bb9aa7d9baff172026820255c6f6c30ba8999d1c2fd88e2848137c4e9190a250565b6000546001600160a01b031690565b6000546001600160a01b03163314610272576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166102b75760405162461bcd60e51b81526004018080602001828103825260328152602001806105366032913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0383811691909117918290556040519116907fc67398012c111ce95ecb7429b933096c977380ee6c421175a71a4a4c6c88c06e90600090a250565b6001546001600160a01b031681565b6000546001600160a01b03163314610375576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166103ba5760405162461bcd60e51b81526004018080602001828103825260268152602001806104e46026913960400191505060405180910390fd5b600054604080516001600160a01b039283168152918316602083015280517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09281900390910190a161040b816104c1565b50565b6001546001600160a01b031633146104575760405162461bcd60e51b815260040180806020018281038252602c81526020018061050a602c913960400191505060405180910390fd5b6001600160a01b038116600081815260026020526040808220805460ff19166001179055517fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b8559190a250565b6001600160a01b031660009081526002602052604090205460ff1690565b600080546001600160a01b0319166001600160a01b039290921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373426c61636b6c69737461626c653a2063616c6c6572206973206e6f742074686520626c61636b6c6973746572426c61636b6c69737461626c653a206e657720626c61636b6c697374657220697320746865207a65726f2061646472657373a2646970667358221220aa014d67dfff263b68563829fbe636dfaee44db9c995ca725d0983987edf6e6964736f6c634300060c0033";

type BlacklistableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlacklistableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Blacklistable__factory extends ContractFactory {
  constructor(...args: BlacklistableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Blacklistable> {
    return super.deploy(overrides || {}) as Promise<Blacklistable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Blacklistable {
    return super.attach(address) as Blacklistable;
  }
  override connect(signer: Signer): Blacklistable__factory {
    return super.connect(signer) as Blacklistable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlacklistableInterface {
    return new utils.Interface(_abi) as BlacklistableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Blacklistable {
    return new Contract(address, _abi, signerOrProvider) as Blacklistable;
  }
}
