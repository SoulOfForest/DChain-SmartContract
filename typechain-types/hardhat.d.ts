/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "EIP712Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "DchainFixedStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DchainFixedStaking__factory>;
    getContractFactory(
      name: "IIDOPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIDOPool__factory>;
    getContractFactory(
      name: "IOracleSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleSimple__factory>;
    getContractFactory(
      name: "IPancakeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeFactory__factory>;
    getContractFactory(
      name: "IPancakePair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakePair__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOracle__factory>;
    getContractFactory(
      name: "AbstractFiatTokenV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractFiatTokenV1__factory>;
    getContractFactory(
      name: "AbstractFiatTokenV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractFiatTokenV2__factory>;
    getContractFactory(
      name: "Blacklistable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Blacklistable__factory>;
    getContractFactory(
      name: "EIP2612",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP2612__factory>;
    getContractFactory(
      name: "EIP3009",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP3009__factory>;
    getContractFactory(
      name: "EIP712Domain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712Domain__factory>;
    getContractFactory(
      name: "FiatTokenV1_1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FiatTokenV1_1__factory>;
    getContractFactory(
      name: "FiatTokenV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FiatTokenV1__factory>;
    getContractFactory(
      name: "FiatTokenV2_1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FiatTokenV2_1__factory>;
    getContractFactory(
      name: "FiatTokenV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FiatTokenV2__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "Rescuable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Rescuable__factory>;
    getContractFactory(
      name: "OracleSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleSimple__factory>;

    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "ERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "EIP712Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "DchainFixedStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DchainFixedStaking>;
    getContractAt(
      name: "IIDOPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIDOPool>;
    getContractAt(
      name: "IOracleSimple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleSimple>;
    getContractAt(
      name: "IPancakeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeFactory>;
    getContractAt(
      name: "IPancakePair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakePair>;
    getContractAt(
      name: "MockERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "MockOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOracle>;
    getContractAt(
      name: "AbstractFiatTokenV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractFiatTokenV1>;
    getContractAt(
      name: "AbstractFiatTokenV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractFiatTokenV2>;
    getContractAt(
      name: "Blacklistable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Blacklistable>;
    getContractAt(
      name: "EIP2612",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP2612>;
    getContractAt(
      name: "EIP3009",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP3009>;
    getContractAt(
      name: "EIP712Domain",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712Domain>;
    getContractAt(
      name: "FiatTokenV1_1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FiatTokenV1_1>;
    getContractAt(
      name: "FiatTokenV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FiatTokenV1>;
    getContractAt(
      name: "FiatTokenV2_1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FiatTokenV2_1>;
    getContractAt(
      name: "FiatTokenV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FiatTokenV2>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "Rescuable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Rescuable>;
    getContractAt(
      name: "OracleSimple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleSimple>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
